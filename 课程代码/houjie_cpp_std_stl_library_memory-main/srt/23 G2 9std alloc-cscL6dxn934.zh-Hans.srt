1
00:00:03,840 --> 00:00:08,448
我们现在开始来谈这个目标学习的目标

2
00:00:08,704 --> 00:00:13,568
这个很棒的分配器这个东西它的设计

3
00:00:13,824 --> 00:00:16,128
这是一张中福

4
00:00:17,920 --> 00:00:19,456
在这个之后

5
00:00:19,712 --> 00:00:22,784
我会有13张的连环图片

6
00:00:23,808 --> 00:00:27,648
带大家来看看他的电话我现在很快的看看一看

7
00:00:27,904 --> 00:00:28,928
有些什么东西

8
00:00:30,720 --> 00:00:31,232
这是

9
00:00:31,744 --> 00:00:32,768
一张

10
00:00:34,560 --> 00:00:35,840
第二章

11
00:00:37,120 --> 00:00:38,144
第三章

12
00:00:38,400 --> 00:00:39,680
第四章

13
00:00:39,936 --> 00:00:44,288
你就会看到这个你这个内存池啊

14
00:00:44,544 --> 00:00:50,688
也就是这些链表它的变化很快的看一下有多少79

15
00:00:50,944 --> 00:00:53,504
10 11 12

16
00:00:54,272 --> 00:00:55,040
13

17
00:00:55,552 --> 00:00:59,136
第十三章了这个分配内存失败

18
00:00:59,904 --> 00:01:01,440
怎么那么快吃饭了没

19
00:01:01,696 --> 00:01:04,256
因为我要观察那个失败的结果

20
00:01:04,512 --> 00:01:06,560
看看他最终有什么样

21
00:01:07,072 --> 00:01:08,096
处理

22
00:01:08,608 --> 00:01:10,912
所以我去修改源代码

23
00:01:11,424 --> 00:01:15,264
改变了一个状态使得能够到达那个最后的结果

24
00:01:15,776 --> 00:01:18,336
这里就已经失败了我觉得

25
00:01:18,592 --> 00:01:20,128
美观察

26
00:01:20,640 --> 00:01:22,432
啊这是我们能够获得的

27
00:01:22,944 --> 00:01:24,224
讲义

28
00:01:24,736 --> 00:01:30,368
现在再回到前面来我先用一张动图来解释整个运作的

29
00:01:30,624 --> 00:01:31,648
行为模式

30
00:01:32,160 --> 00:01:36,768
在这张图里头右手边这个就是容器

31
00:01:38,304 --> 00:01:44,448
现在我们都谈论是这个东西啊2.9吧不过我已经告诉你了4.9把自己完全一样的东西

32
00:01:45,472 --> 00:01:51,360
源代码稍微改一下而已这个些容器用的是这一个分配器

33
00:01:52,128 --> 00:01:54,688
这个分配器的行为在这里

34
00:01:55,200 --> 00:02:01,344
分配器一定要提供两个重要的函数k t o k

35
00:02:02,624 --> 00:02:04,160
为容器都跟他要

36
00:02:04,672 --> 00:02:06,464
他怎么回应他呢

37
00:02:07,488 --> 00:02:13,120
在我们前面第1讲里面我们自己写了一个分配器里面我们是让这个分配器

38
00:02:14,144 --> 00:02:18,752
让我们写的很费劲变成某一个Class里面的

39
00:02:19,776 --> 00:02:21,824
凡属于他的一个分配器

40
00:02:22,080 --> 00:02:24,640
你投资维护一条自由列表

41
00:02:25,408 --> 00:02:26,688
专门为他来

42
00:02:27,456 --> 00:02:28,992
现在不太一样

43
00:02:29,248 --> 00:02:30,528
现在是吧

44
00:02:31,040 --> 00:02:34,880
把这些自由点的全部收集在一起16条

45
00:02:35,904 --> 00:02:37,696
16种大小

46
00:02:38,464 --> 00:02:42,816
超过这个范围的对不起

47
00:02:45,632 --> 00:02:47,168
所谓不为你服务是

48
00:02:47,680 --> 00:02:53,056
部落在我这个掌控之中但总最终总要有人给你这块内存

49
00:02:53,568 --> 00:02:57,408
所以超过我所规定的大小我

50
00:02:57,664 --> 00:02:58,432
Malik

51
00:02:58,944 --> 00:03:03,040
就调用

52
00:03:03,552 --> 00:03:05,088
就调用

53
00:03:05,344 --> 00:03:06,624
Minecraft

54
00:03:07,904 --> 00:03:10,208
这是他们的责任的区分

55
00:03:11,488 --> 00:03:13,792
我们继续往下看你会越来越清楚

56
00:03:14,048 --> 00:03:17,888
随着16根链表一开始就是16根指针

57
00:03:19,168 --> 00:03:22,496
现在这个不能好我现在描述一个故事

58
00:03:23,520 --> 00:03:29,152
这16条链表他们的责任是这样的这是负责发个自己

59
00:03:29,408 --> 00:03:31,712
他拉下去了没会八个自己

60
00:03:31,968 --> 00:03:37,856
这个16个儿子32 44 18 64最美1条间隔

61
00:03:38,368 --> 00:03:39,392
八个字节

62
00:03:40,672 --> 00:03:42,720
如果容器

63
00:03:44,256 --> 00:03:49,376
发出来的需求不是八的倍数比如说他要的是6

64
00:03:49,632 --> 00:03:52,704
见到这个系统来会被他调整到8

65
00:03:53,984 --> 00:04:00,128
这一个设计在所有的分配器上都一样我们后面会看到连malik本身其实也是

66
00:04:00,384 --> 00:04:05,248
是一个分配器的第3讲一次讲讲这个look

67
00:04:05,504 --> 00:04:08,064
欧有一样的设计一定要吧

68
00:04:08,320 --> 00:04:14,464
你的需求的大小调到某一个边界它设定了一个边界他不能任意无意

69
00:04:14,720 --> 00:04:20,863
无穷的这个回应你你要遛它给你溜你要九他给你久没有这样的设计

70
00:04:21,375 --> 00:04:22,911
将会带来很多的

71
00:04:23,167 --> 00:04:23,935
哇

72
00:04:24,703 --> 00:04:26,751
这里的设计的他会帮你调到

73
00:04:27,007 --> 00:04:28,031
8.7

74
00:04:29,311 --> 00:04:30,591
好现在

75
00:04:31,103 --> 00:04:32,639
讲错了我现在写程序

76
00:04:32,895 --> 00:04:33,919
哇

77
00:04:34,431 --> 00:04:36,223
我声明了一个bat

78
00:04:38,015 --> 00:04:39,551
我说你投放的是

79
00:04:40,063 --> 00:04:42,623
人数是32课自己这么大

80
00:04:43,903 --> 00:04:47,999
我放的是石头石头的大小是32个字节

81
00:04:49,023 --> 00:04:54,399
30个自己因此这个发出来的每一个月一次需求就是

82
00:04:54,655 --> 00:04:55,679
34几了

83
00:04:57,215 --> 00:05:01,311
这句话其实有待商榷不过现在先不要管

84
00:05:02,335 --> 00:05:04,639
更细的部分后面返回去

85
00:05:05,407 --> 00:05:11,551
总之就是如果于容器发出来的是32自己这么大的话一开始这个空

86
00:05:13,599 --> 00:05:16,671
32字节应该有这一条来

87
00:05:18,207 --> 00:05:19,999
这一条就是去

88
00:05:20,255 --> 00:05:25,887
叫我们在第一章所学到那样他就挖一大块来做切割

89
00:05:26,655 --> 00:05:27,679
拨打快乐

90
00:05:28,447 --> 00:05:29,471
20个

91
00:05:29,983 --> 00:05:32,287
这个20怎么定出来的

92
00:05:33,311 --> 00:05:34,335
没有解释

93
00:05:34,847 --> 00:05:40,991
知道现在你所需的整个东西都没有解释没有文档没有着它内部的石柱

94
00:05:41,503 --> 00:05:43,807
自挖了源代码之后整理出来的

95
00:05:44,063 --> 00:05:46,111
在20他更没有解释

96
00:05:46,367 --> 00:05:51,231
那我们只能去想象这是这个团队的经验值

97
00:05:51,743 --> 00:05:55,583
他认为一次20个不大不小也不会太浪费

98
00:05:55,839 --> 00:05:58,143
也不会常常要用光光

99
00:05:58,655 --> 00:06:00,191
用光了再要20个

100
00:06:00,959 --> 00:06:04,543
因此这边就挂了20个出来从这里

101
00:06:04,799 --> 00:06:05,311
到这里

102
00:06:05,567 --> 00:06:06,847
最后应该是一个零

103
00:06:07,103 --> 00:06:07,871
这是一个

104
00:06:08,127 --> 00:06:09,151
单向链表

105
00:06:10,943 --> 00:06:12,991
然后第1个就给出去了

106
00:06:13,247 --> 00:06:15,295
这个电表的指向下一个

107
00:06:16,063 --> 00:06:22,207
我有时候会话只想这里有时候会画指向左边有时候指向右边我是同一件事情

108
00:06:23,487 --> 00:06:27,327
根据画画图好不好画

109
00:06:28,351 --> 00:06:29,887
为不同的方向

110
00:06:30,399 --> 00:06:32,703
所以现在的情况就算19个

111
00:06:37,055 --> 00:06:42,687
如果单要那个容器在要那那就再拿着一会就直接拉动一动就好了

112
00:06:42,943 --> 00:06:45,247
我现在等于是在讲他的源代码了

113
00:06:45,759 --> 00:06:48,831
帮你实现的时候只要指针这么去移动就可以

114
00:06:49,343 --> 00:06:52,159
这一块就是用malloc

115
00:06:52,415 --> 00:06:54,463
去哪20个

116
00:06:54,719 --> 00:06:57,023
乘以32个字节

117
00:06:57,279 --> 00:06:58,559
总共有什么大一块

118
00:07:00,351 --> 00:07:01,375
就这样用

119
00:07:02,143 --> 00:07:04,959
如果用20个用光了那就再来一次

120
00:07:05,215 --> 00:07:09,055
他发现自己没有了他再跟谁唠嗑药

121
00:07:10,079 --> 00:07:11,359
以此类推

122
00:07:14,431 --> 00:07:16,479
但是如果接下来

123
00:07:16,735 --> 00:07:22,879
我又写了一个容器创建一个容器里面的女人数

124
00:07:23,135 --> 00:07:25,183
每次发出来是要64

125
00:07:27,487 --> 00:07:29,023
向他发出需求

126
00:07:29,535 --> 00:07:30,303
Hello Kitty

127
00:07:31,327 --> 00:07:32,351
发出气球

128
00:07:33,375 --> 00:07:39,263
这里面马上检查一下64个自己应该有17号来

129
00:07:40,031 --> 00:07:41,055
17要是空的

130
00:07:41,823 --> 00:07:45,919
于是就要去挖多少呢20个来切割

131
00:07:47,455 --> 00:07:49,247
我这样宪华的很奇特

132
00:07:50,271 --> 00:07:51,551
我划到这里来

133
00:07:53,599 --> 00:07:54,623
我的意思

134
00:07:54,879 --> 00:07:57,695
画这个土的意思是告诉你这一块

135
00:07:58,719 --> 00:08:03,839
其实跟上一块是相连的这是同一会是一次性的拿出来

136
00:08:04,607 --> 00:08:07,423
说这里有刚刚我没有提到的一个细节

137
00:08:07,935 --> 00:08:11,519
刚刚我说一次挖20个

138
00:08:12,287 --> 00:08:15,871
其实吃蛙20 x 2

139
00:08:17,919 --> 00:08:21,503
你干脆说40就好了你为什么说20乘以后呢

140
00:08:22,015 --> 00:08:26,623
因为是其中的一半拿来切就弃了20个

141
00:08:27,135 --> 00:08:29,183
另外一半就放着

142
00:08:30,207 --> 00:08:31,231
暂时不处理

143
00:08:32,767 --> 00:08:33,791
能说一个

144
00:08:34,047 --> 00:08:36,095
战备作战准备用

145
00:08:37,887 --> 00:08:38,911
当初已经

146
00:08:39,167 --> 00:08:41,471
跟它相连放好在这里

147
00:08:43,007 --> 00:08:47,103
所以当这个17号链表需要的时候

148
00:08:47,359 --> 00:08:49,919
这里有一块落战准备用的

149
00:08:50,687 --> 00:08:51,967
马上来算一下

150
00:08:52,479 --> 00:08:54,783
这个可以切64千几个呢

151
00:08:55,551 --> 00:08:56,831
黑切10个

152
00:08:58,367 --> 00:09:00,927
你刚刚就是两倍大吗

153
00:09:01,439 --> 00:09:03,743
这个事你拿出笔来算一算

154
00:09:05,791 --> 00:09:08,863
这是32乘以20怎么大

155
00:09:10,399 --> 00:09:14,239
20套要两倍所以下面这一块也是一样的大小

156
00:09:14,751 --> 00:09:19,615
但这一次要切成64岁处于祖切出来是10个

157
00:09:21,151 --> 00:09:22,175
其中的

158
00:09:22,431 --> 00:09:23,967
一个穿出去了

159
00:09:24,479 --> 00:09:27,551
客户客户是谁客户就是右边这些容器

160
00:09:29,343 --> 00:09:34,719
房子去了因此现在的7号电表的指针指向着下面应该有九个

161
00:09:36,767 --> 00:09:38,047
上面有19个

162
00:09:43,423 --> 00:09:45,983
接下来如果你要写一个容器

163
00:09:46,751 --> 00:09:52,895
今天这种情况已经不太多了你的应用程序里头播放也就是用一种或两种

164
00:09:53,151 --> 00:09:54,175
种容器

165
00:09:55,455 --> 00:10:01,599
现在假设你又继续写你的应用端你要建立一个容器这个容器

166
00:10:02,111 --> 00:10:02,623
你

167
00:10:02,879 --> 00:10:05,695
指定它的元素大小事

168
00:10:07,231 --> 00:10:11,071
他们说石头那现在说说说说苹果好吧

169
00:10:11,583 --> 00:10:13,887
苹果苹果的大小事

170
00:10:15,679 --> 00:10:16,447
96

171
00:10:16,703 --> 00:10:17,471
自己

172
00:10:18,239 --> 00:10:19,007
假设

173
00:10:20,543 --> 00:10:22,847
然后你放的一颗苹果进去

174
00:10:23,103 --> 00:10:27,455
这个容器就要跟分配器说那给我96个字节吧

175
00:10:28,991 --> 00:10:29,759
OK

176
00:10:30,783 --> 00:10:36,927
这个分配器就赶快去看一看现在呢这里有花店有华聚会

177
00:10:37,183 --> 00:10:40,255
这里有把区块这个19个有九个

178
00:10:41,279 --> 00:10:42,815
可是这一次要的是

179
00:10:43,071 --> 00:10:44,351
96个字节

180
00:10:45,375 --> 00:10:48,959
他应该这一号来给公司最好是空的

181
00:10:50,239 --> 00:10:53,055
于是再去拿

182
00:10:54,079 --> 00:10:55,103
那个

183
00:10:55,359 --> 00:10:57,407
作战准备的那些还在吗

184
00:10:57,663 --> 00:10:59,711
刚刚已经被分割光光了

185
00:10:59,967 --> 00:11:03,039
切成10个已经变成0了没有了

186
00:11:05,599 --> 00:11:06,879
好于是

187
00:11:07,391 --> 00:11:13,023
他在去跟只好不断准备这个地方我习惯把它叫做

188
00:11:13,791 --> 00:11:14,815
赞佩慈

189
00:11:15,839 --> 00:11:16,607
长辈

190
00:11:16,863 --> 00:11:21,215
现在没有了所以他知道跟没来回要多少呢

191
00:11:22,751 --> 00:11:24,031
96

192
00:11:24,543 --> 00:11:26,079
乘以20

193
00:11:26,335 --> 00:11:27,359
再乘以二

194
00:11:27,615 --> 00:11:29,151
每次都是要两倍

195
00:11:30,687 --> 00:11:35,295
在这个城里儿我现在把它画在这里这个没有办法按照比例化

196
00:11:36,575 --> 00:11:41,695
乘12的那一半的那部分的处理另外一半切的20个

197
00:11:42,463 --> 00:11:43,487
一个给出去

198
00:11:43,999 --> 00:11:45,279
这边说下19个

199
00:11:46,815 --> 00:11:48,095
我这边有一个破折号

200
00:11:48,351 --> 00:11:51,167
三角符号3014

201
00:11:51,423 --> 00:11:54,495
这中间有很多总共有19个

202
00:11:56,031 --> 00:11:58,335
这个多大那就可以算出来

203
00:11:59,871 --> 00:12:02,175
我们现在这个例子

204
00:12:02,943 --> 00:12:03,711
6

205
00:12:04,735 --> 00:12:06,015
乘以20

206
00:12:06,271 --> 00:12:08,575
就是这个赞呗尺大小

207
00:12:11,647 --> 00:12:17,279
整个程序的整个的分配器的运作方式就是这样进行下去

208
00:12:19,839 --> 00:12:21,631
那么当容器

209
00:12:22,143 --> 00:12:23,423
不是客户端

210
00:12:24,447 --> 00:12:25,727
容器

211
00:12:25,983 --> 00:12:32,127
要还掉这些元素的时候反正100万个现在变成50万个这个游戏有人退出了

212
00:12:32,639 --> 00:12:36,223
网络游戏有50万个人退出了要还掉这些内存

213
00:12:36,735 --> 00:12:38,783
于是调用的OK

214
00:12:40,319 --> 00:12:45,439
一块一块的内存这个1块的一块一块这样的内存就

215
00:12:45,695 --> 00:12:46,719
释放回去

216
00:12:46,975 --> 00:12:48,767
归还

217
00:12:49,023 --> 00:12:54,399
我喜欢用这个字眼微还给他他那这些都是链表

218
00:12:55,423 --> 00:12:58,239
他就根据回收了这个大小

219
00:12:58,751 --> 00:13:00,031
回收到

220
00:13:01,055 --> 00:13:05,151
负责的电表身上单向链表的操作

221
00:13:05,407 --> 00:13:07,711
非常简单的方案在学校收取过

222
00:13:08,223 --> 00:13:09,759
你真的爱他就好了

223
00:13:13,599 --> 00:13:14,879
这个就是分配

224
00:13:15,391 --> 00:13:16,415
汉回收

225
00:13:19,231 --> 00:13:20,767
这个系统是这样运作

226
00:13:22,815 --> 00:13:27,167
如果我写一个容器里面的元素我指定的是

227
00:13:27,935 --> 00:13:29,471
256个字节

228
00:13:32,287 --> 00:13:38,175
发出来的每一次需求都是256而他的任务他的他的责任是

229
00:13:38,943 --> 00:13:40,735
发到128

230
00:13:40,991 --> 00:13:47,135
说这个256就不归他来服务他一判断瓦着比我的上线还要大

231
00:13:47,647 --> 00:13:49,183
他就调用malloc

232
00:13:50,463 --> 00:13:53,023
联络可就没一会就上下带cookie了

233
00:13:53,535 --> 00:13:54,815
我得到了东西

234
00:13:55,327 --> 00:13:57,119
传回给容器

235
00:13:58,399 --> 00:14:00,703
所以容器得到的

236
00:14:00,959 --> 00:14:06,079
每次动态分配得到了一根指针及容器是不知道他有没有带过去

237
00:14:08,127 --> 00:14:09,663
本无所谓

238
00:14:11,199 --> 00:14:17,087
这中间如果你还有考不是很清楚的我们后面会越来越清楚没有关系

239
00:14:19,391 --> 00:14:20,415
所以

240
00:14:20,671 --> 00:14:21,695
这一边

241
00:14:21,951 --> 00:14:22,719
这些

242
00:14:23,231 --> 00:14:27,327
把这个图上所出现的这些大大小小的区块都是

243
00:14:27,583 --> 00:14:28,607
Clip3

244
00:14:29,887 --> 00:14:33,215
OK v63

245
00:14:34,495 --> 00:14:37,567
我们到免税商店去买东西怎么在YouTube

246
00:14:37,823 --> 00:14:38,847
免税

247
00:14:39,103 --> 00:14:41,151
这个在covid-19没有空气

248
00:14:41,919 --> 00:14:42,943
他们都没有空气

249
00:14:44,479 --> 00:14:47,551
因为他们都不是从没落可去取的

250
00:14:48,063 --> 00:14:54,207
当然了当初这一大块20个这一大块还要加上占被此次大会

251
00:14:54,463 --> 00:14:56,511
会使用malloc取的没错

252
00:14:57,279 --> 00:14:58,559
那个有带过去

253
00:14:59,071 --> 00:15:04,191
那个我的厚涂的涂绘画得更清楚地勾画出来

254
00:15:07,519 --> 00:15:08,031
好

255
00:15:08,543 --> 00:15:13,407
子上有了这个设计概念这个蓝图已经可以开始写代码了

256
00:15:14,943 --> 00:15:21,087
阿里拿一些小细节还没盘到的碎片啦还有山穷水尽的时候最后

257
00:15:21,343 --> 00:15:24,927
我用光光了所有该怎么办呢这是剩下的一些小细节

258
00:15:28,255 --> 00:15:30,815
我们来谈一谈embedded point

259
00:15:32,863 --> 00:15:34,911
这张图可以很好地呈现出来

260
00:15:37,215 --> 00:15:39,775
这点我画的每一个长条

261
00:15:40,287 --> 00:15:42,079
就是客户

262
00:15:43,359 --> 00:15:44,895
也就是容器

263
00:15:45,151 --> 00:15:47,199
所发出来的药的大小

264
00:15:50,271 --> 00:15:55,391
怎么也如果用上这张图来看的话就是这个会议会的这个

265
00:15:55,647 --> 00:15:56,415
指针

266
00:15:57,695 --> 00:16:02,303
这个指针划在这里也等同于这一张图这个地方

267
00:16:03,583 --> 00:16:04,607
现在呢

268
00:16:05,119 --> 00:16:07,935
绿色的这3块是已经给出去了

269
00:16:08,959 --> 00:16:12,799
这个怎么会变得乱七八糟的了因为给出去跟还回来的

270
00:16:13,311 --> 00:16:15,615
次序可能不是刚好另一项

271
00:16:16,127 --> 00:16:18,687
最最后可能会变成拉的乱78糟的

272
00:16:21,503 --> 00:16:23,295
我们看起来乱七八糟

273
00:16:24,063 --> 00:16:27,391
对于链表本身没有什么乱78糟可以的

274
00:16:28,159 --> 00:16:30,975
链表这家用哪一个

275
00:16:31,743 --> 00:16:34,047
那种快的前四个字节

276
00:16:34,559 --> 00:16:37,375
把它当成一个一个一个这种东西

277
00:16:38,399 --> 00:16:40,959
在源代码里面你会看到这是什么

278
00:16:41,471 --> 00:16:47,615
阿里特有的指针这样啦啦所以他没有所谓的乱78糟他就是按照这个

279
00:16:49,407 --> 00:16:50,687
如果

280
00:16:52,223 --> 00:16:57,087
现在客户要客户就是容器要这1块好我们这个链表

281
00:16:57,343 --> 00:16:59,647
分配器这个电表

282
00:16:59,903 --> 00:17:01,439
这一块是第1块

283
00:17:01,951 --> 00:17:04,511
猴子上这里这一块

284
00:17:04,767 --> 00:17:06,047
应该要给出去

285
00:17:07,327 --> 00:17:08,607
给出去的时候

286
00:17:09,119 --> 00:17:15,263
给出去之后容器就把这一整块当成元素的空间它就开始贬值

287
00:17:16,031 --> 00:17:18,335
就会感觉是一根时针

288
00:17:20,127 --> 00:17:21,151
没有问题

289
00:17:22,175 --> 00:17:25,503
因为什么时候这1块已经属于他了容器了

290
00:17:26,271 --> 00:17:32,415
水容器的元素了你把它戴调没关系我这个指针还给你的时候我已经拉了下

291
00:17:32,671 --> 00:17:33,439
下一块来

292
00:17:33,951 --> 00:17:37,023
这会已经属于别人的不属于我无所谓了

293
00:17:39,327 --> 00:17:43,423
等到容器在归还给我分配器的时候

294
00:17:44,703 --> 00:17:48,031
规划最快不管哪一块绿色的啊

295
00:17:48,799 --> 00:17:49,567
我

296
00:17:49,823 --> 00:17:53,919
分配器又把前面借用前面四个字节

297
00:17:55,199 --> 00:17:57,247
再把当成这种东西

298
00:17:59,551 --> 00:18:00,575
杂谈

299
00:18:00,831 --> 00:18:02,111
衔接到

300
00:18:02,367 --> 00:18:03,647
单向链表上

301
00:18:04,671 --> 00:18:10,815
这个就是借用人家的四个字节当指针这个叫嵌入式指针

302
00:18:12,095 --> 00:18:13,631
在所有的

303
00:18:15,167 --> 00:18:16,959
真正有商业价值

304
00:18:18,239 --> 00:18:23,103
好的为什么分配内存管理上面一定是用这个

305
00:18:23,359 --> 00:18:29,503
嵌入式指正在做要不然的话就会回到我们的第1讲里面的那个版本1

306
00:18:31,295 --> 00:18:34,367
台北医药播设计一根指针进去

307
00:18:34,879 --> 00:18:39,231
在原来的latex的设计上还要在玻设置一个日程

308
00:18:39,487 --> 00:18:39,999
这个

309
00:18:43,839 --> 00:18:45,119
注意这个图

310
00:18:48,703 --> 00:18:50,239
这一个东西

311
00:18:51,519 --> 00:18:53,567
在源代码里面该怎么设计呢

312
00:18:54,079 --> 00:18:55,359
设计成下面这样

313
00:18:57,919 --> 00:19:03,039
在他的原始设计里头能为廉价的原始设计是现在这样子

314
00:19:04,063 --> 00:19:08,159
但是其中的这一个成员这个member完全没有用到

315
00:19:09,439 --> 00:19:10,719
其实可以拿掉

316
00:19:13,023 --> 00:19:14,303
我就把它拿掉了

317
00:19:14,559 --> 00:19:16,863
我给你的这个这1分

318
00:19:17,375 --> 00:19:18,911
就把这个好拿掉了

319
00:19:20,447 --> 00:19:25,567
这样拿掉的话那么这个Unit大家是比较熟不熟悉Union

320
00:19:26,847 --> 00:19:28,383
可以改成什么不久

321
00:19:29,151 --> 00:19:32,223
既然只有一个member那该是多久是OK的

322
00:19:32,735 --> 00:19:34,271
你可以慢慢体会这一段

323
00:19:34,527 --> 00:19:35,551
这段

324
00:19:35,807 --> 00:19:41,183
这个obj这个东西这个设计就表示这一块

325
00:19:44,255 --> 00:19:47,327
他的头有一根指针指向自己这种东西

326
00:19:47,583 --> 00:19:50,399
在此向这个子也是最自己这种东西

327
00:19:51,935 --> 00:19:55,263
好我没看完怎么爸爸会更清楚

328
00:19:56,543 --> 00:20:00,127
怎么般到隐秘的空一个也许你会有一个联想

329
00:20:01,919 --> 00:20:04,479
如果我的对象Object

330
00:20:04,991 --> 00:20:07,551
小于四个字节就糟糕了

331
00:20:08,319 --> 00:20:09,599
因为指针

332
00:20:10,111 --> 00:20:14,975
借用当指针指针四个字节我本身就小于四个字节

333
00:20:15,231 --> 00:20:16,767
就不能被禁用了

334
00:20:18,047 --> 00:20:18,815
没错

335
00:20:19,839 --> 00:20:20,607
没错

336
00:20:21,119 --> 00:20:21,887
办事

337
00:20:22,143 --> 00:20:27,519
虽然我们说工业级的设计能有海量的小区块能生小啊

338
00:20:28,287 --> 00:20:30,335
多半也至少大于四

339
00:20:31,615 --> 00:20:33,151
大于等于次

340
00:20:33,407 --> 00:20:35,455
一个总数就要是个自己人

341
00:20:36,479 --> 00:20:39,295
所以多半可以被拿来借用

342
00:20:40,063 --> 00:20:41,343
要整理一次

343
00:20:41,599 --> 00:20:43,903
你的联想是对的这个

344
00:20:44,415 --> 00:20:50,047
对象本身必须大于等于一次才能够被家去当时曾用没有错

345
00:20:50,559 --> 00:20:55,679
而且实生活中人通常对象一切都大于等于10

346
00:21:00,543 --> 00:21:01,311
猫

347
00:21:01,567 --> 00:21:05,151
最前面是一个中途接下来我们就要

348
00:21:05,407 --> 00:21:11,551
一个步骤一个步骤的连续的去看他的电话我会把他的各式各样的细节都在

349
00:21:11,807 --> 00:21:12,575
展现出来

350
00:21:12,831 --> 00:21:15,391
然后我们就可以看它的源代码

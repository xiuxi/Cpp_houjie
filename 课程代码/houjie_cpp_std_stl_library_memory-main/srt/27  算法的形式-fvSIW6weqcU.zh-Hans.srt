1
00:00:07,680 --> 00:00:09,984
好我们前面完成了第2架

2
00:00:11,776 --> 00:00:13,824
我现在开始了我们来谈第3脚

3
00:00:14,848 --> 00:00:16,640
整个10加价标准库

4
00:00:16,896 --> 00:00:22,272
最庞大的那部分我们将STL他另外周边还有一些东西在STL之外

5
00:00:22,784 --> 00:00:23,552
Yamaha

6
00:00:24,320 --> 00:00:27,392
讲坛是STL里头的

7
00:00:28,160 --> 00:00:31,488
最重要最庞大的一部分容器

8
00:00:32,512 --> 00:00:34,048
第3家开始了

9
00:00:34,304 --> 00:00:35,840
我们也是在单STL

10
00:00:36,096 --> 00:00:37,376
他的是算法

11
00:00:39,680 --> 00:00:41,216
而这第2讲的

12
00:00:41,728 --> 00:00:45,824
第3讲第3讲汉第2讲一样我们也都是要深入到

13
00:00:46,336 --> 00:00:52,480
这些东西里头的这些固件组件它monin里头的这个

14
00:00:52,736 --> 00:00:53,248
源代码

15
00:00:54,272 --> 00:00:54,784
那么

16
00:00:55,040 --> 00:00:59,904
了解这个源代码我就非常清楚里面的一些限制问题他的能力

17
00:01:00,416 --> 00:01:02,720
在语言上还是怎么表现出来的

18
00:01:02,976 --> 00:01:09,120
这个备用的后面来运用就非常的有帮助另外一方面当然也是学习到技术上的东西

19
00:01:09,376 --> 00:01:11,168
我只是应用上的东西

20
00:01:12,960 --> 00:01:13,984
好首先

21
00:01:14,240 --> 00:01:17,312
标准库0的算法是一个什么样的东西

22
00:01:18,848 --> 00:01:21,152
从语言的层面来看

23
00:01:22,688 --> 00:01:26,016
标准库STL的六大部件

24
00:01:26,784 --> 00:01:32,928
前面我们的二奖主要他的容器它其实是一个Class template类模板

25
00:01:33,184 --> 00:01:33,696
回想一下

26
00:01:34,208 --> 00:01:36,768
全部这些容器都是在一个

27
00:01:37,024 --> 00:01:38,816
Lady头且他这个模板

28
00:01:39,072 --> 00:01:40,864
这个语言的层次来讲

29
00:01:41,376 --> 00:01:42,912
算法是什么呢

30
00:01:43,424 --> 00:01:45,216
是一个方兴天plate

31
00:01:45,984 --> 00:01:51,616
算法并说说好的排序这些做成一个函数那你要用它你就调用它吗

32
00:01:51,872 --> 00:01:55,200
给他这个函数的样子但是它是一个模板函数

33
00:01:55,456 --> 00:01:56,736
函数模板

34
00:01:56,992 --> 00:02:02,112
至于其他的这个后面接下去都要讲的那这些其实全部都是Class template

35
00:02:02,368 --> 00:02:03,904
就很独特的

36
00:02:04,160 --> 00:02:06,208
算法是一个方向temperate

37
00:02:06,720 --> 00:02:09,024
语法上来讲我们这样写

38
00:02:09,280 --> 00:02:14,144
这个斜体字表示就是是不是一个真正的名称这是一个

39
00:02:14,400 --> 00:02:14,912
一个

40
00:02:15,424 --> 00:02:16,448
Placeholder一个

41
00:02:17,216 --> 00:02:18,496
一个一个菜名称

42
00:02:19,008 --> 00:02:20,288
醉意思是说

43
00:02:21,312 --> 00:02:23,872
标准库里面所有的算法

44
00:02:24,128 --> 00:02:25,920
不赞成这种样子

45
00:02:26,176 --> 00:02:27,200
你这个来看

46
00:02:27,456 --> 00:02:28,480
这是一个什么

47
00:02:28,736 --> 00:02:30,272
这是个方向函数

48
00:02:30,528 --> 00:02:34,112
但是它有一些抽象的一些一些尚未定

49
00:02:34,368 --> 00:02:36,416
1出来的类型

50
00:02:36,928 --> 00:02:41,792
所以这是一个模板这就符合上面所说的算法是一个方形

51
00:02:43,328 --> 00:02:49,472
那么另外一种形式通常算法可能会有第2个版本我把他的第2版本

52
00:02:51,264 --> 00:02:52,288
那就这个样子

53
00:02:52,544 --> 00:02:54,848
名称相同比如说错他就会这样啊

54
00:02:55,104 --> 00:02:56,896
有一个数字他是两个参数的

55
00:02:57,152 --> 00:02:59,200
有的说他是三个参数的

56
00:02:59,712 --> 00:03:03,552
上这一种情况第3个参数就是意思是说

57
00:03:03,808 --> 00:03:05,600
我们在调用so的时候

58
00:03:06,368 --> 00:03:10,464
它允许我们在调用它的时候传入一个

59
00:03:11,488 --> 00:03:14,048
Criteria一个准则

60
00:03:14,304 --> 00:03:19,936
比如说排序要排大小什么时候比大小大跟小要怎么比怎么定义

61
00:03:20,192 --> 00:03:21,984
Criteria

62
00:03:23,008 --> 00:03:25,312
而后面里陆陆续续就会看到

63
00:03:27,104 --> 00:03:27,616
在

64
00:03:27,872 --> 00:03:31,456
很多的算法里头都允许你传入一个

65
00:03:31,712 --> 00:03:33,248
Criteria进来

66
00:03:33,504 --> 00:03:35,808
叫这个名字叫compare因为

67
00:03:36,064 --> 00:03:41,952
Sort的话排序要比大小最通常准则是一个比较大小的一个准则

68
00:03:42,976 --> 00:03:47,328
这个后面再来体制是又是一个什么东西它其实是一个方程

69
00:03:48,096 --> 00:03:49,632
好的后面找来说了

70
00:03:49,888 --> 00:03:50,400
所以

71
00:03:50,656 --> 00:03:53,728
算法基本上就是这辆这样的形式

72
00:03:54,752 --> 00:03:59,104
各位可以看到这个算法呢其实算法

73
00:03:59,360 --> 00:04:00,128
下来

74
00:04:00,384 --> 00:04:04,224
对父容器的价来处理容器里面贝塔

75
00:04:06,272 --> 00:04:12,416
但是我们前面讲过说闭门造车这是现在来讲是好事情啊这个

76
00:04:12,672 --> 00:04:15,232
这一切开来的两边各自进行

77
00:04:16,256 --> 00:04:17,280
彼此没有看脸

78
00:04:17,791 --> 00:04:21,375
彼此之间唯一的关系靠的是iterator迭代器

79
00:04:22,655 --> 00:04:25,215
所以算法其实是看不到容器的

80
00:04:25,727 --> 00:04:28,799
哈佛看到它收到的这两个参数

81
00:04:29,311 --> 00:04:33,151
每一个算法一定有最前面两个参数就是迭代器

82
00:04:33,663 --> 00:04:35,199
他只看到迭代器

83
00:04:35,455 --> 00:04:38,015
而迭代器是由容器来提供的

84
00:04:39,039 --> 00:04:44,159
对算法要去处理数据的时候那可能会想要知道

85
00:04:44,927 --> 00:04:45,951
我到底处理了

86
00:04:47,487 --> 00:04:51,327
标的target我的目标是不是一种什么样的容器

87
00:04:54,143 --> 00:04:57,983
为什么他会想要知道这个呢因为如果他知道的话

88
00:04:59,007 --> 00:05:00,287
知道这个容器的

89
00:05:00,543 --> 00:05:02,079
某些性质

90
00:05:02,591 --> 00:05:06,687
也许可以帮助算法找出一个最快最有效率的

91
00:05:08,223 --> 00:05:10,015
后面慢慢就会清楚这个观念

92
00:05:11,551 --> 00:05:12,063
所以

93
00:05:12,575 --> 00:05:18,719
算法会想要提问问迭代器一些问题而迭代器的需要

94
00:05:18,975 --> 00:05:19,999
要能够回答他

95
00:05:20,255 --> 00:05:21,279
这样的话

96
00:05:21,535 --> 00:05:22,559
算法

97
00:05:23,071 --> 00:05:27,935
虽然看不到容器但是它可以通过问答的方式去知道

98
00:05:28,703 --> 00:05:29,983
在这个容器里面

99
00:05:30,495 --> 00:05:32,799
在移动的情况等等等

100
00:05:34,847 --> 00:05:36,127
这就是这段话的意思

101
00:05:36,895 --> 00:05:37,919
廊坊片

102
00:05:38,431 --> 00:05:40,223
算法来看不见容器

103
00:05:40,991 --> 00:05:43,039
所以他对他一无所知

104
00:05:44,063 --> 00:05:48,415
所以算法所需要的一切的信息这个信息通常就是指

105
00:05:48,671 --> 00:05:49,951
迭代器怎么走

106
00:05:50,719 --> 00:05:53,279
等一下就会看到它的分类啊不要去怎么走

107
00:05:54,303 --> 00:05:58,399
他需要的一切的信息都必须从iterator迭代器取的

108
00:05:58,911 --> 00:06:02,495
而迭代器那必须能够回答所有的提问

109
00:06:03,007 --> 00:06:06,079
才能够搭配这个算法的所有的操作

110
00:06:07,359 --> 00:06:09,407
如果算法发出问题

111
00:06:09,919 --> 00:06:11,455
迭代器没有办法回答

112
00:06:12,223 --> 00:06:14,527
那会怎么样编译到哪一好

113
00:06:14,783 --> 00:06:17,087
兵器时代就会报错

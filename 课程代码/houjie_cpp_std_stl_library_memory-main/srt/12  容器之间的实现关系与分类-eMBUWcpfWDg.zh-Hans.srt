1
00:00:08,448 --> 00:00:10,496
前面我们介绍过了分配器

2
00:00:10,752 --> 00:00:13,568
分配器主要就是为容器来服务的

3
00:00:14,336 --> 00:00:15,360
他的雇主

4
00:00:16,128 --> 00:00:16,896
现在我们

5
00:00:17,408 --> 00:00:19,200
在六大附件里面的

6
00:00:19,712 --> 00:00:20,992
来谈谈容器

7
00:00:23,040 --> 00:00:24,832
这张图在第1讲出现过

8
00:00:26,368 --> 00:00:28,416
大家可以从这些图里面的

9
00:00:29,184 --> 00:00:34,560
大致感受到这个容器它的结构又省内存的分配

10
00:00:35,840 --> 00:00:38,656
我上次提到只有这个

11
00:00:38,912 --> 00:00:40,704
Ordered containers

12
00:00:41,472 --> 00:00:45,568
这种图吗看不出来的都是什么结构就是一些散乱的东西

13
00:00:46,336 --> 00:00:46,848
我

14
00:00:47,360 --> 00:00:48,384
看右边这张图

15
00:00:48,640 --> 00:00:52,224
又可以辅助其实它里头是一个黑Style

16
00:00:52,736 --> 00:00:54,272
反射表哈希表

17
00:00:58,368 --> 00:01:00,160
我另外整理了一个这个图

18
00:01:01,440 --> 00:01:04,768
这个图是让大家去体会到

19
00:01:05,280 --> 00:01:09,888
不同的容器之间有没有什么关联性

20
00:01:11,424 --> 00:01:12,960
在这个图里面

21
00:01:13,984 --> 00:01:14,752
这边说了

22
00:01:15,520 --> 00:01:19,104
本图以说排的形式所以说白就是

23
00:01:19,360 --> 00:01:25,504
我这边是往右边说是一个进去来表达一个基层焊眼

24
00:01:25,760 --> 00:01:27,552
深层的关系

25
00:01:28,320 --> 00:01:29,600
啊比如说

26
00:01:31,904 --> 00:01:32,928
右边是个好了

27
00:01:34,208 --> 00:01:40,352
The parasite wrt300是红黑树就是red is a fri

28
00:01:40,608 --> 00:01:42,144
红黑树

29
00:01:42,400 --> 00:01:46,240
这是一种高度平衡的二分数

30
00:01:47,264 --> 00:01:49,824
这边说排进去的意思但这个

31
00:01:50,080 --> 00:01:51,872
字面的意思就是说

32
00:01:52,384 --> 00:01:58,528
这个就是衍生层层面有三层上面这个就是基层两者的关

33
00:01:58,784 --> 00:01:59,296
关西

34
00:01:59,808 --> 00:02:00,576
是什么呢

35
00:02:01,344 --> 00:02:02,624
是不是继承

36
00:02:03,136 --> 00:02:04,672
吃复合看不进去

37
00:02:05,184 --> 00:02:06,464
也就是说

38
00:02:06,720 --> 00:02:08,512
乌咽我前面所提到的

39
00:02:09,536 --> 00:02:11,840
标准库里面很少有继承

40
00:02:12,352 --> 00:02:18,496
当然了这是早期的版本到了我讲的是耿耿2.91版的时候

41
00:02:19,008 --> 00:02:24,640
几乎各个Class完全独立没有继承关系到了4.9版的时候了

42
00:02:25,152 --> 00:02:26,432
翻译的

43
00:02:26,688 --> 00:02:32,064
容器本身就分为很多的卡拉斯的组合在后面会给各位当

44
00:02:33,088 --> 00:02:34,368
就复杂多了

45
00:02:34,880 --> 00:02:41,024
但是我看不出这个复杂的必要性这个这个主题后面再来说现在回到这里来我是在讲

46
00:02:41,280 --> 00:02:43,840
两个容器之间的关系

47
00:02:45,376 --> 00:02:48,448
在本身的区域之间

48
00:02:49,216 --> 00:02:52,288
是有某种关系存在一个他说拍进去

49
00:02:52,544 --> 00:02:55,360
但是它不是继承关系

50
00:02:56,384 --> 00:03:01,504
是一个看不自己负荷负荷就是拥有所以我们可以说

51
00:03:02,272 --> 00:03:05,600
在这里面有一个红薯

52
00:03:06,112 --> 00:03:09,696
或者我们说Map里面有一个红黑树

53
00:03:09,952 --> 00:03:11,488
在座底部的支撑

54
00:03:11,744 --> 00:03:13,024
帮他管理

55
00:03:13,536 --> 00:03:15,072
管理各个元素

56
00:03:16,096 --> 00:03:17,888
我不可以这样讲有一个

57
00:03:18,912 --> 00:03:20,192
回到左边这边来

58
00:03:20,960 --> 00:03:23,520
我们也可以说从这个图

59
00:03:23,776 --> 00:03:25,056
Cheap

60
00:03:25,312 --> 00:03:26,592
这不是一种特殊的

61
00:03:27,104 --> 00:03:33,248
容器并不是我们讲的16GB内存的那个是不是那个我们可以说

62
00:03:33,504 --> 00:03:34,272
有一个

63
00:03:34,784 --> 00:03:36,064
里头有一个Master

64
00:03:36,320 --> 00:03:37,344
或者我们说

65
00:03:37,856 --> 00:03:39,904
Priorityqueue little

66
00:03:40,160 --> 00:03:42,464
有一个vector来

67
00:03:42,720 --> 00:03:45,792
来做底部的数据和基础建设

68
00:03:46,560 --> 00:03:50,144
或者我们可以看下面这个

69
00:03:50,912 --> 00:03:52,960
里头有一个dex

70
00:03:55,008 --> 00:03:59,616
这个概念我们的第1讲已经讲得还比较详细一些的这部分有提过

71
00:03:59,872 --> 00:04:02,176
或者我们说去里面有一个大

72
00:04:03,200 --> 00:04:03,712
所以

73
00:04:03,968 --> 00:04:07,040
在这张图里面表情的说排是这个意思

74
00:04:07,552 --> 00:04:11,648
有一个这里很少用到的成都是用他们必须符合

75
00:04:11,904 --> 00:04:18,047
其实体会话提到一点就是我有一个Class is because a跟B

76
00:04:18,303 --> 00:04:19,327
如果a

77
00:04:19,583 --> 00:04:21,631
要用到B林的功能

78
00:04:23,935 --> 00:04:25,983
非要用到B点的功能

79
00:04:26,495 --> 00:04:27,519
里面的方式

80
00:04:28,287 --> 00:04:30,847
我们可以让a继承制的

81
00:04:32,895 --> 00:04:33,919
这是一种方法

82
00:04:34,175 --> 00:04:36,991
我们也可以让内容有一个逼

83
00:04:38,271 --> 00:04:40,575
无论是继承还是拥有

84
00:04:41,599 --> 00:04:42,111
A

85
00:04:42,367 --> 00:04:45,183
就可以去用倒逼

86
00:04:46,207 --> 00:04:47,231
有两种

87
00:04:47,999 --> 00:04:49,535
两种方法使用它

88
00:04:50,303 --> 00:04:54,655
但是这个地方尽量着整个标准库尽量不用计数

89
00:04:58,239 --> 00:05:00,031
这个图怎么能画出来呢

90
00:05:01,311 --> 00:05:03,359
没有任何文档说这种事情

91
00:05:04,383 --> 00:05:07,711
全部看了所有容器的数据库源代码之后

92
00:05:08,223 --> 00:05:10,015
单勾画出这个图出来

93
00:05:12,319 --> 00:05:15,647
好没问这张图会出现一些非标准

94
00:05:15,903 --> 00:05:16,927
总是在

95
00:05:17,439 --> 00:05:19,743
像这个HTC就非标准

96
00:05:20,767 --> 00:05:24,863
这些hashtable全部都是非标准有些是非非公还有非公开的

97
00:05:25,375 --> 00:05:27,679
拿到了新的这个

98
00:05:29,983 --> 00:05:35,103
Cas的萨克斯的第1讲就提供了就换了个名字叫forest

99
00:05:35,359 --> 00:05:37,663
当初SD它是非标准

100
00:05:39,455 --> 00:05:43,295
这些hashtable呢在下面有讲这个下面是两条有说

101
00:05:43,807 --> 00:05:49,951
SEC在眼里面的assistant改名叫Furniture所有hash开头的都改名字叫做

102
00:05:50,207 --> 00:05:51,231
Older

103
00:05:51,487 --> 00:05:53,791
他们当初都是不是标准那

104
00:05:54,303 --> 00:05:59,167
但是中药所以各家银行股东已经把它们做出来了

105
00:06:01,471 --> 00:06:06,591
好这张图还有在左边右边各有一些蓝色的东西

106
00:06:08,895 --> 00:06:14,015
是测试出这一些容器如果为这个容器做出一个

107
00:06:14,271 --> 00:06:15,039
Object

108
00:06:17,343 --> 00:06:18,879
他这个F的大小

109
00:06:19,391 --> 00:06:20,415
比如说

110
00:06:20,671 --> 00:06:25,791
With好了

111
00:06:26,303 --> 00:06:27,071
这个test

112
00:06:27,583 --> 00:06:28,863
我这边旁边就会写

113
00:06:29,375 --> 00:06:30,911
它的大小是多少

114
00:06:31,423 --> 00:06:32,703
一个大小

115
00:06:32,959 --> 00:06:38,591
在各路2.91板底下它的大小是是30f就可以看到它的大小

116
00:06:38,847 --> 00:06:40,639
4点900美元是吧

117
00:06:41,919 --> 00:06:43,967
这个主要呈现就是这样子

118
00:06:46,271 --> 00:06:52,415
这个大小跟这个容器里面有100万个元素或者是有两个元素的都没有

119
00:06:52,671 --> 00:06:58,815
关系所以这个大小指的是一个容器里面要控制整个数据结构它

120
00:06:59,071 --> 00:07:05,215
他的控制他的比如说他可能是需要三根指针啊还是需要什么东西的本身

121
00:07:06,751 --> 00:07:11,871
至于由这个数控制出去的100万个元素那个子元素的大小

122
00:07:12,127 --> 00:07:13,151
元素的个数

123
00:07:14,431 --> 00:07:16,991
容器本身的大小是无关的

124
00:07:19,551 --> 00:07:21,855
这边有些数值列出来

125
00:07:26,975 --> 00:07:29,279
这个整个课程我会把这个讲义

126
00:07:29,791 --> 00:07:34,399
要给你所以这些我也我们现在也不必去看他也不会去念他

127
00:07:34,655 --> 00:07:36,959
你到时候看了讲义你可以

128
00:07:37,727 --> 00:07:39,263
跟后面的讲解再来

129
00:07:39,519 --> 00:07:40,287
对起来

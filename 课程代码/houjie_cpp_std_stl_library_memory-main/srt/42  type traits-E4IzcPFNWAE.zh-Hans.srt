1
00:00:06,656 --> 00:00:10,240
前面介绍了Google现在接下来我们来看另外一个

2
00:00:10,496 --> 00:00:16,640
把屏幕调petrus trace这个字眼前面就出现过了一会他说这是一个

3
00:00:16,896 --> 00:00:23,040
我发现我发一个萃取机那个机制看你怎么去设计这个机制

4
00:00:23,296 --> 00:00:29,440
他对于他为他出一只已经影响了所以就具备了一个香港城

5
00:00:29,696 --> 00:00:35,840
成都可以继续看其他的锤子这个techtrex在以前就出现了2点

6
00:00:36,096 --> 00:00:39,936
减900的时候就有了但是当时非常的阳春就非常的

7
00:00:40,960 --> 00:00:42,496
平淡如水

8
00:00:42,752 --> 00:00:46,848
吃要吃面食的阳春面阳春面的平淡如水

9
00:00:47,104 --> 00:00:53,248
不是那个阳春白雪下里巴人的比较纯粹这个

10
00:00:53,504 --> 00:00:59,648
这很阳春的这一个他却是怎么做的那些前面曾经大的提高一点概念你也可以在

11
00:01:00,416 --> 00:01:04,000
赶快把这个回忆勾起来做法是这样

12
00:01:04,512 --> 00:01:06,304
这里面

13
00:01:06,816 --> 00:01:09,120
在2.9分时候

14
00:01:09,632 --> 00:01:12,704
做出了一个tetris写法是这样子

15
00:01:15,264 --> 00:01:21,408
他是一个模板这个模板里头有六123456六个他比赛

16
00:01:22,688 --> 00:01:24,480
看来又是在问一打了

17
00:01:25,248 --> 00:01:26,272
六合彩对方

18
00:01:26,528 --> 00:01:28,832
这个产品名字叫什么呢

19
00:01:29,344 --> 00:01:33,952
第1个是因为实现上的关系是这个其实不重要不要管他

20
00:01:34,208 --> 00:01:36,000
剩下五个问题

21
00:01:36,512 --> 00:01:37,536
还要回答

22
00:01:38,560 --> 00:01:39,840
问题是这样

23
00:01:40,096 --> 00:01:46,240
你的衣服可说是默认的构造函数是重要的吗随便就是不中

24
00:01:46,496 --> 00:01:47,264
重要的

25
00:01:47,776 --> 00:01:50,848
平凡的琐碎了

26
00:01:51,104 --> 00:01:54,176
无关紧要的意思所以

27
00:01:54,688 --> 00:01:58,784
你的必不可少的重不重要就是个问题

28
00:02:00,320 --> 00:02:03,392
Happy contractor拷贝构造重要

29
00:02:05,184 --> 00:02:08,512
Celebrated拷贝复制总部重要

30
00:02:09,024 --> 00:02:10,560
Destructor不重要

31
00:02:11,072 --> 00:02:13,376
好默认的回答都是

32
00:02:15,424 --> 00:02:17,728
Boss的意思就是多重要

33
00:02:18,240 --> 00:02:20,544
问问说你不重要吗

34
00:02:22,592 --> 00:02:23,616
谁是重要

35
00:02:24,384 --> 00:02:30,528
也就是说在一个默认的情况之下的他假设所有的类型

36
00:02:32,320 --> 00:02:34,624
他的这些东西都是重要的

37
00:02:35,904 --> 00:02:37,952
这些东西都重要的话

38
00:02:38,208 --> 00:02:44,352
将来在作拷贝构造考被赋值比如说在一个容器里有你要把100

39
00:02:44,608 --> 00:02:47,680
元素搬到另外一个地方去应该

40
00:02:48,960 --> 00:02:52,032
按理说应该做100万次的

41
00:02:52,288 --> 00:02:53,312
拷贝

42
00:02:53,824 --> 00:02:54,592
构造

43
00:02:55,872 --> 00:02:59,200
搬过去之后还要做100万次的

44
00:02:59,456 --> 00:03:00,992
喜购estrada

45
00:03:01,248 --> 00:03:01,760
机构

46
00:03:03,808 --> 00:03:05,600
因为这里做中药

47
00:03:05,856 --> 00:03:07,136
要什么做

48
00:03:08,160 --> 00:03:10,208
写代码的时候就要去判断

49
00:03:13,280 --> 00:03:18,400
但是如果你写出一个类型其实你知道那些动作不重要

50
00:03:19,936 --> 00:03:21,216
你就可以

51
00:03:21,472 --> 00:03:27,616
在这个地方位为这个泛化的版本写一个客户

52
00:03:27,872 --> 00:03:31,968
华为这个泛化的设计是一个特化版本出来说

53
00:03:32,736 --> 00:03:37,856
我这个类型这些答案的不是这个默认的答案我有我自己的答案

54
00:03:39,904 --> 00:03:40,672
比如说

55
00:03:42,720 --> 00:03:45,792
现在人格化的写法是这样这边交通是一个

56
00:03:47,584 --> 00:03:50,144
这个本来是叫太

57
00:03:50,656 --> 00:03:52,448
现在被你拿出来了吗

58
00:03:53,216 --> 00:03:57,312
这个地方的这个关键字Class或来后期都改用

59
00:03:57,568 --> 00:04:03,712
MM早起现在打出来

60
00:04:03,968 --> 00:04:05,760
来了就绑定为

61
00:04:06,016 --> 00:04:10,880
这个太不方便我爱人体就是一个特化的写法语法上这样

62
00:04:11,648 --> 00:04:14,720
对于整数这种态度

63
00:04:15,232 --> 00:04:17,280
他的这五个问题

64
00:04:18,047 --> 00:04:18,559
你的

65
00:04:19,071 --> 00:04:24,959
什么拷贝构造考并赋值什么默认构造析构函数中不重要呢

66
00:04:26,239 --> 00:04:26,751
他说

67
00:04:27,263 --> 00:04:29,055
都是重要的

68
00:04:30,079 --> 00:04:32,639
总数哪里有这些东西所以

69
00:04:33,663 --> 00:04:34,431
有没有

70
00:04:35,455 --> 00:04:36,735
不重要的呢

71
00:04:37,503 --> 00:04:38,783
安卓市场

72
00:04:39,551 --> 00:04:41,343
惠都不重要

73
00:04:43,391 --> 00:04:46,975
对于这个打破那也是一样反正这些

74
00:04:47,999 --> 00:04:49,023
基本类型

75
00:04:49,279 --> 00:04:55,167
语言上的基本类型根本没有没有这些什么拷贝构造拷贝赋值什么析构函数

76
00:04:55,679 --> 00:04:57,983
所以这些东西

77
00:04:59,007 --> 00:05:02,335
C加加标准库本身就无味

78
00:05:02,847 --> 00:05:06,175
他们这些基本类型都各写了一些

79
00:05:06,687 --> 00:05:12,831
策划的版本下面点点点开很多个我看看我没列出来没有啊就我只贴出这两个

80
00:05:16,159 --> 00:05:19,999
那另外的类型那另外类型就是你自己定义的了

81
00:05:23,071 --> 00:05:29,215
标准库没有办法越俎代庖没有办法帮你去决定你所定义的

82
00:05:29,471 --> 00:05:32,287
这些类型的这一些问题

83
00:05:32,543 --> 00:05:35,359
这些东西重不重要他不知道

84
00:05:37,407 --> 00:05:39,199
只有你自己知道

85
00:05:39,711 --> 00:05:41,247
所以你可以像这样子

86
00:05:42,015 --> 00:05:48,159
按着葫芦画瓢啊照这么写我也来为我自己写一个特化版本

87
00:05:51,231 --> 00:05:53,023
特化版本

88
00:05:53,279 --> 00:05:55,071
我这里没有我看一下

89
00:05:55,839 --> 00:05:57,631
我这里没有设计

90
00:05:57,887 --> 00:06:04,031
写出这个特化版本现在前面有出现过在这个地方我就照这样子写

91
00:06:04,287 --> 00:06:10,431
这边早操操操这个照超但是这个尖括号里面的

92
00:06:10,687 --> 00:06:13,759
Ff14写一个富

93
00:06:14,271 --> 00:06:19,391
然后这几个问题这里到底是要回答真会讲的你自己去决定

94
00:06:20,927 --> 00:06:22,463
你自己才知道你的

95
00:06:22,975 --> 00:06:24,767
析构函数中不重要

96
00:06:27,583 --> 00:06:30,399
不举一个例子好了比如说你设置一个复数

97
00:06:31,679 --> 00:06:33,215
付出有时不屈服

98
00:06:34,239 --> 00:06:38,591
它的析构函数中不重要的你根本就不必为他写一个函数

99
00:06:38,847 --> 00:06:40,895
你也不必为他写构造函数

100
00:06:43,455 --> 00:06:49,599
好啊等一下刚才这句话要求这个构造函数是可以写但是这个

101
00:06:51,135 --> 00:06:54,975
拷贝构造不了解拷贝父子

102
00:06:55,999 --> 00:06:57,279
这些都不用谢

103
00:06:58,815 --> 00:07:00,863
为什么因为你不写的时候

104
00:07:01,119 --> 00:07:02,911
编写的默认版本

105
00:07:04,191 --> 00:07:07,263
而那个版本所做的事情已经够了

106
00:07:08,799 --> 00:07:14,943
复数只有时不需不需不需不的拷贝就是忠实的一个为一个位格

107
00:07:15,199 --> 00:07:18,783
一个拷贝你不需要特别在做一些什么事情

108
00:07:20,319 --> 00:07:22,367
所以就用默认的那个

109
00:07:23,903 --> 00:07:28,255
你要解析构函数吗你要把持不需不清为零吗根本不必

110
00:07:28,511 --> 00:07:31,839
他都会死掉了这时就是前清为零有什么用呢

111
00:07:33,119 --> 00:07:36,703
所以我就取这个地址相互助的话呢它里面

112
00:07:37,983 --> 00:07:44,127
他没有指针所以基本上这些这些东西都是不重要的这些函数都不重要只有毒

113
00:07:44,383 --> 00:07:45,919
爱的指针的这一种

114
00:07:46,687 --> 00:07:47,967
比较特别考虑

115
00:07:49,759 --> 00:07:55,647
或者是你在析构函数要关掉一个窗口了要关掉一个文件呢

116
00:07:55,903 --> 00:08:02,047
这些是犯傻啦

117
00:08:02,303 --> 00:08:08,447
我现场环境比较等等等这一种所以你自己可以判断到底你的这一些

118
00:08:08,703 --> 00:08:14,847
特殊重不重要所以回到刚刚来你够就可以为你的一个class

119
00:08:15,103 --> 00:08:17,663
20人像这样子写一套

120
00:08:17,919 --> 00:08:20,223
自己去回答重不重要

121
00:08:20,479 --> 00:08:25,599
这个重不重要要采用这里的这两个出差多少

122
00:08:26,367 --> 00:08:31,999
反正一切照着这个规格来去你这么写的话

123
00:08:33,535 --> 00:08:39,679
通常这个作为算法在我的算法不是会问问题吗我们前面提到的那些事

124
00:08:39,935 --> 00:08:41,471
什么copy这个算法

125
00:08:41,727 --> 00:08:45,567
在第3讲里面有提到一些算法里头呢

126
00:08:46,335 --> 00:08:47,871
有些算法他们问

127
00:08:48,127 --> 00:08:50,175
他问问说你的

128
00:08:50,687 --> 00:08:55,551
可能就是问这个这个这个他不出来像这样就是一个问题

129
00:08:56,575 --> 00:08:57,599
少妇

130
00:08:58,623 --> 00:09:01,439
我要通过trace来问你的

131
00:09:01,695 --> 00:09:03,231
Instructor重不重要

132
00:09:04,255 --> 00:09:06,815
你有不重要的地方吗

133
00:09:07,071 --> 00:09:08,863
看真和假

134
00:09:09,375 --> 00:09:14,239
这个算法的来决定一个最有效的一个过程运算过程

135
00:09:17,311 --> 00:09:18,079
所以

136
00:09:18,591 --> 00:09:24,735
讲讲你的一个Class就照这样写只有你设计的

137
00:09:24,991 --> 00:09:31,135
他有办法会去写出这些答案这些答案写出来之后算法就可能相识

138
00:09:31,391 --> 00:09:37,535
怎样去问这些问题一写出来定义通过也就得到了答案这样的是吧

139
00:09:40,095 --> 00:09:41,375
这个角type_traits

140
00:09:44,191 --> 00:09:47,007
在没有谈到这个东西之前

141
00:09:47,519 --> 00:09:49,311
你脑子都有这个东西呢

142
00:10:15,679 --> 00:10:17,727
最实用性不是很高

143
00:10:20,543 --> 00:10:22,591
我看这边

144
00:10:23,103 --> 00:10:26,431
在新的版本刚12.9一版的2.9版

145
00:10:27,199 --> 00:10:30,271
或前或后为我看的是个理由吧

146
00:10:31,295 --> 00:10:33,087
到了现在呢

147
00:10:34,111 --> 00:10:40,255
谁在家2.0开始它的标准库提供了这么多的tetris

148
00:10:42,559 --> 00:10:43,583
还有更多

149
00:10:44,607 --> 00:10:50,751
这个加起来我没有算过总有二30个吧可以问可以面对一个

150
00:10:51,007 --> 00:10:55,615
那行你可以通过这个trace这些统统都叫做它的锤子

151
00:10:56,127 --> 00:10:58,687
去问说这么多的答案出来

152
00:11:00,223 --> 00:11:02,783
你可以问这个太不是一个对吧

153
00:11:03,807 --> 00:11:05,087
他是一个Class吗

154
00:11:05,855 --> 00:11:08,159
还是说他是一个Innovation

155
00:11:09,183 --> 00:11:11,743
它其实是一个方形

156
00:11:12,511 --> 00:11:14,047
不是整数吗

157
00:11:14,303 --> 00:11:20,191
它是指针吗它是优点吗它是void吗它是算术型的

158
00:11:20,703 --> 00:11:21,983
还是复杂性的

159
00:11:22,239 --> 00:11:24,799
还是基本类型还是成员指针

160
00:11:25,055 --> 00:11:28,127
等等等等等

161
00:11:28,383 --> 00:11:29,663
他是抽象的吗

162
00:11:29,919 --> 00:11:36,063
还有没有他是个constant比如说你现在是有一个类型的const int

163
00:11:37,855 --> 00:11:41,439
这样传进去我们等一下来吃饭怎么用

164
00:11:41,951 --> 00:11:45,791
萃取剂吗放进去它就会告诉你

165
00:11:47,583 --> 00:11:53,727
他是不是他是不是pod2g在刚也出现过这里就是

166
00:11:53,983 --> 00:11:58,079
要的是什么就是就是一种平淡的

167
00:11:58,335 --> 00:12:03,967
平淡如水的很平常的一种旧的格式怎么是就格式呢

168
00:12:04,991 --> 00:12:07,039
这是C那个structure

169
00:12:08,319 --> 00:12:09,599
就是低头没有放血

170
00:12:09,855 --> 00:12:12,415
只有对他这种教授的

171
00:12:14,719 --> 00:12:15,743
返回到这里来

172
00:12:15,999 --> 00:12:18,303
虽有这么多的问题

173
00:12:19,327 --> 00:12:20,351
下一页

174
00:12:21,119 --> 00:12:21,887
说

175
00:12:22,143 --> 00:12:24,447
我这边去再问谁了

176
00:12:24,959 --> 00:12:26,495
重不重要这个事情

177
00:12:28,031 --> 00:12:31,615
我们看到刚刚在早早期班的209班

178
00:12:31,871 --> 00:12:33,663
2.9版出现了这些

179
00:12:33,919 --> 00:12:39,039
那个清白是不是有对应的东西它在问谁给我的这些

180
00:12:39,295 --> 00:12:42,879
就是那几个特殊函数了拷贝构造可被赋值给够

181
00:12:43,391 --> 00:12:44,159
等等

182
00:12:44,671 --> 00:12:47,743
我来看新版有没有对应的东西

183
00:12:48,767 --> 00:12:51,583
这个叫我得看一下

184
00:12:53,631 --> 00:12:56,191
这个叫

185
00:12:56,703 --> 00:13:00,287
我要找到有trivial的蝎子

186
00:13:02,335 --> 00:13:03,871
我来看看

187
00:13:04,383 --> 00:13:08,735
Is trivially default constructor constructible

188
00:13:09,247 --> 00:13:10,015
这个就是

189
00:13:10,271 --> 00:13:15,903
给虎婴儿明明子不太一样但是可以呼应到前面的早期的版本

190
00:13:18,207 --> 00:13:22,047
Eztravel copy constructible constructible

191
00:13:22,815 --> 00:13:23,583
这些都是

192
00:13:24,351 --> 00:13:25,887
好好体会一下这些字眼

193
00:13:26,655 --> 00:13:28,703
所以

194
00:13:29,215 --> 00:13:31,775
我们会现在回到这个线程来就是

195
00:13:34,079 --> 00:13:35,615
新的版本

196
00:13:36,127 --> 00:13:40,479
Petrus变的更庞大能够问出能够

197
00:13:40,991 --> 00:13:45,087
让你去问他儿他能够回答这么多的问题

198
00:13:48,927 --> 00:13:49,951
更棒的是

199
00:13:51,487 --> 00:13:53,535
他不需要你

200
00:14:27,839 --> 00:14:29,119
这个太神奇了

201
00:14:31,167 --> 00:14:32,959
我们来看看它是怎么做的

202
00:14:34,495 --> 00:14:35,775
但是先看怎么用

203
00:14:36,799 --> 00:14:40,639
我写了一个测试程序也会拿到

204
00:14:42,175 --> 00:14:45,503
我设计了一个方形叫做testresult

205
00:14:46,015 --> 00:14:47,039
随便取的名字

206
00:14:48,319 --> 00:14:50,111
接受任意的东西

207
00:14:51,135 --> 00:14:51,647
X

208
00:14:52,927 --> 00:14:53,951
孩子是什么

209
00:14:54,719 --> 00:14:55,743
是一个模

210
00:14:56,255 --> 00:14:59,327
随时可以是任意东西是几

211
00:14:59,583 --> 00:15:03,679
第4个模板参数所以你穿什么东西去给他都可以

212
00:15:04,447 --> 00:15:06,239
传进去之后

213
00:15:06,495 --> 00:15:07,775
我就把刚刚

214
00:15:08,287 --> 00:15:13,919
看到的那么多他的trace Pro用一次怎么用了就这样子调用啊

215
00:15:14,175 --> 00:15:16,223
比如说我现在看IS void

216
00:15:16,735 --> 00:15:18,015
是boy的吗

217
00:15:18,527 --> 00:15:23,647
我把这个体现在传一个东西进去那他的太不是听了这个屁

218
00:15:23,903 --> 00:15:30,047
有道说这就是一个锤子我们讲是有30个垂直的其中之一有进去游进去之后

219
00:15:30,303 --> 00:15:32,351
它有一个它的地方叫Mary

220
00:15:32,607 --> 00:15:34,655
这个就是回答真假

221
00:15:35,167 --> 00:15:37,983
所以这边印出来要不就是你

222
00:15:38,751 --> 00:15:39,775
真会讲

223
00:15:40,543 --> 00:15:46,175
就把这么多的东东都用一次这里应该我应该写点点点要是更多

224
00:15:46,943 --> 00:15:49,247
你手上的程序将会

225
00:15:49,503 --> 00:15:50,271
更多

226
00:15:52,063 --> 00:15:53,855
这是使用的方式

227
00:15:57,183 --> 00:16:03,327
我就试了一些东西丢进去一些一些一些我们可能而受

228
00:16:03,583 --> 00:16:05,119
熟能详的东西看到他

229
00:16:05,631 --> 00:16:07,167
输出的结果

230
00:16:07,423 --> 00:16:09,983
是不是如我们的预期

231
00:16:12,543 --> 00:16:14,591
我丢了一个string进去

232
00:16:14,847 --> 00:16:17,151
AcFun

233
00:16:20,223 --> 00:16:24,575
丢进去的用法就像这样刚刚在那个函数叫这个名字吗

234
00:16:24,831 --> 00:16:26,111
Participant

235
00:16:26,879 --> 00:16:29,183
在我现在就丢了一个服务

236
00:16:30,207 --> 00:16:31,487
临时对象天气

237
00:16:32,767 --> 00:16:36,863
那么下一页那我丢一个固定式对象

238
00:16:37,119 --> 00:16:40,703
在下一页我就这样的临时对象

239
00:16:41,727 --> 00:16:47,871
这是用法退回到上面来回到上面再回到上面这个我现在有一个stream

240
00:16:48,639 --> 00:16:51,455
有一个瞬间去输出结果在这边

241
00:16:53,503 --> 00:16:55,551
所有的这些我都用过一次了

242
00:16:57,855 --> 00:17:00,159
有没有值得看的地方呢

243
00:17:01,183 --> 00:17:04,511
蓝色的部分是我想引导你看的

244
00:17:06,303 --> 00:17:08,351
这个输出之前

245
00:17:08,607 --> 00:17:09,631
我还会去

246
00:17:10,655 --> 00:17:14,495
找到我还会用菜party

247
00:17:14,751 --> 00:17:20,895
这个功能这个功能之前我们也讲过也用过太拍的去得到到底丢

248
00:17:21,151 --> 00:17:22,943
不进来的这个东西它

249
00:17:23,199 --> 00:17:25,503
类型名称

250
00:17:26,783 --> 00:17:27,551
这个是

251
00:17:29,087 --> 00:17:33,439
吓一跳这个字符串的名字竟然叫XX

252
00:17:34,463 --> 00:17:37,023
把内部的定义

253
00:17:38,047 --> 00:17:39,327
他就这么叫

254
00:17:39,839 --> 00:17:45,983
好这里的输出那我注意到Class这是一个Class吗

255
00:17:46,239 --> 00:17:46,751
出

256
00:17:47,263 --> 00:17:49,055
一切都是催这个class

257
00:17:51,103 --> 00:17:54,943
下面还有什么呢is standard

258
00:17:55,711 --> 00:17:56,735
也是处

259
00:17:57,247 --> 00:17:59,039
那什么是standard

260
00:18:00,319 --> 00:18:01,343
我也不知道

261
00:18:01,855 --> 00:18:03,647
怎么去查规格书

262
00:18:05,951 --> 00:18:08,767
好这个灯灯等他输出结果在这里

263
00:18:10,047 --> 00:18:11,583
你可以

264
00:18:12,351 --> 00:18:13,631
停下来

265
00:18:13,887 --> 00:18:20,031
或者你自己去让这个程序或者让他程序并且改写他丢入更多你的一些

266
00:18:20,287 --> 00:18:26,431
泰国看看输出结果来验证它的输出对不对或者你对你的这个幽静

267
00:18:26,687 --> 00:18:28,223
先去的类型认识的

268
00:18:28,479 --> 00:18:31,039
不透彻可以看那个输出结果

269
00:18:34,623 --> 00:18:36,159
我还关心一点

270
00:18:37,439 --> 00:18:39,231
他有没有virtual

271
00:18:39,999 --> 00:18:40,767
Aastock

272
00:18:42,815 --> 00:18:47,167
有没有virtual虚析构函数

273
00:18:48,191 --> 00:18:52,287
一个类到底要不要写

274
00:18:53,055 --> 00:18:59,199
好我们一个这里涵盖了一些问题我们一个解决一个类一句不需要写信

275
00:18:59,455 --> 00:18:59,967
一个函数

276
00:19:03,295 --> 00:19:05,855
只要他带着指针你就一定要请

277
00:19:07,135 --> 00:19:10,207
他不带指针的话多半你不必洗

278
00:19:12,255 --> 00:19:16,351
字符串里头就是大的一根是什

279
00:19:17,631 --> 00:19:21,471
所以他应该要有析构函数要写出来

280
00:19:21,727 --> 00:19:24,543
这个是我找出来还是元代吗

281
00:19:25,055 --> 00:19:28,895
析构函数在哪里呢这些都是一些片段

282
00:19:29,151 --> 00:19:29,919
片段

283
00:19:30,175 --> 00:19:32,991
好几个函数在在

284
00:19:35,295 --> 00:19:37,343
一个函数j

285
00:19:39,391 --> 00:19:42,207
这个是你所使用的是谁

286
00:19:42,463 --> 00:19:44,255
其实是一个打比方

287
00:19:46,047 --> 00:19:47,583
看看你指定的

288
00:19:48,095 --> 00:19:48,863
Maker

289
00:19:50,399 --> 00:19:56,543
也不是看你指定当你使用尿的时候他已经开放的其实是调用css3这里吗

290
00:19:56,799 --> 00:20:02,943
一个参数是一个character一个字符ascii的字符所以你使用

291
00:20:03,199 --> 00:20:04,735
其实在使用

292
00:20:04,991 --> 00:20:05,759
哈

293
00:20:06,015 --> 00:20:07,807
Fxstreet在这里

294
00:20:08,575 --> 00:20:09,599
S63

295
00:20:11,391 --> 00:20:13,439
它的析构函数在

296
00:20:16,255 --> 00:20:17,791
546号

297
00:20:18,815 --> 00:20:20,351
说它是有其关注的

298
00:20:21,375 --> 00:20:24,703
这个析构函数是不是就是不是虚函数呢

299
00:20:26,239 --> 00:20:28,799
以我们最后的理解

300
00:20:31,359 --> 00:20:32,639
一个class

301
00:20:33,663 --> 00:20:39,551
准把他自己准备当一个base Class的时候才需要写

302
00:20:40,319 --> 00:20:42,367
Virtual assistant

303
00:20:43,647 --> 00:20:47,487
如果他根本不打算被当成废纸

304
00:20:48,767 --> 00:20:49,279
腹内

305
00:20:50,815 --> 00:20:52,863
那他就不必写要求

306
00:20:53,119 --> 00:20:53,887
District

307
00:20:55,167 --> 00:21:01,055
这是我们对在oo上面的理解是要面向对象的相对相较而言

308
00:21:04,383 --> 00:21:10,015
因此我们来想想看字符串你会可能把它拿来当副那吗

309
00:21:11,551 --> 00:21:12,063
不会

310
00:21:12,575 --> 00:21:13,343
不会

311
00:21:13,855 --> 00:21:20,000
世上有一些专家经验啊像有一本书在那里面就提到你不该

312
00:21:20,256 --> 00:21:26,400
把这个字符串当成一个服务那你自己在派生一个此类出来而不该如此

313
00:21:26,656 --> 00:21:32,800
他帮助设计就不打算让你这么用因此它就没有virtual disorder对

314
00:21:33,056 --> 00:21:36,640
他有他的但是他不是不是

315
00:21:38,688 --> 00:21:44,064
好我们对它的理解是这样并且看源代码也是这样然后来看看这里的输出结果

316
00:21:44,832 --> 00:21:46,880
你有复仇destructive吗

317
00:21:48,672 --> 00:21:50,720
这个太不出一直没打算停

318
00:21:51,488 --> 00:21:52,512
要是没有

319
00:21:53,280 --> 00:21:55,072
这太厉害了吧

320
00:21:56,096 --> 00:22:00,960
这个锤子怎么能够知道它这个里头是这样设计就太厉害了吧

321
00:22:04,032 --> 00:22:05,056
再往下看

322
00:22:06,080 --> 00:22:08,384
现在我自己来写一个富

323
00:22:08,896 --> 00:22:10,432
我丢到这一个方向

324
00:22:10,944 --> 00:22:12,736
刚刚有出现这个函数

325
00:22:13,504 --> 00:22:15,808
这个就是前面再看一眼这个

326
00:22:18,112 --> 00:22:20,416
好我这次丢父

327
00:22:20,672 --> 00:22:23,744
我这个负的设计是他只有很单纯的

328
00:22:24,000 --> 00:22:24,768
资料

329
00:22:25,280 --> 00:22:27,840
他们有寒没有成员函数

330
00:22:29,632 --> 00:22:32,448
我刚刚介绍过一个关于一个字眼就披露的

331
00:22:32,960 --> 00:22:35,776
Field data有很平淡的

332
00:22:37,568 --> 00:22:39,104
平淡无奇的一种

333
00:22:39,360 --> 00:22:40,896
就是资料

334
00:22:41,920 --> 00:22:48,064
这个虽然是个Class就是就等同于是以前期的市场就因为这里没有啊

335
00:22:48,320 --> 00:22:48,832
方式

336
00:22:50,112 --> 00:22:52,416
所以应该可以预期

337
00:22:52,928 --> 00:22:56,768
把它丢进去之后输出来的呢

338
00:22:57,024 --> 00:22:59,584
这个SQL的支持

339
00:23:00,608 --> 00:23:01,120
没错

340
00:23:01,376 --> 00:23:02,400
这次五次

341
00:23:03,680 --> 00:23:05,472
那刚刚上一页这个

342
00:23:05,728 --> 00:23:06,752
字符串

343
00:23:07,008 --> 00:23:08,544
Experian

344
00:23:08,800 --> 00:23:09,824
Force

345
00:23:10,592 --> 00:23:11,872
他不是PLC

346
00:23:12,128 --> 00:23:15,200
这都符合我们的理解

347
00:23:16,480 --> 00:23:17,760
我们再来看看

348
00:23:18,016 --> 00:23:20,832
其他这些东西他是不是class

349
00:23:21,088 --> 00:23:21,856
是的

350
00:23:24,160 --> 00:23:27,232
他有没有verticutter没有

351
00:23:27,744 --> 00:23:30,816
你看左手边就是源代码没有

352
00:23:33,120 --> 00:23:39,264
它可以被咖啡尔赛马可以被幕府这边出现一些莫夫这个字后面也

353
00:23:39,520 --> 00:23:45,664
没有出现木木有些字幕府是10再加2.0的一个起一个

354
00:23:45,920 --> 00:23:50,016
一个新的功能哦后面会提到它好

355
00:23:50,784 --> 00:23:51,808
所以

356
00:23:52,064 --> 00:23:55,136
你可以停车下来看看这些输出结果

357
00:24:01,536 --> 00:24:07,680
你看这边再问说你有这些你的这些特殊函数考虑多少拷贝复制

358
00:24:07,936 --> 00:24:10,496
能等析构函数中不重要啊

359
00:24:11,008 --> 00:24:12,032
是

360
00:24:12,288 --> 00:24:14,336
是不重要的吗

361
00:24:15,104 --> 00:24:18,944
问题问得很特别是不重要的吗

362
00:24:19,200 --> 00:24:20,224
答案都是真

363
00:24:21,504 --> 00:24:26,112
做事都不重要的确这个地方根本没有那些好处

364
00:24:31,744 --> 00:24:33,024
我们再往下

365
00:24:33,792 --> 00:24:35,072
现在我设计一个固

366
00:24:36,096 --> 00:24:39,168
我就是放上了一个virtual assistant

367
00:24:39,936 --> 00:24:42,240
嘘的析构函数

368
00:24:43,264 --> 00:24:45,824
我刻意的来看一看他的回答

369
00:24:46,848 --> 00:24:48,640
这个地方有出现了

370
00:24:48,896 --> 00:24:51,456
Hospital destructive S1

371
00:24:52,224 --> 00:24:52,736
要

372
00:24:53,760 --> 00:24:54,528
非常好

373
00:24:55,808 --> 00:24:58,624
他实在太厉害了不知道他怎么做的

374
00:24:59,392 --> 00:25:00,672
你看我都没有

375
00:25:01,184 --> 00:25:05,280
另外写什么什么篇策划什么特化版本都没有啊

376
00:25:07,584 --> 00:25:09,120
炮仔声

377
00:25:10,144 --> 00:25:14,752
Is polymorphic polymorphic就是多态

378
00:25:15,776 --> 00:25:18,336
什么叫做polymorphic

379
00:25:20,640 --> 00:25:22,688
Polymorphic class

380
00:25:23,968 --> 00:25:30,112
Is a Class是一种识别+他有声明或者他有继承

381
00:25:30,368 --> 00:25:31,904
成一个万种方式

382
00:25:32,928 --> 00:25:34,464
这个叫polymorphic

383
00:25:35,232 --> 00:25:36,512
现在这个函数

384
00:25:36,768 --> 00:25:39,328
他有没有波球放学那有啊这个

385
00:25:41,376 --> 00:25:44,192
所以他的意思无非就是一

386
00:25:44,704 --> 00:25:45,472
球

387
00:25:47,264 --> 00:25:48,544
上页

388
00:25:49,056 --> 00:25:49,824
这个服

389
00:25:50,336 --> 00:25:51,360
他没有啊

390
00:25:51,872 --> 00:25:54,688
所以polymorphic Siri

391
00:25:55,712 --> 00:25:56,480
非常好

392
00:25:58,272 --> 00:26:00,064
更上也就是字符串

393
00:26:00,576 --> 00:26:03,136
字符串有没有虚函数呢

394
00:26:04,672 --> 00:26:06,720
那就回到我们对OPPO的理解了

395
00:26:08,000 --> 00:26:09,280
一个类

396
00:26:09,536 --> 00:26:14,656
他要准备搭配当成负累的时候他才需要去函数

397
00:26:15,680 --> 00:26:21,824
Stream从来没有打算被当成父那当然了你把它拿来当服那他是不能拒绝

398
00:26:22,080 --> 00:26:22,592
觉得

399
00:26:22,848 --> 00:26:25,408
在Java里面有一些关键字可以

400
00:26:26,176 --> 00:26:26,688
拒绝

401
00:26:26,944 --> 00:26:28,480
24加9

402
00:26:29,248 --> 00:26:30,016
所以

403
00:26:30,784 --> 00:26:35,392
不过他自己的设计就不准备这样所以他们没有要求去

404
00:26:35,648 --> 00:26:37,696
那我们来看一下

405
00:26:37,952 --> 00:26:38,720
片段

406
00:26:38,976 --> 00:26:40,768
Is polymorphic

407
00:26:42,816 --> 00:26:43,328
非常好

408
00:26:47,424 --> 00:26:50,240
再往下看刚刚已经进行到固了

409
00:26:53,056 --> 00:26:54,080
下一个呢

410
00:26:54,336 --> 00:26:55,360
复入

411
00:26:58,688 --> 00:26:59,968
M

412
00:27:00,992 --> 00:27:02,784
不会用红色的地方

413
00:27:04,320 --> 00:27:05,344
去区分出

414
00:27:06,368 --> 00:27:08,160
现在我现在记得这个类

415
00:27:08,928 --> 00:27:09,952
一些特性

416
00:27:10,208 --> 00:27:12,512
我要来观察右边的输出结果

417
00:27:14,304 --> 00:27:15,840
这里出现这种

418
00:27:16,096 --> 00:27:21,984
这个优势是一家家2.0的一个新的语法这个关系到木府

419
00:27:22,752 --> 00:27:23,264
Move

420
00:27:23,520 --> 00:27:27,104
木府是对应于copy我们有拷贝构造

421
00:27:27,360 --> 00:27:28,640
我们要拷贝复制

422
00:27:29,408 --> 00:27:31,200
现在有个新东西叫做

423
00:27:32,224 --> 00:27:34,784
翻译构造跟翻译复制

424
00:27:35,552 --> 00:27:38,112
相对好

425
00:27:38,880 --> 00:27:45,024
这个语法的部分我们不讲太多现在只告诉你这与法的部分我会在cplusplus

426
00:27:45,280 --> 00:27:46,560
2.0岁门课程

427
00:27:46,816 --> 00:27:50,144
2011这个课程再聚

428
00:27:50,400 --> 00:27:53,728
详细的提这些新的语法

429
00:27:55,264 --> 00:27:58,336
这里只是告诉你说这一个

430
00:27:58,592 --> 00:27:59,360
Class

431
00:27:59,616 --> 00:28:01,664
他写出了什么东西

432
00:28:02,176 --> 00:28:03,968
这一个是构造函数

433
00:28:04,480 --> 00:28:05,760
去确认一下

434
00:28:07,552 --> 00:28:09,856
这个是拷贝构造

435
00:28:11,392 --> 00:28:12,928
但是把美丽的调

436
00:28:13,696 --> 00:28:17,024
这又是2.0谢谢然后点的新语法不要

437
00:28:17,536 --> 00:28:19,328
写出来但是说不要

438
00:28:20,608 --> 00:28:22,144
因为如果没有这么写的话

439
00:28:22,656 --> 00:28:24,704
兵器会给你默认的一个

440
00:28:24,960 --> 00:28:26,496
现在说不一样

441
00:28:27,776 --> 00:28:28,544
这个呢

442
00:28:28,800 --> 00:28:29,568
这个叫做

443
00:28:31,616 --> 00:28:37,760
Postconstruct的构造要翻成中文的话

444
00:28:39,808 --> 00:28:45,184
要我解释就是要编译器给我一个默认的版本

445
00:28:45,440 --> 00:28:47,744
这个上面是不要下面是医药

446
00:28:48,512 --> 00:28:49,280
再来呢

447
00:28:49,536 --> 00:28:51,584
这个叫个拷贝复制

448
00:28:53,120 --> 00:28:53,632
我要

449
00:28:54,400 --> 00:28:55,936
而且是默认的那个

450
00:28:58,240 --> 00:29:04,384
其实你不写的话就没人就会给你一个不写汉血了一直给B4

451
00:29:04,896 --> 00:29:06,176
怎样的意思

452
00:29:07,712 --> 00:29:08,480
下面这个呢

453
00:29:08,992 --> 00:29:10,528
这个觉悟

454
00:29:11,040 --> 00:29:14,624
Assignment operator翻译复制

455
00:29:15,904 --> 00:29:16,416
这个

456
00:29:16,672 --> 00:29:18,208
这个不要

457
00:29:19,744 --> 00:29:21,536
整理一下啊就是

458
00:29:22,048 --> 00:29:25,120
拷贝这父子更好的

459
00:29:25,632 --> 00:29:31,264
这里以下有所为拷贝不只有所谓拷贝构造就是以前大家很熟悉的意思

460
00:29:32,032 --> 00:29:34,336
相对自由

461
00:29:34,592 --> 00:29:38,944
父子跟翻译构造就是另外一组总共是感触

462
00:29:39,968 --> 00:29:42,528
这是个还是社会关系到一些

463
00:29:42,784 --> 00:29:45,600
一些重要的行为模式

464
00:29:46,112 --> 00:29:47,392
所以

465
00:29:50,208 --> 00:29:51,744
这个萃取机

466
00:29:52,768 --> 00:29:58,144
我们希望能够用萃取机器知道到底有没有这四个数

467
00:29:58,656 --> 00:30:01,984
现在我给他这个例子说这个

468
00:30:02,240 --> 00:30:03,008
我要

469
00:30:03,264 --> 00:30:04,288
这个药

470
00:30:04,544 --> 00:30:05,312
这个药

471
00:30:05,568 --> 00:30:08,640
这个不要四个里面有两个要有两个比较

472
00:30:09,920 --> 00:30:12,992
我来看看这个萃取基有这么厉害吗

473
00:30:14,272 --> 00:30:16,320
他能够知道我的这些事情

474
00:30:19,904 --> 00:30:25,792
这个要看哪里呢这个一下子我也得看一下我们这边听的几秒钟我来看看

475
00:30:28,864 --> 00:30:29,888
应该就是我

476
00:30:30,400 --> 00:30:35,008
准备课的时候已经弄好了蓝色的这1部分吧

477
00:30:35,520 --> 00:30:36,288
我们来看一下

478
00:30:38,848 --> 00:30:40,896
有没有拨destruct

479
00:30:41,408 --> 00:30:41,920
有吗

480
00:30:43,712 --> 00:30:44,992
所以支持

481
00:30:47,296 --> 00:30:49,600
有没有default constructor

482
00:30:50,880 --> 00:30:53,440
你是的first contractible

483
00:30:53,952 --> 00:30:54,464
哇

484
00:30:54,720 --> 00:30:56,768
也就是你有没有default

485
00:30:59,840 --> 00:31:01,120
这里有地方可以说的吗

486
00:31:02,912 --> 00:31:04,192
默认构造函数

487
00:31:06,240 --> 00:31:08,544
没有这里有一个构造函数

488
00:31:10,592 --> 00:31:14,176
既然你写的一个构造函数编译器就不会再给你

489
00:31:14,688 --> 00:31:15,968
默认构造函数

490
00:31:17,760 --> 00:31:23,904
你也可以自己写一个默认构造函数但是现在都不是这样啊现在你有一个在函数坍塌

491
00:31:24,160 --> 00:31:25,440
不是默认的那个

492
00:31:27,232 --> 00:31:28,000
所以

493
00:31:28,256 --> 00:31:29,024
这里是哪里

494
00:31:29,792 --> 00:31:30,304
非常好

495
00:31:32,352 --> 00:31:35,168
你有拷贝构造函数吗

496
00:31:35,424 --> 00:31:41,312
你是可以拷贝构造吗也就是你有没有拷贝构造函数的意思拷贝构造

497
00:31:41,824 --> 00:31:42,592
拷贝构造

498
00:31:42,848 --> 00:31:43,360
看一下

499
00:31:45,920 --> 00:31:47,712
这个就是拷贝构造函数

500
00:31:50,016 --> 00:31:51,808
写出来的但是别的投票

501
00:31:52,576 --> 00:31:53,856
在他们没有

502
00:31:54,112 --> 00:31:56,672
没有对这里的回答的是0

503
00:31:57,440 --> 00:31:58,720
哇太厉害了

504
00:32:01,024 --> 00:32:02,304
你有

505
00:32:03,328 --> 00:32:04,864
翻译构造函数吗

506
00:32:09,472 --> 00:32:11,520
这个就是木头做的

507
00:32:12,800 --> 00:32:18,176
设置是2.0的新语法你可能不熟悉这个就是说的

508
00:32:18,688 --> 00:32:19,712
他有

509
00:32:20,736 --> 00:32:21,504
哎哟

510
00:32:22,784 --> 00:32:26,880
这是你的敌人的获得不要看错了他是有的

511
00:32:27,904 --> 00:32:28,672
所以

512
00:32:29,696 --> 00:32:30,720
Workshop

513
00:32:36,352 --> 00:32:37,888
咖啡assignment

514
00:32:38,144 --> 00:32:39,424
拷贝复制

515
00:32:40,192 --> 00:32:41,984
这一个就是拷贝无子

516
00:32:44,288 --> 00:32:46,080
他那有

517
00:32:48,128 --> 00:32:49,664
默认的版本有

518
00:32:50,432 --> 00:32:51,200
所以这边

519
00:32:51,968 --> 00:32:52,480
11

520
00:32:52,992 --> 00:32:54,528
现在讲的是对

521
00:32:55,040 --> 00:32:56,576
拷贝复制

522
00:32:57,856 --> 00:32:59,136
翻译父子

523
00:33:00,160 --> 00:33:00,928
巴里父子

524
00:33:07,072 --> 00:33:12,960
我虽然写出来了但是我把他给了所以他就没有他没有的话这边的回答应该是礼

525
00:33:13,216 --> 00:33:14,240
没错这里

526
00:33:15,264 --> 00:33:21,408
哇太厉害了这个萃取其病人竟然能够知道你写的一个含一个raid

527
00:33:21,664 --> 00:33:23,200
你的头的一些细节

528
00:33:27,296 --> 00:33:29,088
我最需要做了一些测试

529
00:33:30,624 --> 00:33:31,392
我们来看看

530
00:33:32,160 --> 00:33:35,488
我要放进去这就是刚刚的那个我写的那个车是怎么去

531
00:33:36,000 --> 00:33:36,768
函数

532
00:33:37,024 --> 00:33:38,560
我放的是负数

533
00:33:38,816 --> 00:33:41,120
我说十部曲不都是肉体

534
00:33:41,632 --> 00:33:44,192
好我去测试输出结果是这样

535
00:33:46,752 --> 00:33:48,032
这里要注意的就是

536
00:33:48,288 --> 00:33:49,568
我前面讲过了

537
00:33:50,592 --> 00:33:51,872
提醒过大家

538
00:33:52,384 --> 00:33:56,992
一个负数他是没有指针的因此它根本不用写

539
00:33:57,248 --> 00:33:58,528
析构函数

540
00:34:01,088 --> 00:34:02,112
右手边

541
00:34:04,160 --> 00:34:07,744
你的析构函数是纯为了吗

542
00:34:08,256 --> 00:34:10,048
是不重要的吗

543
00:34:10,816 --> 00:34:11,328
喂

544
00:34:12,608 --> 00:34:15,936
左手边这一个啊我虽然没有让你看它的源代码

545
00:34:17,728 --> 00:34:21,056
但根据我们的理解我可以告诉我们对这种

546
00:34:21,312 --> 00:34:27,456
类的性质的理解不用看源代码纯粹去推想负数只有

547
00:34:27,712 --> 00:34:28,480
实部虚部

548
00:34:29,248 --> 00:34:32,064
所以它不用解析构函数

549
00:34:32,576 --> 00:34:37,440
他不用解析构函数但是编译器会给它默认的一个

550
00:34:37,696 --> 00:34:38,720
说他是有

551
00:34:40,000 --> 00:34:42,304
可是那一个那你重要

552
00:34:43,072 --> 00:34:44,864
那个里头什么都没做

553
00:34:46,144 --> 00:34:47,424
所以这边的

554
00:34:47,936 --> 00:34:49,216
翻译各种药吗

555
00:34:49,984 --> 00:34:51,776
是不是不重要啊

556
00:34:52,032 --> 00:34:52,800
是

557
00:34:53,568 --> 00:34:54,592
一切不重要

558
00:34:57,920 --> 00:35:02,528
再回到你手上会有这个讲一你回到前几天看前几页看看

559
00:35:03,552 --> 00:35:04,576
这个

560
00:35:04,832 --> 00:35:07,392
Trivia destructive我现在回头去看看

561
00:35:08,416 --> 00:35:12,768
你看水表destruct是重要的

562
00:35:13,280 --> 00:35:15,584
他来了前面这些都重要

563
00:35:15,840 --> 00:35:20,192
有些不重要的中药你可以去理解现在回到这里来住宿

564
00:35:22,240 --> 00:35:27,360
下一个例子那我用了勇气去试试看

565
00:35:28,384 --> 00:35:30,176
啊我这边就不解释了

566
00:35:30,432 --> 00:35:36,320
可以根据你对容器的理解去看看这里的一个萃取剂萃取出来的结果

567
00:35:40,160 --> 00:35:42,464
这里就是我们对于

568
00:35:43,232 --> 00:35:44,512
Trace

569
00:35:45,280 --> 00:35:49,120
应用好几个例子

570
00:35:49,376 --> 00:35:51,680
接下来那我就要来谈

571
00:35:51,936 --> 00:35:56,544
这个锤子是怎么做的怎么那么厉害

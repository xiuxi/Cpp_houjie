1
00:00:00,256 --> 00:00:06,400
现在我要补充两个

2
00:00:07,424 --> 00:00:08,448
很小的东西

3
00:00:10,752 --> 00:00:12,800
一个叫牛handler

4
00:00:15,360 --> 00:00:17,408
前面我们已经提过了这个

5
00:00:17,920 --> 00:00:19,456
这个名称

6
00:00:19,712 --> 00:00:20,480
你有handler

7
00:00:20,736 --> 00:00:22,016
我们来看一下

8
00:00:22,272 --> 00:00:23,552
去宿舍

9
00:00:23,808 --> 00:00:29,696
Contrast to没有能力为你分配出你所申请的memory

10
00:00:29,952 --> 00:00:33,536
它会抛出的异常的这个名字

11
00:00:35,584 --> 00:00:37,376
有一些比较老的版本呢

12
00:00:37,632 --> 00:00:40,960
不是抛出异常是return 0

13
00:00:41,472 --> 00:00:43,008
所以我们会养成习惯

14
00:00:43,520 --> 00:00:45,824
也应该要养成这个习惯

15
00:00:46,080 --> 00:00:50,176
你分配内存之后你总是要检查一下那个指针

16
00:00:50,432 --> 00:00:51,200
是不是零

17
00:00:52,992 --> 00:00:53,760
确认

18
00:00:54,016 --> 00:00:55,808
你后面的运用是对的

19
00:00:57,088 --> 00:00:58,880
现在这个有新旧版本

20
00:00:59,904 --> 00:01:04,512
失败的时候有的会抛出异常有的事林

21
00:01:06,048 --> 00:01:09,120
不过这边说你也可以让编译器一定

22
00:01:10,400 --> 00:01:12,448
而不是抛出异常

23
00:01:12,960 --> 00:01:13,984
那就这么做

24
00:01:14,496 --> 00:01:16,032
New的时候指明

25
00:01:16,288 --> 00:01:17,312
Nordstrom

26
00:01:18,592 --> 00:01:19,360
他也可以

27
00:01:20,128 --> 00:01:23,200
帮我我我也知道啊我也可以想象

28
00:01:24,736 --> 00:01:30,880
我们一般应用程序已经不太在乎什么你是抛出异常你还是每天凌还在

29
00:01:31,136 --> 00:01:34,464
强制压他蕾特凝而不抛出异常

30
00:01:36,000 --> 00:01:37,024
很多

31
00:01:37,280 --> 00:01:41,632
红有事上根本不检查这个成不成功他认为

32
00:01:42,400 --> 00:01:43,168
为什么呢

33
00:01:43,936 --> 00:01:44,960
反正多的要命

34
00:01:45,216 --> 00:01:51,360
我大概不会走到山穷水尽那一天都不去检查这个不是一个好现象

35
00:01:53,920 --> 00:01:55,712
另外也有一大堆

36
00:01:55,968 --> 00:01:57,760
一大部分的程序员是

37
00:01:58,528 --> 00:02:00,576
被一场根本不了解

38
00:02:00,832 --> 00:02:04,160
所以对他这边抛出异常了也不知道怎么处理

39
00:02:05,440 --> 00:02:09,024
一场是另外一个话题的我有另外一门课程还一场

40
00:02:09,280 --> 00:02:10,304
这里不管了

41
00:02:11,328 --> 00:02:14,144
重要的是现在要补充的重要的事情是

42
00:02:15,424 --> 00:02:19,776
新家家平台会在抛出异常之前

43
00:02:20,032 --> 00:02:23,360
这个异常大的OK这个异常之前呢

44
00:02:23,872 --> 00:02:26,176
抛出去就OK回收了这个

45
00:02:26,432 --> 00:02:30,528
不是能瘦了他出去之前他会先

46
00:02:30,784 --> 00:02:31,552
调用

47
00:02:32,064 --> 00:02:33,088
某一个函数

48
00:02:33,344 --> 00:02:35,904
而且是不止一次的调用

49
00:02:36,928 --> 00:02:42,560
什么函数呢有你设定的还是你通过这个方式把它塞进去

50
00:02:44,096 --> 00:02:47,424
你的函数要长什么样子呢长这种样子

51
00:02:49,728 --> 00:02:50,752
他是一个

52
00:02:52,032 --> 00:02:53,568
返回值是boy

53
00:02:54,592 --> 00:02:56,640
参数那没有参数

54
00:02:56,896 --> 00:02:58,944
只要这种形式就可以

55
00:03:00,224 --> 00:03:04,064
说这边有一个他地方紫色的这个就是这种形式

56
00:03:04,320 --> 00:03:10,464
你只要写出一个像紫色这样的一种函数出来你就可以调用set

57
00:03:10,720 --> 00:03:12,256
把它塞进去

58
00:03:13,280 --> 00:03:14,816
吃好之后就不必管了

59
00:03:16,352 --> 00:03:17,376
然后

60
00:03:17,632 --> 00:03:21,984
只要抛出异常之前都一定会调用

61
00:03:22,240 --> 00:03:23,264
你的这个函数

62
00:03:24,800 --> 00:03:28,128
最新建的平台这样的设计是为了

63
00:03:28,640 --> 00:03:29,920
给你一个机会

64
00:03:30,432 --> 00:03:33,248
因为一旦内存不足整个

65
00:03:33,504 --> 00:03:34,784
软件也

66
00:03:35,296 --> 00:03:36,576
也不能运作

67
00:03:37,088 --> 00:03:40,416
所以他借这个机会来通知你

68
00:03:40,928 --> 00:03:44,768
也就是调用你的这个函数由你来决定该怎么办

69
00:03:46,816 --> 00:03:49,120
并且它会比赛的通知

70
00:03:49,632 --> 00:03:51,424
这个事情我们前面看过

71
00:03:52,448 --> 00:03:53,216
哼

72
00:03:53,472 --> 00:03:58,080
非常全面之前我就已经给各位看了在Win10下

73
00:03:58,848 --> 00:04:00,896
Operator new的源代码

74
00:04:01,152 --> 00:04:04,992
这里面就有一个while loop不断的在调用没了

75
00:04:06,784 --> 00:04:08,320
所以当

76
00:04:09,344 --> 00:04:13,952
不管什么形式用6的形式用operator new的刑事罪

77
00:04:14,208 --> 00:04:15,744
终于爬到这里来

78
00:04:16,768 --> 00:04:18,047
一旦这个失败

79
00:04:19,839 --> 00:04:21,375
他这边的说法就是要

80
00:04:22,399 --> 00:04:24,959
这边的说法就是要抛出异常了

81
00:04:25,727 --> 00:04:26,495
暗示

82
00:04:26,751 --> 00:04:28,799
会调用一次你的这个函数

83
00:04:30,079 --> 00:04:31,359
人玩的时候

84
00:04:32,127 --> 00:04:32,639
这边

85
00:04:33,407 --> 00:04:36,735
这个东西在Pony为其危机比较在考虑回去

86
00:04:37,759 --> 00:04:41,087
顾名思义那就是调用优先的了

87
00:04:42,623 --> 00:04:45,439
调用网的有回来再分配一次

88
00:04:45,951 --> 00:04:50,815
说他的意思就是他让你去看看你有没有意思吗我就

89
00:04:51,071 --> 00:04:51,839
措辞

90
00:04:53,375 --> 00:04:56,703
然后他再调用一次说不定这一次就成功了

91
00:04:58,751 --> 00:05:02,847
所以一个妞涵得了该做什么事情呢

92
00:05:04,639 --> 00:05:09,247
我看过一些书籍里面会谈到无量事情但我认为

93
00:05:10,015 --> 00:05:12,831
真正有用的只有两件事情

94
00:05:13,599 --> 00:05:16,671
一件事情就是让更多的内存可用

95
00:05:18,975 --> 00:05:23,839
既然会调用到你这个函数来就表示已经山穷水尽

96
00:05:24,095 --> 00:05:25,887
没有内存可用了

97
00:05:26,143 --> 00:05:30,751
水泥怎么样让更多的内存可用呢现在已经40了

98
00:05:31,519 --> 00:05:33,055
不只是极小值了

99
00:05:34,847 --> 00:05:35,871
怎么样可用

100
00:05:36,127 --> 00:05:37,151
你就赶快去

101
00:05:37,407 --> 00:05:42,783
检查一下手边的内存的消耗量看看哪一些可以先释放掉

102
00:05:43,295 --> 00:05:46,111
不影响整个运作你就先去吃饭

103
00:05:46,367 --> 00:05:49,951
释放完了之后化名为曲

104
00:05:50,207 --> 00:05:55,327
Tell me你是饭碗的时候他会再分配一只看这一次会不会成功

105
00:05:56,863 --> 00:06:00,703
这就是cplusplus妞handle了这个平台的设计

106
00:06:03,263 --> 00:06:05,567
没有人能够教你你有很多了

107
00:06:05,823 --> 00:06:07,359
Little该做什么事

108
00:06:09,151 --> 00:06:12,223
只会教你这个聊天的形式

109
00:06:12,479 --> 00:06:14,271
长什么样子长这个样子

110
00:06:16,063 --> 00:06:19,647
进去之后的第1件事情有意义的就是这一个

111
00:06:20,415 --> 00:06:22,207
再要不就是abort

112
00:06:22,463 --> 00:06:23,743
你也没办法

113
00:06:24,767 --> 00:06:25,535
放弃吧

114
00:06:26,047 --> 00:06:27,327
播放器

115
00:06:27,839 --> 00:06:30,655
What time is it就是强迫让程序

116
00:06:30,911 --> 00:06:33,983
结束语但是也许在结束之前你要

117
00:06:34,239 --> 00:06:37,567
你要不要出一个信息告诉使用者等等等

118
00:06:38,335 --> 00:06:39,615
有那么一个机会

119
00:06:42,943 --> 00:06:46,783
我们来看看怎么我举一个例子写一个了

120
00:06:47,551 --> 00:06:49,087
这个就是我的灵魂的

121
00:06:50,367 --> 00:06:52,415
他必须为Tom Ford

122
00:06:52,671 --> 00:06:54,463
没有参数值

123
00:06:54,719 --> 00:06:55,487
这样就可以了

124
00:06:57,023 --> 00:06:59,839
我在这里头那我就先抛出一个

125
00:07:01,375 --> 00:07:04,191
先交出一个信息all of memory

126
00:07:04,447 --> 00:07:05,471
然后port

127
00:07:06,239 --> 00:07:09,311
那就不和我在商业这两个做法中的第2个

128
00:07:12,127 --> 00:07:15,199
好设计好这一个牛粪的之后

129
00:07:15,455 --> 00:07:18,527
在面里头我去调用它

130
00:07:19,295 --> 00:07:21,343
让这个函数把它塞进去

131
00:07:23,391 --> 00:07:29,535
你看到商业这一个设计这个大家标准库提供的

132
00:07:31,583 --> 00:07:34,911
你传进去给他他会传那个章怎么东西给你

133
00:07:35,679 --> 00:07:37,215
相等地位的东西

134
00:07:37,471 --> 00:07:43,615
这个设计是这样也许你心情已经放了一个牛排了就没有含着泪

135
00:07:43,871 --> 00:07:46,175
你现在要放牛handa了逼

136
00:07:46,431 --> 00:07:48,991
那你的放进去说AV

137
00:07:49,247 --> 00:07:50,271
返回来给你

138
00:07:51,295 --> 00:07:52,575
你可以登记起来

139
00:07:53,343 --> 00:07:55,391
设计是这个原因

140
00:07:56,415 --> 00:07:57,439
为了这个目的

141
00:07:58,719 --> 00:08:02,559
他回到这边来所以我就把它是吃了好了之后

142
00:08:03,583 --> 00:08:05,631
我叫动态的去分配内存

143
00:08:05,887 --> 00:08:07,679
准备很多这样够多了吧

144
00:08:08,447 --> 00:08:10,751
家要是不够多他就算再说三个零

145
00:08:12,799 --> 00:08:13,823
这样去试试看

146
00:08:14,847 --> 00:08:18,687
看你色的紫色的这一个

147
00:08:19,711 --> 00:08:20,223
会不会

148
00:08:20,991 --> 00:08:21,759
被调用

149
00:08:23,551 --> 00:08:25,599
这个set to handle

150
00:08:26,111 --> 00:08:30,719
我刚刚说是cplusplus其中的一个函数它的源代码

151
00:08:30,975 --> 00:08:32,767
在PCB下是长这样

152
00:08:34,047 --> 00:08:36,351
但这已经不是我们关注的重点了

153
00:08:36,863 --> 00:08:39,679
这是我让你看一看他们这样子去世

154
00:08:43,775 --> 00:08:45,311
这个执行结果

155
00:08:45,823 --> 00:08:46,335
在这边

156
00:08:47,871 --> 00:08:54,015
这是我手头上的后来比较新的版本用跟UC 4点9去做的版本

157
00:08:55,295 --> 00:08:59,135
那么早起我曾经用boring 4.0做过

158
00:08:59,391 --> 00:09:02,207
确实会输出outofmemoryerror

159
00:09:03,999 --> 00:09:08,607
到后来的右手边这个版本却也没有输出outofmemoryerror

160
00:09:10,655 --> 00:09:11,167
所以

161
00:09:11,935 --> 00:09:15,519
这个这部分可能在不同的平台上了他是怎么

162
00:09:15,775 --> 00:09:18,079
行为你要测试一下

163
00:09:18,591 --> 00:09:20,383
在你自己手上的平台的

164
00:09:20,639 --> 00:09:21,407
测一下

165
00:09:23,711 --> 00:09:25,247
好的这段话

166
00:09:27,039 --> 00:09:31,647
这个例子里头的妞handler如果没有调用过这个

167
00:09:32,671 --> 00:09:34,207
没有调用它的话

168
00:09:35,743 --> 00:09:37,279
那就不会离开程序

169
00:09:38,303 --> 00:09:39,327
因此

170
00:09:39,839 --> 00:09:42,911
上夜班的这个动作就会不断的进行

171
00:09:44,191 --> 00:09:45,471
不断不断的进行

172
00:09:47,775 --> 00:09:49,055
这是要走遍这句话

173
00:09:53,663 --> 00:09:59,295
好这个是牛hand了我们知道它的作用也知道怎么设定他你知道他的行事

174
00:10:03,135 --> 00:10:04,415
下面我要躺着这个

175
00:10:05,439 --> 00:10:07,231
AKB48

176
00:10:07,999 --> 00:10:11,071
这个是cplusplus 2.0新

177
00:10:11,327 --> 00:10:13,631
增加的两个关键字

178
00:10:14,399 --> 00:10:16,191
说他是关键字好了

179
00:10:16,703 --> 00:10:19,007
他的应用像这样

180
00:10:20,031 --> 00:10:22,079
可以在Class里头

181
00:10:22,847 --> 00:10:23,871
这些函数

182
00:10:24,383 --> 00:10:26,431
指定

183
00:10:26,687 --> 00:10:27,967
还是别的

184
00:10:28,735 --> 00:10:31,807
顾名思义也就是这个还是不要

185
00:10:32,575 --> 00:10:36,159
Report就是这个还是我要用默认的版本

186
00:10:37,439 --> 00:10:43,583
我不要这个函数这个很容易理解这个函数的默认版本是什么这个就有点匪夷所

187
00:10:45,631 --> 00:10:46,655
事实上是

188
00:10:47,167 --> 00:10:49,215
如果要设定Boss的话

189
00:10:51,263 --> 00:10:55,871
那就表示那个函数有默认版本了什么样的函数还有默认版本呢

190
00:10:56,383 --> 00:10:57,663
在cplusplus里头

191
00:10:58,175 --> 00:10:58,687
只有

192
00:11:01,503 --> 00:11:03,039
拷贝构造函数

193
00:11:04,063 --> 00:11:06,111
拷贝父子函数

194
00:11:06,623 --> 00:11:07,903
析构函数

195
00:11:08,671 --> 00:11:10,207
他们有默认版本

196
00:11:10,463 --> 00:11:14,559
也就是说如果你没有写的话编译器会给你一套

197
00:11:14,815 --> 00:11:17,887
所谓的编译器合成版

198
00:11:19,679 --> 00:11:25,823
这个事情就我们在这里不提了什么叫便一气呵成把你都做什么事情就不讲了会有

199
00:11:26,079 --> 00:11:29,151
有那么一个版本所以这个提货的只是那个版本

200
00:11:32,223 --> 00:11:32,735
好

201
00:11:33,247 --> 00:11:34,527
2.0的关键字

202
00:11:34,783 --> 00:11:35,807
我们看这句话

203
00:11:37,343 --> 00:11:38,367
这句话说

204
00:11:39,647 --> 00:11:44,255
这两个关键字不只是适用于刚刚我所说的

205
00:11:45,279 --> 00:11:46,303
拷贝构造

206
00:11:46,559 --> 00:11:49,887
好被赋值还有几个函数不只是这样啊

207
00:11:50,143 --> 00:11:53,215
还可以适用于operating

208
00:11:53,471 --> 00:11:54,239
睢宁

209
00:11:55,007 --> 00:11:56,031
还有姐姐

210
00:11:56,287 --> 00:11:57,567
Operated

211
00:11:59,359 --> 00:12:00,383
有这么一句话

212
00:12:02,175 --> 00:12:06,271
我就想那我来试验看看因为我确实想不通

213
00:12:07,807 --> 00:12:13,951
Operation in applied statistics怎么会有debug版本到底是什么

214
00:12:15,999 --> 00:12:16,511
于是

215
00:12:17,023 --> 00:12:18,559
我写的这个程序

216
00:12:20,351 --> 00:12:20,863
富

217
00:12:22,655 --> 00:12:24,959
现在试一下这个就是

218
00:12:25,471 --> 00:12:27,007
Operator new Honda Fit

219
00:12:27,519 --> 00:12:29,311
这个covid-19

220
00:12:31,103 --> 00:12:37,247
我账上随便随便这四个里面我随便放随便写两个而且这上面这两个让他整个的

221
00:12:39,039 --> 00:12:42,879
我刚我说了我不清楚他什么是他的帝国所以我想试试看

222
00:12:43,903 --> 00:12:45,183
这一结果出错

223
00:12:46,463 --> 00:12:47,231
说

224
00:12:47,743 --> 00:12:49,791
Can not supported

225
00:12:50,559 --> 00:12:52,863
他们两个不可以

226
00:12:54,143 --> 00:12:58,495
这个就不合我们对技术的理解不可以这样好

227
00:13:01,055 --> 00:13:02,335
我不要这两个

228
00:13:04,639 --> 00:13:09,759
OK这样的好处是可以通过的写好之后呢我来测试一下

229
00:13:10,527 --> 00:13:11,039
富

230
00:13:15,135 --> 00:13:16,415
这里有四个动作

231
00:13:17,951 --> 00:13:21,023
其中门这四个动作的三根刺

232
00:13:21,791 --> 00:13:23,071
324

233
00:13:24,095 --> 00:13:25,119
调用的

234
00:13:26,655 --> 00:13:27,423
是谁

235
00:13:28,191 --> 00:13:30,751
3324调用的就是这两个

236
00:13:33,055 --> 00:13:34,335
左右比赛一下

237
00:13:35,615 --> 00:13:39,199
这两个已经在设计的时候做比较不允许有了

238
00:13:39,967 --> 00:13:42,015
所以这辆行编译失败

239
00:13:46,367 --> 00:13:47,903
而上面这两个动作呢

240
00:13:49,183 --> 00:13:51,231
它调用的是左手边的质量的

241
00:13:53,535 --> 00:13:54,303
这两个

242
00:13:55,839 --> 00:13:58,399
如果写成的或者是不可以说我已经在

243
00:13:59,167 --> 00:14:00,191
大马里面把它

244
00:14:00,447 --> 00:14:01,471
变成注解了

245
00:14:02,495 --> 00:14:06,591
你会拿到这段代码你会看到

246
00:14:07,615 --> 00:14:08,383
所以

247
00:14:09,151 --> 00:14:10,431
不存在这两行

248
00:14:10,687 --> 00:14:12,991
所以他们是可以被调用到的

249
00:14:13,759 --> 00:14:14,527
可以通过

250
00:14:18,367 --> 00:14:20,159
我14了另外一种情况

251
00:14:20,927 --> 00:14:22,463
上面是负向没事故

252
00:14:23,999 --> 00:14:25,535
这次选的是

253
00:14:26,303 --> 00:14:28,607
这两个做我的目标把他给的调调

254
00:14:30,143 --> 00:14:34,239
反正我就是在这几个函数里头的任意的测试

255
00:14:35,007 --> 00:14:37,311
Bundaberg我的放faded

256
00:14:37,567 --> 00:14:38,847
看看这个事情结果

257
00:14:39,615 --> 00:14:41,663
这两个因为被否定掉了

258
00:14:42,175 --> 00:14:43,199
水库

259
00:14:43,711 --> 00:14:46,015
六根笔记者都不可以吃行

260
00:14:46,527 --> 00:14:47,551
OK成功

261
00:14:48,319 --> 00:14:49,855
他说瑞士可以的

262
00:14:50,623 --> 00:14:52,671
给我这里面并没有去对array

263
00:14:52,927 --> 00:14:55,487
Millharbour adelita做任何事情

264
00:15:00,351 --> 00:15:05,215
这是对于2.0的两个新的关键字既然说他们汉

265
00:15:05,471 --> 00:15:07,775
6点记得有点关系所以我就

266
00:15:08,031 --> 00:15:09,567
做了这些测试

267
00:15:11,103 --> 00:15:16,735
这个就是我们整个的一讲的内容是一家家的primitive

268
00:15:16,991 --> 00:15:17,759
基本

269
00:15:18,015 --> 00:15:18,783
构建的

270
00:15:19,551 --> 00:15:20,831
弄得非常的

271
00:15:21,343 --> 00:15:24,927
彻底并且也已经发展出一个小型的

272
00:15:25,695 --> 00:15:29,535
针对每个Class自己的一个小型的分配器

273
00:15:30,815 --> 00:15:36,191
很快我们要进入第2讲就会看到标准库这个大型的分配器的做法

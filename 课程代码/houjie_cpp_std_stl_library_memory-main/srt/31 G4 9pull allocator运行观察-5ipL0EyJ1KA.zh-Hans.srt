1
00:01:47,520 --> 00:01:50,336
除非有事直接使用malloc

2
00:02:42,816 --> 00:02:47,680
我们先看左边这两个其实这个array的部分我们刚刚已经看过了

3
00:02:48,448 --> 00:02:54,592
容器去要求分配器和分配器在回应的过程中

4
00:02:54,848 --> 00:02:57,152
都没有用到瑞这样的

5
00:02:57,920 --> 00:02:58,688
分配动作

6
00:02:59,200 --> 00:03:00,736
他都是一个一个人的

7
00:03:02,016 --> 00:03:03,808
当然他也是拿

8
00:03:04,320 --> 00:03:06,624
还要关注到什么20乘以二

9
00:03:06,880 --> 00:03:13,024
那边也是一次哪怕只是把数量乘起来之后一次要拿比较大他并没有

10
00:03:13,280 --> 00:03:14,816
我需要一个array

11
00:03:16,096 --> 00:03:21,472
所以现在这边写字顺大写写下来其实没作用

12
00:03:21,728 --> 00:03:22,752
没有作用

13
00:03:23,008 --> 00:03:27,616
同样的右手边这个瑞的这个版本都没有作用

14
00:03:29,408 --> 00:03:30,688
让我们来看一看

15
00:03:30,944 --> 00:03:32,480
Oppor801

16
00:03:32,736 --> 00:03:33,760
Operator delete

17
00:03:34,784 --> 00:03:38,112
这个庙里头我就做了一个输出

18
00:03:39,136 --> 00:03:42,720
让我确认确实这个函数有被调用起来

19
00:03:43,744 --> 00:03:46,304
但是这只是一开始

20
00:03:47,072 --> 00:03:53,216
我在判断10个20个的时候这个每一次有一个输出还可以后的我

21
00:03:53,472 --> 00:03:57,824
增设100万次这个就不可以了这个花圈起来

22
00:03:58,336 --> 00:04:02,176
要不然受不了在屏幕上你就会看到他一直出现一直出现

23
00:04:02,432 --> 00:04:06,272
所以我还是保留但是把他那个起来了

24
00:04:07,040 --> 00:04:12,672
下面是什么呢由于每一次的operator new就会传进来大小

25
00:04:13,184 --> 00:04:15,488
我就把这个大小一直累加

26
00:04:16,512 --> 00:04:18,559
二次数来我就加1

27
00:04:19,583 --> 00:04:23,167
这样我就可以观察到这个报的总共

28
00:04:23,679 --> 00:04:24,959
要用几次

29
00:04:25,983 --> 00:04:27,263
以及总量

30
00:04:29,055 --> 00:04:31,359
这个是左手边的operation

31
00:04:32,127 --> 00:04:36,735
右手边的offer expeditionary应该写出

32
00:04:38,271 --> 00:04:39,295
一个版本

33
00:04:39,807 --> 00:04:41,087
这里有两个版本

34
00:04:41,599 --> 00:04:45,695
先前我们在第1讲时候谈过operator delete

35
00:04:45,951 --> 00:04:48,255
他接受的是一个指针

36
00:04:49,791 --> 00:04:52,351
并且你可以写出比较成熟

37
00:04:53,375 --> 00:04:59,007
你这个第2参数呢这个都不是你来调用的都是编译器

38
00:05:00,031 --> 00:05:03,615
所以穿什么东西进去其实也不是你的

39
00:05:03,871 --> 00:05:08,991
当时就说有两个版本这两个版本还不能同时写出来

40
00:05:09,503 --> 00:05:10,783
这边有住址

41
00:05:11,295 --> 00:05:12,575
当然写为

42
00:05:13,087 --> 00:05:18,975
如果不是全局的先前曾经测试过在克拉斯里头去写他

43
00:05:19,231 --> 00:05:21,791
那这两个人只能选一个

44
00:05:22,047 --> 00:05:24,607
你给我写出两个的画屏还会报错

45
00:05:25,375 --> 00:05:28,447
因为他不知道要掉了一个就是等价的东西

46
00:05:30,751 --> 00:05:34,335
可是在做这个测试程序的时候我竟然发现

47
00:05:34,847 --> 00:05:35,615
签了

48
00:05:35,871 --> 00:05:38,175
一根儿这里就是1

49
00:05:38,687 --> 00:05:41,759
这里就是21号儿可以并存

50
00:05:42,015 --> 00:05:43,295
这太奇怪了

51
00:05:44,319 --> 00:05:45,855
没有任何报错

52
00:05:46,623 --> 00:05:52,767
不过这是在给61的平台下我不确定在微信和BC各位可以去试试看

53
00:05:53,023 --> 00:05:56,351
我其他的下家可不可以定时

54
00:05:56,863 --> 00:06:03,007
好他们可以订但是并存的话当需要调用到底到哪一个版本呢

55
00:06:03,263 --> 00:06:04,543
这两个是等价的呀

56
00:06:05,823 --> 00:06:11,967
这边说我的测试结果是12可以并存并且由儿抓住了流程

57
00:06:12,735 --> 00:06:15,551
他跑到这个地方去你怎么没有用

58
00:06:17,855 --> 00:06:20,927
对我目前这一次的测试是没有用的

59
00:06:21,951 --> 00:06:22,975
相片

60
00:06:23,231 --> 00:06:26,303
因才会传入我要的东西

61
00:06:26,559 --> 00:06:27,327
大小

62
00:06:28,095 --> 00:06:29,887
二是不传进来的

63
00:06:31,679 --> 00:06:33,215
所以对我不用

64
00:06:35,263 --> 00:06:36,287
那等于这个

65
00:06:36,543 --> 00:06:39,359
我可以把意拿掉了我还是给他保留着

66
00:06:41,151 --> 00:06:43,455
所以这边又说了一根儿

67
00:06:44,223 --> 00:06:44,991
如果

68
00:06:45,247 --> 00:06:47,295
只存在一夜话

69
00:06:48,319 --> 00:06:50,111
不会跑进来

70
00:06:50,879 --> 00:06:53,439
你虽然去重返这个

71
00:06:53,695 --> 00:06:54,975
全局的这个版本

72
00:06:55,231 --> 00:06:59,839
但是跑不进来好不进来有什么用啊这个赛季我就观察不到

73
00:07:02,911 --> 00:07:09,055
这个就是让我很意外的地方在更新平台下的进来

74
00:07:09,311 --> 00:07:10,591
出现这个状况

75
00:07:10,847 --> 00:07:11,871
不过

76
00:07:12,127 --> 00:07:16,735
虽然不能观察到观察到实力但是至少可以观察到6

77
00:07:17,759 --> 00:07:21,599
是我们继续下去这里所做的动作

78
00:07:23,391 --> 00:07:24,671
这里所做的动作

79
00:07:27,487 --> 00:07:30,303
为了维护它的运作

80
00:07:31,583 --> 00:07:33,631
我还是要给他分配内存呢

81
00:07:34,143 --> 00:07:36,703
做什么事情不管是这一个

82
00:07:36,959 --> 00:07:38,239
这一个

83
00:07:38,495 --> 00:07:41,311
这两个一样都是调用到这个地方

84
00:07:41,823 --> 00:07:43,359
就是调用malloc

85
00:07:43,615 --> 00:07:45,407
右边这个吗

86
00:07:45,663 --> 00:07:49,247
要用Minecraft minecraftminecraft Minecraft

87
00:07:49,503 --> 00:07:51,807
买free

88
00:07:52,575 --> 00:07:55,135
你同事坐的是不是这个函数

89
00:07:55,903 --> 00:07:58,975
至少要吃药整个程序都能够正确运作

90
00:07:59,231 --> 00:08:04,095
他他是我就接管过来了我可以就可以把这个东西累计

91
00:08:06,143 --> 00:08:10,751
啊最右手边这边我有一个为什么这个我也无法理解

92
00:08:12,031 --> 00:08:15,103
在不同的平台上可能行为也不一样

93
00:08:18,943 --> 00:08:21,503
好写成这样子后

94
00:08:23,039 --> 00:08:23,551
注意

95
00:08:23,807 --> 00:08:24,831
我的标题

96
00:08:25,087 --> 00:08:26,623
4.9

97
00:08:27,647 --> 00:08:29,695
前面我们在讲的那个

98
00:08:30,719 --> 00:08:31,743
12.9

99
00:08:33,535 --> 00:08:37,631
2.9根4.9我说是对等的几乎一样

100
00:08:37,887 --> 00:08:39,423
几乎一样

101
00:08:39,935 --> 00:08:41,727
也有不一样的地方

102
00:08:43,007 --> 00:08:45,567
对现在的测试重要

103
00:08:45,823 --> 00:08:47,615
我们回到前面2.9

104
00:08:49,663 --> 00:08:51,967
他分配内存使用malloc

105
00:08:54,271 --> 00:08:55,551
还没有free

106
00:08:56,063 --> 00:08:57,599
这个我们前面讨论过了

107
00:08:57,855 --> 00:09:02,463
分配使用malloc malloc是没有办法被你

108
00:09:04,255 --> 00:09:10,399
所以在这个版本底下你根本没有办法去改变它的流程把它把这个动作啦

109
00:09:10,655 --> 00:09:13,983
拿到你手上来然后你就记录次数记录

110
00:09:14,239 --> 00:09:16,543
这个这个分量没办法

111
00:09:18,335 --> 00:09:21,919
24.9那这个地方改成了

112
00:09:22,943 --> 00:09:23,711
调用

113
00:09:24,735 --> 00:09:25,759
Operator New

114
00:09:26,783 --> 00:09:30,367
那就会被我们接管过来被我刚刚的设计接管过来

115
00:09:31,135 --> 00:09:32,671
我就能够知道

116
00:09:33,695 --> 00:09:39,839
在正在4.9的这一个很棒的车车的说很棒的这一个

117
00:09:40,095 --> 00:09:42,911
分配器里头他到底呗

118
00:09:43,679 --> 00:09:45,983
他到底真正分配了几次

119
00:09:46,495 --> 00:09:48,543
总共分配的多少个

120
00:09:48,799 --> 00:09:49,567
自己

121
00:09:53,407 --> 00:09:54,943
所以我要这里

122
00:09:56,991 --> 00:10:00,319
我是在4.9的环境地下

123
00:10:00,575 --> 00:10:03,391
做这个官场做这个测试

124
00:10:04,671 --> 00:10:07,231
好喜好这个之后

125
00:10:08,255 --> 00:10:09,279
好的谢谢

126
00:10:11,071 --> 00:10:13,887
我们看左右两块这都是都是我要测试的

127
00:10:15,167 --> 00:10:16,703
先看右手边

128
00:10:18,495 --> 00:10:20,031
我选的这个容器

129
00:10:23,103 --> 00:10:26,687
这个容器里头我没有特别指定是什么分配器

130
00:10:27,455 --> 00:10:30,783
所以用掉了就是标准的那个分配器

131
00:10:31,039 --> 00:10:33,855
我们前面讨论过他他没有做什么特殊事情啊

132
00:10:34,879 --> 00:10:36,927
所以每个元素应该会带着空气

133
00:10:38,719 --> 00:10:43,583
好做多少次那个拾佰仟万100000百万1000000

134
00:10:45,375 --> 00:10:46,143
1000000

135
00:10:46,655 --> 00:10:47,423
Facebook

136
00:10:48,703 --> 00:10:49,983
我心里头想象

137
00:10:51,007 --> 00:10:56,127
由于模特别选历史的很单纯的每一个元素就是一个节点

138
00:10:57,407 --> 00:11:03,551
我们首先来探讨一下这个每一个元素这个double 16个字

139
00:11:05,087 --> 00:11:06,111
花的自己

140
00:11:06,879 --> 00:11:07,903
花的自己

141
00:11:09,439 --> 00:11:14,559
但是节点上节点要自己带这只正因为这是链表

142
00:11:15,327 --> 00:11:20,191
会带着两根指针所以八再加四再加46

143
00:11:21,215 --> 00:11:26,079
链表相分配器发出来的需求一次我要16个

144
00:11:26,591 --> 00:11:27,871
自己16

145
00:11:29,663 --> 00:11:31,711
好然后100万次

146
00:11:33,759 --> 00:11:34,783
看看输出结果

147
00:11:36,831 --> 00:11:39,391
这个不需配合会跟分配器

148
00:11:39,647 --> 00:11:43,487
只要内存分配器刚刚那一套

149
00:11:44,255 --> 00:11:50,399
他是那个最后的动作会被我接管对我在上一页这个东西接管过来我就可以累计

150
00:11:52,703 --> 00:11:53,983
得到的结果是

151
00:11:55,263 --> 00:11:56,543
总共分配了

152
00:11:57,311 --> 00:11:58,847
16个1000000

153
00:11:59,103 --> 00:12:00,639
因为我是100万次

154
00:12:00,895 --> 00:12:06,271
每一个字每一个节点是16个字节所以是16百万个

155
00:12:07,039 --> 00:12:07,807
自己

156
00:12:10,879 --> 00:12:11,903
次数呢

157
00:12:13,439 --> 00:12:14,207
1234

158
00:12:15,231 --> 00:12:19,071
因为你放100万个元素进去所以他就跟他要100万次

159
00:12:19,839 --> 00:12:20,863
不符合

160
00:12:21,631 --> 00:12:22,399
想象

161
00:12:23,423 --> 00:12:24,703
那只要注意这一

162
00:12:24,959 --> 00:12:26,495
6000000

163
00:12:27,775 --> 00:12:30,335
这元素都是在哭泣

164
00:12:32,639 --> 00:12:36,223
因为这里用的是标准的分配器

165
00:12:38,015 --> 00:12:41,343
分配器标准分配给下直接调用malloc

166
00:12:44,671 --> 00:12:46,975
我们有没有办法再去看一下

167
00:12:47,487 --> 00:12:53,631
这只是我们的联想我们的想象从技术上去推想他带过去给我证据吧

168
00:12:55,935 --> 00:12:56,959
没办法

169
00:12:57,983 --> 00:12:59,519
没有办法得到证据

170
00:13:02,847 --> 00:13:03,871
这边有KTV

171
00:13:04,383 --> 00:13:06,175
我们等一下来检讨这个事情

172
00:13:06,431 --> 00:13:07,455
到底有没有办法

173
00:13:09,759 --> 00:13:11,039
好这是一个测试

174
00:13:11,295 --> 00:13:13,599
然后我做定外一个测试在左手边

175
00:13:16,159 --> 00:13:17,183
我看最好

176
00:13:18,719 --> 00:13:22,815
我仍然使用一个链表我要跟右右手边比对

177
00:13:23,583 --> 00:13:24,095
电表

178
00:13:25,119 --> 00:13:26,143
元素是dubbo

179
00:13:26,399 --> 00:13:27,423
右边都一样

180
00:13:28,191 --> 00:13:30,751
这一次我选的分配器是

181
00:13:31,519 --> 00:13:32,031
这个

182
00:13:32,799 --> 00:13:33,311
刚刚

183
00:13:33,823 --> 00:13:35,103
探讨过的这一个

184
00:13:37,663 --> 00:13:39,967
好我应该写成这样

185
00:13:40,735 --> 00:13:46,879
不过我在这边吃饭睡觉家2.0的写法会更漂亮的叶翠翠

186
00:13:47,135 --> 00:13:48,159
等同于

187
00:13:48,415 --> 00:13:50,207
上面的遗憾

188
00:13:50,975 --> 00:13:52,255
给我况且这些

189
00:13:54,047 --> 00:14:00,191
我就不去解释他了在家2.00里头那是一个叫做ABS

190
00:14:00,447 --> 00:14:03,263
模板的化名

191
00:14:03,775 --> 00:14:07,871
我就不去解释他了反正就是这两块等一下面这一块

192
00:14:10,687 --> 00:14:12,223
OK洗好之后

193
00:14:12,735 --> 00:14:14,783
我也是100万次的元素

194
00:14:17,343 --> 00:14:18,623
得到了结果呢

195
00:14:20,415 --> 00:14:22,975
调用次数分配

196
00:14:23,487 --> 00:14:24,511
四数字

197
00:14:25,279 --> 00:14:28,351
右边多右边是16个100万左边是

198
00:14:28,863 --> 00:14:30,655
十六百万再加上

199
00:14:31,167 --> 00:14:31,935
零头

200
00:14:33,727 --> 00:14:35,775
你看起来好像不太乐观

201
00:14:36,799 --> 00:14:38,335
我们在使用的是

202
00:14:39,103 --> 00:14:41,151
比较好的这个分配器

203
00:14:42,175 --> 00:14:45,247
不是分配的次数却比较多次

204
00:14:45,503 --> 00:14:46,783
我好像不太乐观

205
00:14:48,831 --> 00:14:49,855
我们继续往下看

206
00:14:51,903 --> 00:14:58,047
我刚刚说错了这个不是分配的次数这个是分配的累计总量

207
00:14:58,815 --> 00:14:59,839
累计总量

208
00:15:00,863 --> 00:15:02,399
分配的次数了

209
00:15:02,911 --> 00:15:04,959
只有122次

210
00:15:05,471 --> 00:15:09,055
右边是100万次左边是122次

211
00:15:10,591 --> 00:15:13,919
这个右边的100万次每一次都带过去

212
00:15:14,943 --> 00:15:17,503
消耗了800万个字节

213
00:15:18,527 --> 00:15:22,367
左边的122次也是每次都在哭泣

214
00:15:23,391 --> 00:15:26,463
消耗的是只有122个

215
00:15:26,975 --> 00:15:27,999
八个字节

216
00:15:28,767 --> 00:15:30,303
差别如此之大

217
00:15:33,119 --> 00:15:34,655
至于上面那个数据

218
00:15:35,935 --> 00:15:37,215
有一点点差距

219
00:15:37,727 --> 00:15:42,079
但这个数据只能作参考因为我只能够把

220
00:15:42,591 --> 00:15:43,615
分配的

221
00:15:44,383 --> 00:15:45,919
字节数累加

222
00:15:46,431 --> 00:15:48,991
哈里的还有debit就没办法去除

223
00:15:50,527 --> 00:15:52,063
我们可以解释啊

224
00:15:52,319 --> 00:15:53,599
右边这个人

225
00:15:53,855 --> 00:15:55,391
没有任何的管理

226
00:15:56,927 --> 00:15:58,975
左边这个有多一层管理

227
00:15:59,487 --> 00:16:02,815
所以在管理的时候也需要好用一些内存

228
00:16:03,839 --> 00:16:06,655
因此可以想象会

229
00:16:07,423 --> 00:16:09,727
播一些分配跟释放的动作

230
00:16:10,239 --> 00:16:12,031
这是为什么这个数字比较大

231
00:16:14,079 --> 00:16:16,383
但这个对全局没有影响

232
00:16:16,895 --> 00:16:18,687
我们的重点是下面这一个

233
00:16:19,711 --> 00:16:21,247
122对1000000

234
00:16:22,015 --> 00:16:23,551
把这个差距太大了

235
00:16:27,391 --> 00:16:33,535
他只能借助这个数据以及我们对malloc的理解什么唠嗑一定带着哭的

236
00:16:34,047 --> 00:16:34,559
我要去

237
00:16:35,071 --> 00:16:36,863
橘子感受到

238
00:16:37,119 --> 00:16:39,423
这个设计那非常好

239
00:16:40,191 --> 00:16:41,471
大幅降低谷系

240
00:16:44,799 --> 00:16:47,615
非整个第2讲在谈这个分配器

241
00:16:48,383 --> 00:16:50,431
我们在一开始就讲到了第1

242
00:16:50,943 --> 00:16:52,479
你讲的那个

243
00:16:53,247 --> 00:16:56,575
算是很阳春的那个分配器其实

244
00:16:57,087 --> 00:16:58,367
已经够好了

245
00:16:58,879 --> 00:17:00,415
他唯一不够好的是

246
00:17:00,927 --> 00:17:03,743
还没有降低估计而现在第2讲这个呢

247
00:17:03,999 --> 00:17:05,023
去除了图片

248
00:17:06,815 --> 00:17:09,119
而去除cookie这件事情是

249
00:17:09,375 --> 00:17:13,215
需要这么大的Apple怎么大的心力去完成它

250
00:17:13,471 --> 00:17:15,519
今天第二章所讲的内容

251
00:17:17,567 --> 00:17:19,103
最后这边有个TV

252
00:17:21,407 --> 00:17:23,455
他在谈到最会的时候提过

253
00:17:23,967 --> 00:17:28,319
我能不能够观察到malloc真正分配出去的重量

254
00:17:29,599 --> 00:17:32,415
叫我要跟他要100块的给我多少

255
00:17:32,671 --> 00:17:34,719
是真的给我加上那些

256
00:17:35,231 --> 00:17:36,767
额外开销overhead

257
00:17:37,535 --> 00:17:40,351
这个想一开始就前面有张图

258
00:17:40,607 --> 00:17:44,703
这个额外开销还包括上下公平真的是给我那些吗

259
00:17:44,959 --> 00:17:46,495
能不能让我看一眼

260
00:17:48,031 --> 00:17:50,079
13讲会让你看得很清楚

261
00:17:51,103 --> 00:17:53,407
现在这个地方没办法所以

262
00:17:54,175 --> 00:17:55,455
这里回答是不难

263
00:17:56,479 --> 00:17:57,503
没有办法让你看

264
00:17:58,015 --> 00:18:00,319
因为没到可不能重载

265
00:18:01,855 --> 00:18:02,879
除非

266
00:18:03,135 --> 00:18:05,951
主为什么呢准备你的技巧非常的高

267
00:18:06,719 --> 00:18:10,303
你很清楚的理解的malloc的行为模式

268
00:18:11,583 --> 00:18:15,935
理解他管理的每一个区块其实是一个链表有个头

269
00:18:16,447 --> 00:18:19,519
你如果知道这个头你也可以把它走一遍

270
00:18:19,775 --> 00:18:21,311
你做完全清楚

271
00:18:21,567 --> 00:18:22,591
每一块的大小

272
00:18:23,871 --> 00:18:25,151
除非

273
00:18:25,407 --> 00:18:27,455
你的技术能力到那个层次

274
00:18:28,479 --> 00:18:30,015
或者除非

275
00:18:31,807 --> 00:18:33,599
例如在VCD下

276
00:18:34,111 --> 00:18:37,183
还有一堆函数叫瑞后天放学

277
00:18:37,951 --> 00:18:39,487
让你记载用的

278
00:18:39,743 --> 00:18:42,303
也可以从那边去看到

279
00:18:42,815 --> 00:18:46,143
Malloc给你的每一个区块真正的大小

280
00:18:47,167 --> 00:18:49,727
除非你有这种能力

281
00:18:51,519 --> 00:18:55,615
我们在第3讲就要为大家建立起这种能力

282
00:18:55,871 --> 00:18:57,663
13讲谈的就是malloc

283
00:19:00,991 --> 00:19:01,503
最后

284
00:19:02,783 --> 00:19:04,063
这一个

285
00:19:04,319 --> 00:19:10,463
Hello Kitty第2章他的这个Hello Kitty不管是2.9还是4.9 4.9设计比较复杂

286
00:19:10,719 --> 00:19:11,999
在我们不要讲他

287
00:19:12,255 --> 00:19:18,399
2.9那可以一直到吃很简单因为它里头都是静态在这个Class的投诉

288
00:19:18,655 --> 00:19:20,191
都是静态的东西

289
00:19:21,983 --> 00:19:23,775
废物照这样子

290
00:19:24,031 --> 00:19:25,055
已经到店出来了

291
00:19:26,591 --> 00:19:27,359
很简单的

292
00:19:29,151 --> 00:19:30,687
那么我给你的

293
00:19:30,943 --> 00:19:31,711
这个

294
00:19:32,223 --> 00:19:34,271
程序代码里头

295
00:19:35,039 --> 00:19:36,063
包含着

296
00:19:36,831 --> 00:19:41,439
The new 2.9已经被我去取了那个290号

297
00:19:42,463 --> 00:19:43,231
放在里头

298
00:19:43,487 --> 00:19:44,511
测试过

299
00:19:45,023 --> 00:19:48,095
也包含的这一个细的版本

300
00:19:48,863 --> 00:19:50,399
变成一个头文件

301
00:19:51,679 --> 00:19:52,191
整个

302
00:19:52,447 --> 00:19:55,775
我测试过整个是一个程序你可以执行看看

303
00:19:57,567 --> 00:19:59,615
这些东西我前面提过

304
00:19:59,871 --> 00:20:00,895
每一段

305
00:20:01,151 --> 00:20:04,223
测试我都是泡在一个命名空间之中

306
00:20:04,479 --> 00:20:08,831
随着10 1990 2031没断的鼻子

307
00:20:09,087 --> 00:20:09,855
不干扰

308
00:20:12,415 --> 00:20:13,695
标准互本身干扰

309
00:20:14,207 --> 00:20:20,351
你说这块就是标准库的我把它拿过来名字都没改那不是跟那种骨干扰了吗

310
00:20:22,399 --> 00:20:25,471
因为我放在独立的命名空间中

311
00:20:27,007 --> 00:20:30,079
这是一个我自己觉得很好的一个做法

312
00:20:31,359 --> 00:20:32,383
参考

313
00:20:33,407 --> 00:20:35,967
这个就是我们的第2项

314
00:20:36,479 --> 00:20:38,271
标准库的分配器

1
00:00:05,632 --> 00:00:09,472
关于placement这里我们有一些

2
00:00:12,288 --> 00:00:16,896
也不能松误区就是一个鸡一个术语上的一个回调

3
00:00:17,152 --> 00:00:19,456
我们一般般Prince name

4
00:00:19,712 --> 00:00:21,248
什么是这种形式

5
00:00:21,760 --> 00:00:25,344
这种形式的一般就是里头可以放一个指针

6
00:00:26,880 --> 00:00:33,024
其实这种形式就是你后面有一个小瓜和这就是一个对于一般的陆的

7
00:00:33,280 --> 00:00:34,560
一个

8
00:00:34,816 --> 00:00:37,632
一个一个特特殊的版本

9
00:00:38,400 --> 00:00:42,496
所以这个小括号里头其实可以不只放一个支撑

10
00:00:42,752 --> 00:00:45,568
可以由你来定义放热力的东西

11
00:00:45,824 --> 00:00:51,968
这个放一个指针的这种版本就是标准库已经先写好了给我

12
00:00:52,992 --> 00:00:54,016
来说这句话

13
00:00:54,528 --> 00:00:56,832
我们可以从法

14
00:00:58,112 --> 00:00:59,136
这种

15
00:00:59,648 --> 00:01:00,672
东西

16
00:01:01,184 --> 00:01:04,512
我们刚才已经跌已经试验过了重载它

17
00:01:04,768 --> 00:01:07,584
而是我们现在可以去写出多个版本

18
00:01:08,352 --> 00:01:09,888
比如说像这样

19
00:01:12,192 --> 00:01:16,288
这样到底要能不能交个朋友弄得他也没小括号

20
00:01:16,544 --> 00:01:22,688
Brisbane我刚刚翻译中文翻译成定点定点吗就是在一个指针所指

21
00:01:22,944 --> 00:01:29,088
上面这里都没有什么指针的这里是300个那个字头的就这样

22
00:01:29,344 --> 00:01:35,488
能不能叫我刚刚说一开始说存在的一些企业就是这一个

23
00:01:35,744 --> 00:01:36,512
老婆

24
00:01:37,024 --> 00:01:43,168
统一术语讲是说只要带着小括号的活动把他叫我雷司令

25
00:01:44,448 --> 00:01:47,264
艾斯就不能翻译成定点的溜了

26
00:01:48,544 --> 00:01:49,824
好我们继续下去

27
00:01:50,080 --> 00:01:56,224
所以我们可以写出各式各样版本带着这个小括号的里头参数了各式各样由

28
00:01:56,480 --> 00:01:58,272
你来指定多个版本

29
00:01:58,784 --> 00:02:04,928
不过这个前提是美版本的声明都必须有一个独特的参数列

30
00:02:05,184 --> 00:02:06,464
恩那当然了

31
00:02:06,720 --> 00:02:12,864
你好多的版本但是参数列必须不同当然而其中的第1个

32
00:02:13,120 --> 00:02:15,168
这个参数必须是这个

33
00:02:17,216 --> 00:02:17,984
为什么呢

34
00:02:19,008 --> 00:02:21,824
当没有这个小括号的时候鸟

35
00:02:22,080 --> 00:02:22,592
不

36
00:02:23,104 --> 00:02:24,640
附的大小

37
00:02:24,896 --> 00:02:27,200
就会被传进来作为

38
00:02:27,968 --> 00:02:31,296
被传到这一个函数来作为第1层数

39
00:02:31,552 --> 00:02:32,832
它的大小

40
00:02:33,088 --> 00:02:34,880
是一个size_t

41
00:02:36,160 --> 00:02:42,304
所以你经常去写的各种各式各样的版本也都必须有一个第1参数接受的就是

42
00:02:42,816 --> 00:02:43,840
富大小

43
00:02:45,888 --> 00:02:50,496
至于之下的第2层书的三参数是什么随便民设计

44
00:02:52,288 --> 00:02:54,848
最奇异的参数是1

45
00:02:55,616 --> 00:02:58,944
Christmas argument为参数这个好这个就是

46
00:02:59,200 --> 00:03:00,480
Placement

47
00:03:05,344 --> 00:03:05,856
好

48
00:03:06,112 --> 00:03:10,976
这一段话我们等一下再说我先去看看实际的例子

49
00:03:11,744 --> 00:03:14,048
现在我在附身上

50
00:03:14,304 --> 00:03:18,144
我就要重载一些

51
00:03:18,656 --> 00:03:20,448
这个就是一般版本

52
00:03:20,960 --> 00:03:22,240
这个我们前面看过了

53
00:03:24,032 --> 00:03:25,056
这一个

54
00:03:26,336 --> 00:03:27,360
就是

55
00:03:27,616 --> 00:03:31,968
一般所说的placement new这个版本也就是里头有一根指针

56
00:03:34,272 --> 00:03:36,832
继续往下你可以写出很多版本

57
00:03:37,344 --> 00:03:41,696
但是一定要注意的参数一定是这种类型

58
00:03:47,328 --> 00:03:48,608
这个就是personal

59
00:03:49,632 --> 00:03:54,240
至于你设计出这个版本出来要做什么用那个就不是这里所探讨的

60
00:03:54,752 --> 00:03:59,104
我们等一下会看到在标准库的字符串

61
00:03:59,360 --> 00:04:02,944
他就有写出一个重载的版本出来

62
00:04:03,456 --> 00:04:05,248
它接受一个extra

63
00:04:05,504 --> 00:04:07,552
一个额外的大小

64
00:04:08,320 --> 00:04:09,600
好怎样去看

65
00:04:11,392 --> 00:04:13,440
我写出这四个版本

66
00:04:14,720 --> 00:04:16,512
我要写出第5个版本

67
00:04:17,024 --> 00:04:21,887
这又是一个朋友但是我故意写错的参数

68
00:04:22,655 --> 00:04:27,263
应该是这样但是我故意写成什么我写成一个弄

69
00:04:29,311 --> 00:04:32,895
我试试看你会告诉我什么事情他说

70
00:04:33,151 --> 00:04:39,295
Operation in this type这个应该要拿这个作为第1个

71
00:04:39,551 --> 00:04:40,319
一个参数

72
00:04:40,831 --> 00:04:42,111
而我却不是

73
00:04:43,903 --> 00:04:50,047
我们通过这一个报错信息来更清楚的认识所谓的参数的类型

74
00:04:52,607 --> 00:04:54,143
再回来看看的同一天来

75
00:04:56,447 --> 00:05:02,591
我们也可以从彩operator delete也写出多个版本出来

76
00:05:03,615 --> 00:05:07,967
在这个之前我们不是就有一无所谓的一般的

77
00:05:08,479 --> 00:05:11,807
61班的比例怎么我们不是有重载他了吗

78
00:05:12,831 --> 00:05:15,135
不过这里说还可以写出多个出来

79
00:05:16,415 --> 00:05:19,487
但他们绝对不会被delete

80
00:05:20,255 --> 00:05:21,535
这句话什么意思呢

81
00:05:22,815 --> 00:05:23,839
也就是说

82
00:05:24,863 --> 00:05:26,399
回到我的这个小例子

83
00:05:26,655 --> 00:05:28,447
我这里写的四个版本

84
00:05:29,471 --> 00:05:35,615
按道理讲我也应该针对这四个的形式写出四个兄弟四个

85
00:05:35,871 --> 00:05:37,151
Operator delete出来

86
00:05:37,919 --> 00:05:40,223
没错应该写出来

87
00:05:41,759 --> 00:05:44,831
但他们的作用了相当

88
00:05:45,087 --> 00:05:45,855
模特

89
00:05:46,623 --> 00:05:49,183
这就是上月这句话的意思

90
00:05:50,463 --> 00:05:51,743
我们直接看例子吧

91
00:05:53,791 --> 00:05:56,095
好所以这边有四个版本

92
00:05:56,351 --> 00:05:57,631
错误的估计

93
00:05:58,143 --> 00:05:58,911
出错了

94
00:05:59,423 --> 00:06:01,471
这个接下一页

95
00:06:02,495 --> 00:06:07,871
这个街上音乐这里做什么那我也写出了1234

96
00:06:08,383 --> 00:06:10,175
这是对应上面的

97
00:06:10,431 --> 00:06:13,247
上月的1234集出来

98
00:06:15,295 --> 00:06:18,111
但这四个版本的比例的做什么用

99
00:06:20,159 --> 00:06:21,183
我们看看

100
00:06:21,951 --> 00:06:23,487
实用结果

101
00:06:24,511 --> 00:06:25,279
来做讨论

102
00:06:27,071 --> 00:06:28,863
我从这里开始

103
00:06:29,631 --> 00:06:32,191
帮我写出库这样子写的时候

104
00:06:32,703 --> 00:06:34,751
我开始创建这些服务

105
00:06:35,263 --> 00:06:36,799
根据他们的

106
00:06:37,055 --> 00:06:39,871
上钥匙operational根据这些参数

107
00:06:41,151 --> 00:06:44,479
我就是用用看这是一般的牛

108
00:06:44,735 --> 00:06:48,319
这个是所谓的指针的placement

109
00:06:50,111 --> 00:06:55,487
这一个那我就对应刚刚上页的第3版本这个就对应的四版本

110
00:06:58,047 --> 00:06:59,327
到了第5个

111
00:07:01,887 --> 00:07:03,423
我这边的动作是

112
00:07:04,703 --> 00:07:06,751
51用的是谁

113
00:07:07,519 --> 00:07:08,543
这里的五

114
00:07:10,591 --> 00:07:12,895
调用的是这一个版本是

115
00:07:13,919 --> 00:07:16,991
一个一个整数还是一个肉

116
00:07:18,015 --> 00:07:19,807
所以我们回到上面去看看

117
00:07:22,367 --> 00:07:23,135
上一页

118
00:07:23,391 --> 00:07:24,159
这里

119
00:07:25,695 --> 00:07:29,023
除了有这个第1参数size之外

120
00:07:29,279 --> 00:07:34,143
123书有第2层是10个指针所以不符合刚刚的第5次的调用

121
00:07:34,655 --> 00:07:40,799
这个人弄extra这个还多了两个参数所以不是这一个那就是这一个了

122
00:07:43,871 --> 00:07:45,919
好坐这一个事情

123
00:07:46,687 --> 00:07:47,711
所以

124
00:07:47,967 --> 00:07:49,759
刚刚了这个55

125
00:07:51,039 --> 00:07:53,855
调用的是商业的这一个版本

126
00:07:55,391 --> 00:07:56,671
这一个版本

127
00:07:57,183 --> 00:07:59,743
在分配好内存之后

128
00:08:01,279 --> 00:08:02,559
回到

129
00:08:03,327 --> 00:08:04,351
这个我这里来

130
00:08:05,119 --> 00:08:08,703
并不是切成两个动作吗一个是一个是

131
00:08:09,215 --> 00:08:10,495
Operator New

132
00:08:11,007 --> 00:08:13,055
接下来就是要调用构造函数

133
00:08:14,335 --> 00:08:16,127
而我这边的构造函数

134
00:08:16,639 --> 00:08:18,431
刻意的让他设计

135
00:08:19,199 --> 00:08:19,711
去

136
00:08:20,223 --> 00:08:21,247
做什么事呢

137
00:08:22,527 --> 00:08:23,295
桑叶来

138
00:08:28,159 --> 00:08:28,927
这个

139
00:08:30,719 --> 00:08:31,487
再看一次

140
00:08:32,767 --> 00:08:34,559
前面这些都是

141
00:08:34,815 --> 00:08:36,095
默认构造函数

142
00:08:37,119 --> 00:08:38,655
只有这一个

143
00:08:39,423 --> 00:08:41,215
失败是一个成熟的

144
00:08:43,007 --> 00:08:44,543
所以不是这一个

145
00:08:46,847 --> 00:08:50,175
我刻意的丢出抛出异常

146
00:08:50,943 --> 00:08:52,479
为在这里跑出一场

147
00:08:54,783 --> 00:08:56,319
这个时候

148
00:08:56,831 --> 00:08:59,135
只有在这种时候什么时候

149
00:08:59,647 --> 00:09:05,279
构造函数内抛出异常这种情况下

150
00:09:06,815 --> 00:09:10,655
对应的这些accredited才会被吊起来

151
00:09:11,679 --> 00:09:13,727
这是一个很特殊的情况

152
00:09:13,983 --> 00:09:18,847
他的用意是一家做这样的一个平台设计他的用意是

153
00:09:19,871 --> 00:09:20,895
安心

154
00:09:21,919 --> 00:09:26,783
担心你写的真相

155
00:09:27,551 --> 00:09:29,343
分配好内存之后

156
00:09:29,599 --> 00:09:33,695
接下来调用构造函数的构造函数里面

157
00:09:34,207 --> 00:09:37,279
不能够完整的把东西建立起来

158
00:09:39,839 --> 00:09:41,631
可是说内存已经分配好了

159
00:09:42,655 --> 00:09:45,983
内存分配好了没有成功的建立起

160
00:09:46,239 --> 00:09:48,031
飞向那就应该

161
00:09:48,543 --> 00:09:49,823
回头去把内存

162
00:09:50,079 --> 00:09:51,103
吃饭票

163
00:09:52,639 --> 00:09:53,663
所以

164
00:09:53,919 --> 00:09:54,687
他才说

165
00:09:55,199 --> 00:09:56,223
好你们

166
00:09:56,479 --> 00:09:57,759
对应的写出这些

167
00:09:59,039 --> 00:10:03,135
一旦有异常抛出的时候对应的同一个函数就会被调用

168
00:10:05,183 --> 00:10:05,695
所以

169
00:10:06,207 --> 00:10:09,023
刚刚和一的抛出的异常了

170
00:10:10,559 --> 00:10:14,143
这个是在这页的第5个动作抛出来的

171
00:10:15,167 --> 00:10:21,311
你下面都不会执行啊都不会执行代码写成这样但是到了这一行

172
00:10:21,567 --> 00:10:25,663
好的时候就抛出异常就调用起

173
00:10:26,431 --> 00:10:27,455
对应的

174
00:10:27,711 --> 00:10:29,247
某一个版本

175
00:10:29,759 --> 00:10:31,295
执行就是这一个

176
00:10:33,087 --> 00:10:33,855
这里面

177
00:10:35,903 --> 00:10:37,183
分配的内存呢

178
00:10:37,951 --> 00:10:39,231
调用构造函数了

179
00:10:39,487 --> 00:10:40,511
接下来呢

180
00:10:40,767 --> 00:10:41,791
Terminate

181
00:10:42,815 --> 00:10:43,583
结束了

182
00:10:44,607 --> 00:10:45,375
因为

183
00:10:46,655 --> 00:10:48,447
要用了这里的某一个版本

184
00:10:50,751 --> 00:10:52,287
我这边有写很奇怪

185
00:10:53,055 --> 00:10:57,151
按道理讲这里面对调的话这里会有一个offer的动作

186
00:10:59,199 --> 00:11:00,991
怎么没有输出这个动作呢

187
00:11:02,783 --> 00:11:04,319
这是我这边写一个奇怪

188
00:11:04,575 --> 00:11:07,903
怎么4.9版没有调用但是

189
00:11:08,159 --> 00:11:10,719
以前在2.9版确实有调用

190
00:11:12,767 --> 00:11:16,863
这个是现在还不太能解释为什么大的不同的版本的行为

191
00:11:18,143 --> 00:11:20,959
以前的不行为很好现在却变得比较差

192
00:11:23,519 --> 00:11:26,335
我们来看看在vc6底下有个警告

193
00:11:29,663 --> 00:11:30,687
警告什么

194
00:11:31,455 --> 00:11:32,991
请到这边事情

195
00:11:35,039 --> 00:11:36,063
意思是说

196
00:11:37,343 --> 00:11:39,647
Operation物有四个版本

197
00:11:40,415 --> 00:11:43,999
那么这里accredited也应该有四个版本

198
00:11:45,023 --> 00:11:49,887
但即使这里未能一一对应于

199
00:11:50,399 --> 00:11:51,423
他的兄弟

200
00:11:51,935 --> 00:11:54,751
也不应也不会出现任何报错

201
00:11:56,031 --> 00:11:59,359
这样的设计是合乎道理的吗

202
00:12:00,127 --> 00:12:03,967
Cplusplus这样的一个机制的设计是合乎道理的吗

203
00:12:04,991 --> 00:12:06,015
合乎道理

204
00:12:06,527 --> 00:12:09,087
因为这些是在处理一场的

205
00:12:09,599 --> 00:12:11,135
他会听讲过这个故事

206
00:12:12,159 --> 00:12:18,303
所以如果你没有出现某一下你的意思是你要放弃处理

207
00:12:18,559 --> 00:12:20,351
构造函数抛出的异常

208
00:12:22,399 --> 00:12:26,495
你不写表示你放弃追着也没有什么对错可言

209
00:12:28,799 --> 00:12:32,383
不过vc6的很贴心他这边有个警告

210
00:12:33,663 --> 00:12:39,807
骑行你以前有四个版本你是叶这边的只有三个版本没对应哦是你估

211
00:12:40,063 --> 00:12:40,831
故意的还是你

212
00:12:41,087 --> 00:12:42,879
不小心

213
00:12:47,487 --> 00:12:48,511
这个是

214
00:12:48,767 --> 00:12:51,071
我们谈到Play some News

215
00:12:51,583 --> 00:12:52,863
重载的方式

216
00:12:55,423 --> 00:12:59,775
在标准库里面有一个Class讲个呗

217
00:13:01,055 --> 00:13:07,199
我们平常习惯用的那个区域其实就是一个他的伴随的地方

218
00:13:08,479 --> 00:13:11,295
所以你在用字符串里就是这样

219
00:13:13,087 --> 00:13:14,367
他里头

220
00:13:14,623 --> 00:13:17,439
就去重载了

221
00:13:20,255 --> 00:13:21,535
这里面做什么事情

222
00:13:22,559 --> 00:13:23,327
在右手边

223
00:13:24,863 --> 00:13:27,935
它所承载的这一个版本iPhone 6

224
00:13:28,959 --> 00:13:30,751
Operator new这个形式

225
00:13:31,263 --> 00:13:33,567
134我们说一定要是size

226
00:13:34,847 --> 00:13:36,639
要谈这个

227
00:13:37,151 --> 00:13:38,687
类的大小

228
00:13:39,455 --> 00:13:41,247
不可以变的刚刚提过了

229
00:13:41,759 --> 00:13:45,599
所以使用的时候其实是多数第2参数

230
00:13:46,367 --> 00:13:47,391
就像这样子用

231
00:13:49,183 --> 00:13:51,231
在这里他不行的比较extra

232
00:13:52,255 --> 00:13:53,279
额外的

233
00:13:54,303 --> 00:14:00,191
说它的作用是什么特殊的一个字符串里面它的作用是当你

234
00:14:00,703 --> 00:14:05,311
使用者去创建一个字符串比如说hello

235
00:14:06,079 --> 00:14:09,407
Hello视hello2个字符

236
00:14:09,663 --> 00:14:13,503
大家再加上后面有一个结束符号六个字符

237
00:14:14,271 --> 00:14:16,319
按照理想它的长度是6

238
00:14:17,599 --> 00:14:19,903
但是他在分配的时候会加上x锁

239
00:14:22,463 --> 00:14:24,767
这个是一个蛮大的话题

240
00:14:25,279 --> 00:14:26,559
是因为

241
00:14:27,327 --> 00:14:33,471
标准库的字符串有reference-counting的功能所以他前面多大了一包东

242
00:14:37,823 --> 00:14:43,967
我们这个话题就讲到这里就是他多带了一包东西所以每一次你创建字符数

243
00:14:44,223 --> 00:14:50,111
算盘一定要多一个App所以他设计了一个placement物的版本

244
00:14:50,879 --> 00:14:52,927
为什么叫它placement因为

245
00:14:53,183 --> 00:14:54,463
多了这个参数

246
00:14:58,047 --> 00:14:59,839
我把它的源代码发出来

247
00:15:00,607 --> 00:15:03,423
这一个参数被放进了到这里

248
00:15:04,191 --> 00:15:09,311
这里所做的事情分配就是把大小加上

249
00:15:10,335 --> 00:15:11,103
Extra

250
00:15:11,871 --> 00:15:13,151
热什么呢

251
00:15:13,919 --> 00:15:14,431
子

252
00:15:15,967 --> 00:15:17,759
格外大的一包东西

253
00:15:19,807 --> 00:15:25,183
我前面的template meninas后我说有一个很好的例子就是这一个

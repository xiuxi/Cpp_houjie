1
00:01:02,976 --> 00:01:09,120
可以放在好几个地方其中放在这个地方的是特别重要而又容易被忽

2
00:01:09,376 --> 00:01:15,520
忽略了这是什么地方这就是在一个函数的后头小括号

3
00:01:15,776 --> 00:01:21,920
也就是也就是参数列的后头大括号也就是函数本体的前头这个

4
00:01:22,176 --> 00:01:28,320
我的位置上面现在我们就再一次再一次再来看一看这

5
00:01:28,576 --> 00:01:32,928
处于这个位置的constant

6
00:01:33,184 --> 00:01:34,464
好

7
00:01:34,720 --> 00:01:40,864
我要用这一张图片更详细的来说明这个事情这个COS

8
00:01:41,120 --> 00:01:47,264
如果家在刚刚所说的那个位置上面一直是要描述的告诉编译器

9
00:01:47,520 --> 00:01:53,664
我的意图是什么呢我的意图是要修饰这个程

10
00:01:53,920 --> 00:01:54,944
成员函数

11
00:01:55,456 --> 00:02:01,600
那个console怎么样放在这个位置只能放在成员函数的后头

12
00:02:01,856 --> 00:02:07,232
一般的全局函数是不能在这个位置放康熙的不可以

13
00:02:07,744 --> 00:02:13,888
好了放在那个人意思是告诉编译器我这个成员函数

14
00:02:14,912 --> 00:02:16,192
不打算

15
00:02:16,448 --> 00:02:21,824
不打算改变Class data数据

16
00:02:22,080 --> 00:02:27,200
一般来讲成员函数就是要去操作这些给他

17
00:02:27,456 --> 00:02:32,576
但我现在告诉边休我我*作可以可是我可能只是

18
00:02:33,600 --> 00:02:35,136
我不会去改

19
00:02:35,392 --> 00:02:41,536
这就是我的意图告诉编译器如果我没有家康斯坦的那那就是说

20
00:02:41,792 --> 00:02:44,096
说我可能会改这些数据

21
00:02:45,376 --> 00:02:51,520
给我讲了这个之后编译器你请你帮我帮我把观看看我有没有违法

22
00:02:51,776 --> 00:02:54,080
我的意图

23
00:02:54,336 --> 00:02:59,968
所以我们现在要用这一个表

24
00:03:00,480 --> 00:03:06,112
这种交互关系来为大家

25
00:03:06,368 --> 00:03:12,512
阐明胶带胶带什么事呢就是对象调用函数的是

26
00:03:14,304 --> 00:03:20,448
对象可能是康生也可能不是const函数我现在讲的单数就是成员还是

27
00:03:20,704 --> 00:03:21,472
函数

28
00:03:21,728 --> 00:03:25,312
给我刚提过这个坑只能加的成员函数成长

29
00:03:25,568 --> 00:03:29,664
这个成员函数可能是const你或者不是康是谁

30
00:03:29,920 --> 00:03:36,064
这就有四种意义了他们之间的交互制作用是什么关系

31
00:03:36,320 --> 00:03:39,392
在

32
00:03:40,160 --> 00:03:46,304
不知道你在高中的时候啊你上物理商务旅客因为碰到这种

33
00:03:46,560 --> 00:03:48,096
王雪就是他

34
00:03:48,352 --> 00:03:51,168
他所有一切公司他多重

35
00:03:51,680 --> 00:03:54,240
牛顿三大运动定律推导气

36
00:03:54,752 --> 00:03:57,824
这种同学很厉害他可能考试

37
00:03:58,336 --> 00:04:03,200
不会很厉害因为它推导要慢一点我们用贝的快一点

38
00:04:03,456 --> 00:04:05,760
不少同学都是实力最好的

39
00:04:07,040 --> 00:04:08,320
最令人佩服的

40
00:04:08,576 --> 00:04:14,720
我现在要谈这个事情是什么cplusplus里面的很多的规则其实都是只要你

41
00:04:14,976 --> 00:04:21,119
理解它内部的语言里的都不用被不理解自己原理之前那可能必须用背的

42
00:04:21,375 --> 00:04:24,703
被子又容易忘也不知道真正的意义是什么

43
00:04:25,983 --> 00:04:32,127
想现在要他再看向我们在Python已经谈过了

44
00:04:32,383 --> 00:04:33,919
静态static

45
00:04:34,175 --> 00:04:40,319
要不要加加了以后谁可以调用谁谁不能这样说这些东西都是他有他背后的

46
00:04:41,087 --> 00:04:44,159
比较底层的基础11弄懂了就

47
00:04:44,927 --> 00:04:51,071
不用废旧完全整理下来然后多用几次你也就自然而然地联妄想王

48
00:04:51,327 --> 00:04:52,863
忘不掉

49
00:04:55,167 --> 00:04:57,983
好现在来看这个

50
00:04:58,495 --> 00:05:00,287
一般的Object

51
00:05:00,799 --> 00:05:01,823
意思是

52
00:05:02,079 --> 00:05:03,615
我的data可以改变

53
00:05:05,919 --> 00:05:06,687
这个呢

54
00:05:07,199 --> 00:05:10,783
常量的often意思是data不可以改变

55
00:05:11,295 --> 00:05:13,087
这个大家很容易接受

56
00:05:14,111 --> 00:05:15,647
这个

57
00:05:15,903 --> 00:05:18,719
通过对象来调用函数

58
00:05:19,487 --> 00:05:21,023
函数也有两种

59
00:05:22,303 --> 00:05:28,191
一般没有加康省的哪一种意思是我可能会改变对他

60
00:05:28,447 --> 00:05:30,751
我不保证不改变对它

61
00:05:32,799 --> 00:05:38,943
如果我家的康意思是我我作为一个设计者我这个还是

62
00:05:39,199 --> 00:05:41,247
函数保证不改它

63
00:05:41,503 --> 00:05:43,807
甲亢盛的意思是这样

64
00:05:45,599 --> 00:05:51,743
他们的意义都明确了之后我们现在看看通过对象调用函数到底

65
00:05:51,999 --> 00:05:54,559
谁可以跟谁谁不能调用谁呢

66
00:05:55,839 --> 00:05:56,863
一个一个看

67
00:05:57,375 --> 00:06:00,191
这一个数数据不可以改变

68
00:06:01,471 --> 00:06:05,567
它调用这个函数这个函数说我保证不感数据

69
00:06:06,591 --> 00:06:07,615
问何亚

70
00:06:09,151 --> 00:06:11,711
心意相通所以这个打勾

71
00:06:14,015 --> 00:06:16,063
就按这种方式来进行

72
00:06:17,855 --> 00:06:18,623
我们看这一个

73
00:06:19,903 --> 00:06:22,719
他的意思是我的数据可改变

74
00:06:24,255 --> 00:06:28,095
调用这个函数说我函数保证不改数据

75
00:06:29,631 --> 00:06:30,399
可

76
00:06:34,239 --> 00:06:35,007
这个呢

77
00:06:36,031 --> 00:06:37,823
我的数据是可以改变的

78
00:06:38,591 --> 00:06:42,175
我在用这个函数呢它有可能改变数据

79
00:06:47,295 --> 00:06:48,063
这个

80
00:06:48,831 --> 00:06:50,879
我的数据是不能改变的

81
00:06:52,415 --> 00:06:55,231
我调用这个函数去可能改变我的数据

82
00:06:55,487 --> 00:06:56,511
我这不行

83
00:06:57,535 --> 00:06:58,559
在这个打叉

84
00:07:00,607 --> 00:07:02,655
我们就知道了

85
00:07:03,423 --> 00:07:04,959
由于刚刚的分析

86
00:07:05,727 --> 00:07:07,775
这一条路线是不行的

87
00:07:08,031 --> 00:07:11,871
什么路线这个这种对象调用这种函数

88
00:07:14,431 --> 00:07:15,711
今后

89
00:07:16,223 --> 00:07:17,759
我们再想大constant

90
00:07:18,015 --> 00:07:19,807
放在函数后头的时候

91
00:07:20,063 --> 00:07:22,623
只要你能够联想起这张表

92
00:07:22,879 --> 00:07:26,207
联想其实是主要呈现的意义

93
00:07:26,463 --> 00:07:28,255
你很快就

94
00:07:28,511 --> 00:07:30,047
能够有所反应

95
00:07:30,815 --> 00:07:32,095
改不改

96
00:07:34,399 --> 00:07:36,447
这个打叉

97
00:07:36,703 --> 00:07:41,055
这条路线很常见吗用这个调用这个很常见吗

98
00:07:41,311 --> 00:07:42,591
很重要吗

99
00:07:44,895 --> 00:07:46,431
来看这两行代码

100
00:07:48,735 --> 00:07:52,319
我现在假设我设计了一个trip

101
00:07:53,087 --> 00:07:53,855
字符串

102
00:07:55,647 --> 00:07:57,439
我里面有个函数叫print

103
00:07:58,975 --> 00:08:00,511
Freenas是打印了

104
00:08:01,023 --> 00:08:02,815
把字符串打印出来

105
00:08:03,327 --> 00:08:03,839
书

106
00:08:04,095 --> 00:08:04,863
复出

107
00:08:06,143 --> 00:08:09,727
输出这个动作你觉得我需要改变内容吗

108
00:08:10,751 --> 00:08:12,031
当然不必

109
00:08:13,823 --> 00:08:16,383
如果先前没有注意这个问题的话

110
00:08:16,895 --> 00:08:18,687
这种情况的话我们

111
00:08:19,199 --> 00:08:23,295
一些初学者是不管什么函数他都不加看

112
00:08:24,319 --> 00:08:28,927
好我要这里的假设将他忘了加他没有加他不知道要节

113
00:08:30,975 --> 00:08:32,255
于是

114
00:08:33,791 --> 00:08:36,607
我是设计这个字符串的人呢

115
00:08:37,119 --> 00:08:39,679
我由于经验不够我们一家康sir

116
00:08:41,215 --> 00:08:47,359
那你把他拿去用吧那可能是买来买我的或者是你是另外一个部门的

117
00:08:47,615 --> 00:08:49,919
用了我这个水

118
00:08:50,687 --> 00:08:52,479
你是这样这两行这样用

119
00:08:54,015 --> 00:08:56,063
在你的想法就是对的

120
00:08:56,319 --> 00:09:00,927
常量字符串把它打印出来就什么错呢

121
00:09:02,463 --> 00:09:04,767
但编译到第2行的时候

122
00:09:06,303 --> 00:09:07,583
走的就是这条路线

123
00:09:10,399 --> 00:09:12,191
常量对象

124
00:09:12,959 --> 00:09:15,775
调用非常量函数

125
00:09:16,287 --> 00:09:21,919
常量对象调用非常量数

126
00:09:22,175 --> 00:09:27,039
就是这个啦不可以的你是编译器的这个报错

127
00:09:30,623 --> 00:09:32,927
1178做算是幸运的了

128
00:09:34,207 --> 00:09:37,279
为了解这种错误信息不能够抓出来了

129
00:09:37,791 --> 00:09:39,071
子幸运的

130
00:09:39,327 --> 00:09:45,471
但是作为你你是我的客户我这是我设计的那么你买了我的东西

131
00:09:45,727 --> 00:09:50,335
却设计不良定义不通过你当然会责骂我

132
00:09:51,359 --> 00:09:52,639
设计的不好

133
00:09:54,175 --> 00:09:58,015
我怎么会设计不好呢就是因为该加const

134
00:09:58,271 --> 00:10:00,319
Print应该加constant

135
00:10:00,575 --> 00:10:02,623
却没有家

136
00:10:02,879 --> 00:10:03,903
却没有家

137
00:10:06,975 --> 00:10:09,791
所以这些事情至关重要

138
00:10:10,559 --> 00:10:14,911
也是我们在像在学校里面教课程

139
00:10:15,167 --> 00:10:18,239
常常会同学们理解给一些

140
00:10:18,751 --> 00:10:23,871
我住的很想很想听他拉上看看我会关注某几个点

141
00:10:24,127 --> 00:10:30,271
这样就可以判断你设计你的受的训练不够扎实这个都是我很长

142
00:10:30,527 --> 00:10:32,063
常去看的一个点

143
00:10:32,319 --> 00:10:33,855
有没有价值的

144
00:10:36,415 --> 00:10:40,767
那么我们在设计一个类的Class的时候

145
00:10:41,279 --> 00:10:47,423
我们开始构思他的接口这个类应该具备10个函数这四个函数叫什么

146
00:10:47,679 --> 00:10:53,823
怎么名字当我们在想这些事情的时候我们再想这个函数的名称的时候我们其实已经

147
00:10:54,079 --> 00:10:54,591
知道了

148
00:10:55,103 --> 00:10:56,639
他要不要加const

149
00:10:58,431 --> 00:11:04,575
因为这名称代表他的动作你虽然还没有实现出来那个动作会不会改数据

150
00:11:05,599 --> 00:11:06,623
你就明白了

151
00:11:08,927 --> 00:11:11,231
最很早的时间点你就可以

152
00:11:11,743 --> 00:11:13,535
判断要不要价格

153
00:11:15,583 --> 00:11:18,911
不需要落实现的后来发现要加

154
00:11:19,167 --> 00:11:20,191
Kiehl's

155
00:11:20,447 --> 00:11:21,727
早就可以知道

156
00:11:25,055 --> 00:11:25,567
好

157
00:11:28,383 --> 00:11:30,687
我说这段话

158
00:11:31,455 --> 00:11:32,735
其实我刚才已经说过了

159
00:11:32,991 --> 00:11:35,039
这是针对上面这两行

160
00:11:37,343 --> 00:11:38,623
如果没有做

161
00:11:38,879 --> 00:11:40,927
正确的行为会报错

162
00:11:45,279 --> 00:11:47,583
现在我再来谈另外一种情况

163
00:11:48,351 --> 00:11:50,911
跟这个差不多但是形式上是这样

164
00:11:52,703 --> 00:11:54,751
左手边这边有一段代码

165
00:11:55,007 --> 00:11:56,287
这是一个结论

166
00:11:57,311 --> 00:11:58,335
摘录

167
00:11:59,871 --> 00:12:02,175
这段代码上面告诉你了

168
00:12:03,711 --> 00:12:08,063
这是Backstreet里头的两个成员函数

169
00:12:08,831 --> 00:12:09,343
这个

170
00:12:09,599 --> 00:12:12,159
标准库里的这个Backstreet

171
00:12:13,951 --> 00:12:18,047
就是其实他会被他的机会换成一个名称

172
00:12:18,559 --> 00:12:23,423
什么名称那就是我们常常在用的标准库的字符串

173
00:12:23,679 --> 00:12:24,703
Train

174
00:12:25,215 --> 00:12:28,799
你在用的字符串就是在用这个

175
00:12:29,823 --> 00:12:34,431
这里头有两个函数是同名

176
00:12:34,943 --> 00:12:39,551
他是一个操作操作不成反中括号的

177
00:12:39,807 --> 00:12:40,319
操作符

178
00:12:40,831 --> 00:12:43,391
字符串的中括号做什么事情

179
00:12:43,903 --> 00:12:45,951
中括号里面你要放一个索引

180
00:12:46,207 --> 00:12:46,975
N

181
00:12:47,231 --> 00:12:49,535
表示你要去住的N个字符出来

182
00:12:51,071 --> 00:12:52,351
动作

183
00:12:52,607 --> 00:12:55,423
他设计的两个版本

184
00:12:57,471 --> 00:12:59,775
其中一个由康是一个没有

185
00:13:02,847 --> 00:13:06,175
他的written菜和返回类型不相同

186
00:13:07,967 --> 00:13:08,479
好

187
00:13:08,735 --> 00:13:11,551
这两个东西能不能并存呢

188
00:13:13,855 --> 00:13:19,999
现在证据打出来给你看他们是并存同时存在没有做所以他们是函数的

189
00:13:20,255 --> 00:13:21,279
重载

190
00:13:21,791 --> 00:13:26,655
讨论函数的重载是不必管它

191
00:13:27,935 --> 00:13:31,007
我们只关于天才宝之后的那一长串

192
00:13:31,263 --> 00:13:35,615
但是要签名一个函数的签名

193
00:13:36,127 --> 00:13:38,687
这两个签名相不相同啊

194
00:13:39,711 --> 00:13:41,503
你可能一下子回答不了的

195
00:13:42,015 --> 00:13:48,159
其实我的潜台词就是要问那你加和不加康等算不算

196
00:13:48,415 --> 00:13:49,951
签名的一部分

197
00:13:51,999 --> 00:13:53,791
血糖算一部分

198
00:13:54,559 --> 00:13:59,167
由于算一部分所以上面这个签名的下面这个签名才会不一样

199
00:13:59,935 --> 00:14:01,471
我说话其他都一样啊

200
00:14:04,799 --> 00:14:08,383
所以当时的质数1000名的一部分

201
00:14:11,455 --> 00:14:14,527
这为什么要这里要两个

202
00:14:14,783 --> 00:14:18,623
设计这两个函数出来呢

203
00:14:21,951 --> 00:14:22,975
我们想一想

204
00:14:23,999 --> 00:14:28,095
其实如果没有告诉你他的底部的一些原因你是想不出来的

205
00:14:29,375 --> 00:14:30,399
我现在告诉你

206
00:14:31,935 --> 00:14:34,495
我们所使用的标准库的字符串

207
00:14:34,751 --> 00:14:35,775
他是一个

208
00:14:36,287 --> 00:14:39,615
Reference compass技巧做出来

209
00:14:40,383 --> 00:14:46,527
Reference Counting直接翻译就是引用计数法会引用格式引用

210
00:14:46,783 --> 00:14:50,623
计量等等也就是说它可以被共享

211
00:14:51,647 --> 00:14:53,183
可以如果你有

212
00:14:53,439 --> 00:14:58,303
一个字符串然后再拷贝一份在拷贝一份在拷贝一份就有四个

213
00:14:58,815 --> 00:15:02,655
这四个字我说其实是共享同一个内容

214
00:15:03,679 --> 00:15:08,543
这个共享这个动作属于设计模式的一部分我们现在不去谈它

215
00:15:10,079 --> 00:15:12,127
总之他可以共享

216
00:15:14,175 --> 00:15:16,735
好他可以共享

217
00:15:17,759 --> 00:15:19,807
希望你马上联想一件事情

218
00:15:21,087 --> 00:15:23,647
万一中间有一个人变化

219
00:15:23,903 --> 00:15:25,439
还要改内容

220
00:15:26,463 --> 00:15:30,303
这这个人一改革改影响的其他的半个

221
00:15:36,959 --> 00:15:43,103
所以当我们在设计共享这种事的时候一定要去考虑数据变化怎么办

222
00:15:45,151 --> 00:15:46,431
怎么办呢

223
00:15:47,967 --> 00:15:49,759
这单独拷贝一份让你改

224
00:15:50,015 --> 00:15:53,599
24个人共享现在ADC的现在

225
00:15:53,855 --> 00:15:55,391
A想要改内容

226
00:15:56,159 --> 00:15:59,999
再去上课不要共享的单独拷贝一份让H改

227
00:16:00,255 --> 00:16:02,303
另外的BCD共享

228
00:16:02,559 --> 00:16:03,583
原来的东西

229
00:16:06,399 --> 00:16:10,495
字符串要怎么会这么干就是这么做的

230
00:16:12,543 --> 00:16:13,311
现在

231
00:16:14,591 --> 00:16:16,895
什么时候会发生血的动作

232
00:16:17,919 --> 00:16:19,199
如何写

233
00:16:20,991 --> 00:16:25,087
可能有很多的动作要看字符串的开放了哪些函数

234
00:16:27,391 --> 00:16:30,207
而这个中括号就有可能

235
00:16:30,463 --> 00:16:31,999
用来洗

236
00:16:33,791 --> 00:16:39,679
比如说我现在有口音我用我用口语来来写代码我说字符串s

237
00:16:40,191 --> 00:16:46,335
S中括号如就是要取出第5个字符哦S中括号五

238
00:16:46,591 --> 00:16:48,383
Sn等于

239
00:16:48,895 --> 00:16:51,455
等于de等于什么等于一个

240
00:16:52,223 --> 00:16:53,759
Ajax

241
00:16:55,551 --> 00:16:59,903
那就是把a要复制到第5个字母上面

242
00:17:00,927 --> 00:17:02,207
修改内容吗

243
00:17:06,047 --> 00:17:12,191
所以我们在谈什么我们在谈这两个函数就有可能被拿来

244
00:17:12,447 --> 00:17:15,263
使用的拿来改变数据

245
00:17:17,567 --> 00:17:23,711
因此在这里头必须做copy-on-write

246
00:17:23,967 --> 00:17:28,063
这个动作这个很有名的一个术语c o w

247
00:17:29,087 --> 00:17:30,879
Copy on write

248
00:17:34,463 --> 00:17:35,487
这个地方

249
00:17:35,743 --> 00:17:37,023
按理说

250
00:17:37,279 --> 00:17:38,047
这里面

251
00:17:39,327 --> 00:17:44,959
就是必须去做咖啡以外的考虑以及行为

252
00:17:46,751 --> 00:17:49,311
当然如果没有共享就不必copy-on-write

253
00:17:49,567 --> 00:17:55,199
也许这个字符串就是91在用只有a

254
00:17:59,807 --> 00:18:00,319
好

255
00:18:00,831 --> 00:18:02,879
现在想想看这种情况啊

256
00:18:03,391 --> 00:18:07,487
如果中括号调用中括号的人

257
00:18:07,743 --> 00:18:10,815
是一个常量字符串

258
00:18:13,119 --> 00:18:15,167
常量字符串

259
00:18:15,935 --> 00:18:17,727
他不可能被改内容

260
00:18:19,519 --> 00:18:23,871
所以常量字符串来调用中括号

261
00:18:25,151 --> 00:18:28,735
绝对不必做copy-on-write

262
00:18:31,295 --> 00:18:32,063
有灾

263
00:18:33,599 --> 00:18:39,743
常量字符串即使有五个人在共享同一个八个人在共享同一个常量

264
00:18:39,999 --> 00:18:40,767
字符串

265
00:18:43,583 --> 00:18:47,167
当其中的一个人一个一个字符串调用中括号

266
00:18:48,191 --> 00:18:53,823
也是不可能改内容的所以指不必不必考虑copy-on-write

267
00:18:56,639 --> 00:19:02,783
那这件事情要怎么分开来怎么区分中括号是给常量字符串调用

268
00:19:03,039 --> 00:19:05,855
用或者是给非常量字符串调用

269
00:19:06,367 --> 00:19:08,927
必须首先区分开来

270
00:19:09,439 --> 00:19:15,583
我们才能够写出两个版本然后其中一个不考虑copyright一个必须考

271
00:19:15,839 --> 00:19:16,351
考虑

272
00:19:21,215 --> 00:19:27,359
如果语言能够让我们写出来把这两个分开来那就太好了就比较

273
00:19:27,615 --> 00:19:28,639
比较好

274
00:19:29,919 --> 00:19:36,063
因为这边不必考虑咖啡养外的特效率就高了解起来也会比较近

275
00:19:36,319 --> 00:19:38,623
天减小速度也比较快

276
00:19:42,719 --> 00:19:44,511
你该怎么样去区分

277
00:19:45,023 --> 00:19:50,655
他们是被什么样的对象来调用的常量的对象还是非常亮的对象呢

278
00:19:51,935 --> 00:19:53,983
再回到这个表了

279
00:19:55,775 --> 00:19:59,615
这里面其中一个加的康

280
00:20:00,639 --> 00:20:03,967
所以就是这种函数了这种函数

281
00:20:04,479 --> 00:20:07,039
另外一个不加就是这种函数

282
00:20:08,575 --> 00:20:09,599
这两个数

283
00:20:13,183 --> 00:20:19,327
我们希望气氛的是常量对象希望让他知道这个

284
00:20:22,143 --> 00:20:23,423
现在这两个函数

285
00:20:25,215 --> 00:20:28,287
好常量对象可以调用它

286
00:20:29,823 --> 00:20:30,847
不能这样他

287
00:20:31,871 --> 00:20:32,639
那太好了

288
00:20:32,895 --> 00:20:34,943
它只能调用它啦

289
00:20:35,199 --> 00:20:37,759
它只能调用它

290
00:20:38,015 --> 00:20:39,295
所以

291
00:20:39,551 --> 00:20:42,623
这个就是这个了

292
00:20:43,903 --> 00:20:46,463
所以这个不必考虑卡地亚

293
00:20:47,743 --> 00:20:49,279
因为他

294
00:20:49,535 --> 00:20:51,327
Stata调用

295
00:20:55,423 --> 00:20:56,447
而这一个呢

296
00:20:56,959 --> 00:20:57,727
这个

297
00:20:59,007 --> 00:21:00,287
这个是谁调用

298
00:21:01,311 --> 00:21:03,103
是非常量去调用

299
00:21:05,919 --> 00:21:07,967
所以他必须考虑卡地亚

300
00:21:11,039 --> 00:21:12,063
将就分出来了

301
00:21:15,903 --> 00:21:19,232
如果你够仔细你会抓到我刚刚的一个

302
00:21:19,744 --> 00:21:20,768
货站

303
00:21:22,816 --> 00:21:23,584
那就是

304
00:21:24,352 --> 00:21:25,888
这一个函数

305
00:21:27,168 --> 00:21:28,448
这一个函数

306
00:21:29,472 --> 00:21:32,032
也可以被擦掉用呀

307
00:21:33,824 --> 00:21:34,336
这个

308
00:21:34,848 --> 00:21:37,920
你看他调用餐也是可以的呀

309
00:21:39,456 --> 00:21:45,600
所以当你写出这一个帮我写出这一个函数的时候其实钓

310
00:21:45,856 --> 00:21:46,880
调用我的人

311
00:21:47,136 --> 00:21:49,952
我仍然不知道他是这种人还是

312
00:21:50,208 --> 00:21:50,976
这种人

313
00:21:51,232 --> 00:21:55,584
帮我写出这个函数的时候将两种人都可以调用

314
00:21:56,864 --> 00:21:57,632
打够了吗

315
00:22:01,728 --> 00:22:04,800
这样的话我不能够这么武断地说

316
00:22:05,056 --> 00:22:07,360
我不必考虑copyright

317
00:22:07,616 --> 00:22:12,224
我刚刚是我刚带着你是说这一个呢是被他调用的

318
00:22:12,992 --> 00:22:14,272
其实这个

319
00:22:14,528 --> 00:22:16,320
也可以被他来调用

320
00:22:21,440 --> 00:22:22,208
好

321
00:22:23,488 --> 00:22:29,632
在这一个表的这个规则这些打着一个打他他就打过这个规则规则之

322
00:22:29,888 --> 00:22:30,912
My

323
00:22:31,936 --> 00:22:33,984
C加加又有一条规则

324
00:22:34,240 --> 00:22:36,032
这是这个灰色

325
00:22:39,104 --> 00:22:45,248
当一个成员函数的这种版本和这种版本同时存在也就是说

326
00:22:45,504 --> 00:22:46,784
现在右手边这种败吗

327
00:22:49,600 --> 00:22:50,368
那么

328
00:22:50,880 --> 00:22:57,024
常量对象调用产量还是非常量对象只能只会

329
00:22:57,280 --> 00:22:59,072
要用非常量的版本

330
00:23:03,168 --> 00:23:03,680
所以

331
00:23:03,936 --> 00:23:05,728
那那那个问题就解决了

332
00:23:11,616 --> 00:23:13,152
你仔细的体会是3

333
00:23:13,408 --> 00:23:16,992
这三个好像我在想下去呢这个

334
00:23:17,248 --> 00:23:18,016
不容易

335
00:23:19,808 --> 00:23:25,952
这个语言都容易混淆了这个一下子要常量用飞翔亮所以

336
00:23:26,976 --> 00:23:31,328
刚刚你已经学会了这个表你认为是正确的之后

337
00:23:31,840 --> 00:23:35,424
再加上一条新规则就是这三行

338
00:23:35,680 --> 00:23:36,960
喂

339
00:23:37,472 --> 00:23:39,776
然后去对应到刚刚我说

340
00:23:40,288 --> 00:23:46,432
说什么我说因此这一个版本就非常安心的绝对是

341
00:23:46,688 --> 00:23:48,480
常量字符串的调用

342
00:23:49,504 --> 00:23:55,648
常量字符串绝对不会被感内容所以这里不必考虑copy-on-write

343
00:24:09,216 --> 00:24:11,520
肯定你需要停课下来好好思考

344
00:24:16,128 --> 00:24:19,968
能不能在这边的停下来了我要继续讲下去所以

345
00:24:21,248 --> 00:24:22,784
加不加const

346
00:24:23,040 --> 00:24:24,576
非常重要

347
00:24:26,368 --> 00:24:29,696
标准库是我们学习的一个很好的老师

348
00:24:30,208 --> 00:24:36,352
如果你打开标准户其实每个人手上都有头文件的标准库就是一种统一些头文件

349
00:24:36,608 --> 00:24:39,168
打开来看它的每一个class

350
00:24:39,936 --> 00:24:41,472
都有做这种考虑

351
00:24:41,728 --> 00:24:46,080
每个Class里面的成员函数都有要有的是常量也是非常亮

352
00:24:48,384 --> 00:24:50,688
而那个菜鸟级的

353
00:24:50,944 --> 00:24:57,088
一般新手啊他的Class打开来看一看华有没有家长是怎么查别的罪

354
00:25:00,160 --> 00:25:02,720
这是我补充的第1个

355
00:25:03,232 --> 00:25:04,000
启幕

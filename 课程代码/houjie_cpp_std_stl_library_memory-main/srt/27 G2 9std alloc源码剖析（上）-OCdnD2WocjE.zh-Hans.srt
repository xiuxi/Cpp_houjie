1
00:00:00,256 --> 00:00:06,400
我们开始来看

2
00:00:06,656 --> 00:00:12,800
很精彩的这个代码中共290号

3
00:00:13,056 --> 00:00:19,200
看大马人民护照一些但是

4
00:00:19,456 --> 00:00:25,600
我们可以欣赏到这个世界级的团队写这个代码他

5
00:00:25,856 --> 00:00:32,000
它的设计它怎么样切歌这个函数其实这很有趣

6
00:00:32,256 --> 00:00:38,400
只要你提及这里的精神这个都在上杭好所以很容易

7
00:00:38,656 --> 00:00:44,800
我也早有一些很好的断掉大家依然是空号这个你看这个话

8
00:00:45,056 --> 00:00:51,200
画面已经满满当当所以我把QQ号我都舍不得把它吧

9
00:00:51,456 --> 00:00:57,600
啊出来了在表空间其实它是一个连续的我们从这里开始就是的

10
00:00:57,856 --> 00:01:04,000
这个整个分配器中为二级

11
00:01:04,256 --> 00:01:10,400
第1集第1集做的事情其实是

12
00:01:10,656 --> 00:01:16,800
是在我们现在的石头里面他是minor次要的刚刚所讲的那些动作

13
00:01:17,056 --> 00:01:23,200
全部集中在第2集一家高级的那个低级做什么用呢

14
00:01:23,456 --> 00:01:29,600
27如果失败的话他没了失败的话他会问

15
00:01:29,856 --> 00:01:31,904
我刚刚的口头叙述是

16
00:01:32,160 --> 00:01:33,440
它调用

17
00:01:33,696 --> 00:01:39,840
失败失败就就完蛋了其时他失败会先来跑到第1集

18
00:01:40,096 --> 00:01:46,240
交给他再试一次第1集有什么能耐吗即使魔

19
00:01:46,496 --> 00:01:52,640
模拟我们在前面的一讲讲过的妞handler所以在这里面

20
00:01:52,896 --> 00:01:59,040
有一个六一个循环不断的去调用如果你有安插

21
00:01:59,296 --> 00:02:01,088
牛handler的话

22
00:02:01,600 --> 00:02:07,744
一只要做的事情他没法不是大罗天仙前面的二级失败他当然也

23
00:02:08,000 --> 00:02:14,144
失败但是他就是模拟妞hand了一再一再的给你机会

24
00:02:14,400 --> 00:02:20,544
那么何必去模拟那不是cplusplus就有了吗何必去模拟了

25
00:02:21,312 --> 00:02:26,688
所以这个大概是历史因素吧

26
00:02:26,944 --> 00:02:32,320
现在到了什么4.9就比较新的版本就不再有这一段

27
00:02:32,576 --> 00:02:34,624
第1次

28
00:02:35,648 --> 00:02:41,280
所以这一段现在打算跳过我后头会

29
00:02:41,536 --> 00:02:43,328
自抓住其中的一些

30
00:02:43,840 --> 00:02:46,656
语言设计上的一些值得关注的地方

31
00:02:47,168 --> 00:02:49,984
它本身的设计已经无关紧要了

32
00:02:50,240 --> 00:02:56,384
所以我们叫过290行一下就跳减掉多少那我下看这是

33
00:02:56,640 --> 00:03:02,272
以及剪掉73号到89号

34
00:03:03,040 --> 00:03:05,088
这是第1集到这里为止

35
00:03:05,344 --> 00:03:09,184
太好了290减掉89只剩200行左右了

36
00:03:09,440 --> 00:03:11,488
OK

37
00:03:14,048 --> 00:03:18,912
这个第1集应该是到对不起到上一页看看

38
00:03:19,424 --> 00:03:21,728
比起应该

39
00:03:25,056 --> 00:03:28,640
Class到这里40号但是他有一些函数是

40
00:03:28,896 --> 00:03:34,784
Scala Class在写所以是实行这边有分号往下这些

41
00:03:35,040 --> 00:03:40,672
你投的一些函数所以的确这整个第1集一直到89号

42
00:03:44,512 --> 00:03:46,048
对不起

43
00:03:48,096 --> 00:03:52,448
那么从77到89那是另外一个小东西

44
00:03:52,704 --> 00:03:55,264
一个换肤工程

45
00:03:55,776 --> 00:04:01,664
换什么东西要把第2集现在这样开始讲的二级分配器

46
00:04:01,920 --> 00:04:06,784
它的单位是字节的前面提过了

47
00:04:08,064 --> 00:04:11,392
他分配都是自己要把它转换成

48
00:04:11,904 --> 00:04:13,440
元素的个数

49
00:04:13,696 --> 00:04:15,488
元素为单位

50
00:04:15,744 --> 00:04:19,071
是一个很小的一个换成工程这个

51
00:04:19,583 --> 00:04:20,863
等一下再说

52
00:04:21,631 --> 00:04:24,447
所以我们现在常常进入第2集

53
00:04:25,727 --> 00:04:26,495
从

54
00:04:26,751 --> 00:04:28,031
194航开始

55
00:04:32,639 --> 00:04:33,151
好

56
00:04:33,407 --> 00:04:35,711
首先这里有三个

57
00:04:35,967 --> 00:04:36,735
常亮

58
00:04:38,271 --> 00:04:43,135
常量不是应该设计能constant什么什么都能懂

59
00:04:43,903 --> 00:04:45,695
这就是历史因素

60
00:04:46,463 --> 00:04:49,023
不用去理会他了反正这样也可以运作

61
00:04:49,535 --> 00:04:50,815
Generator

62
00:04:51,327 --> 00:04:52,095
枚举

63
00:04:52,863 --> 00:04:56,191
说她一个limate对其是吧

64
00:04:56,959 --> 00:04:59,007
刚刚已经提过了

65
00:04:59,263 --> 00:05:04,383
16条链表每一个人的责任区分是18为倍数

66
00:05:06,943 --> 00:05:13,087
MATLAB x最大可以满足多少的128这个东西过来

67
00:05:14,367 --> 00:05:15,135
这个呢

68
00:05:15,391 --> 00:05:18,719
3DS的个数number有几条

69
00:05:18,975 --> 00:05:21,791
128418这个128418

70
00:05:22,047 --> 00:05:22,815
16

71
00:05:23,583 --> 00:05:25,119
这些就是常量

72
00:05:27,935 --> 00:05:28,447
好

73
00:05:28,703 --> 00:05:30,495
这个第2集

74
00:05:30,751 --> 00:05:35,103
12级分配器从bb100航开始

75
00:05:35,359 --> 00:05:37,663
类的名称叫做一个

76
00:05:39,199 --> 00:05:43,807
而这个名称是这个模板呢这是一个模板

77
00:05:44,575 --> 00:05:45,855
后头

78
00:05:46,111 --> 00:05:49,951
最后一行我现在翻的比较快发后头去

79
00:05:50,463 --> 00:05:51,743
最后一行

80
00:05:52,255 --> 00:05:52,767
在

81
00:05:53,023 --> 00:05:54,303
290号

82
00:05:54,815 --> 00:05:56,095
他换了一个名称

83
00:05:57,631 --> 00:06:02,239
看看很长的那个default template换了一个名称叫a

84
00:06:03,007 --> 00:06:04,543
这就是我们要探讨的

85
00:06:07,359 --> 00:06:10,943
所以现在回到前面去看这个class

86
00:06:17,087 --> 00:06:18,367
100号

87
00:06:20,415 --> 00:06:22,463
这里头有两个参数

88
00:06:23,487 --> 00:06:25,023
上面注解告诉你

89
00:06:25,279 --> 00:06:26,815
这两个参数都没用

90
00:06:27,583 --> 00:06:30,143
第1个参数是跟线程有关

91
00:06:30,399 --> 00:06:33,471
把现场的部分拿掉了不然会干扰视线

92
00:06:35,775 --> 00:06:40,895
有关于分配的动作是原汁原味的都没有去动它

93
00:06:41,151 --> 00:06:44,479
那是其他的我拿掉了以方便我们来

94
00:06:44,735 --> 00:06:46,527
专注的学习分类器

95
00:06:47,295 --> 00:06:48,063
这个地方

96
00:06:48,319 --> 00:06:51,647
的参数没有用参数也没有用

97
00:06:52,671 --> 00:06:54,975
但是我仍然保留这个接口不要去动

98
00:06:56,511 --> 00:07:02,143
好的头做什么事呢其实它的结构非常的干净漂亮很容易学的

99
00:07:03,935 --> 00:07:05,215
M

100
00:07:05,471 --> 00:07:08,799
先设计这一个runnable这个还是

101
00:07:09,567 --> 00:07:10,591
刚刚提到

102
00:07:10,847 --> 00:07:15,199
在计算追加亮的时候总是会调用这个函数

103
00:07:15,711 --> 00:07:17,247
这还是做的事情是这样

104
00:07:18,527 --> 00:07:20,063
这样子很难看得懂啊

105
00:07:20,575 --> 00:07:22,367
我右边给了你一个例子

106
00:07:23,135 --> 00:07:26,719
你穿13件去会得到16这样你就知道了

107
00:07:26,975 --> 00:07:28,767
上调到8的备注

108
00:07:31,071 --> 00:07:34,399
其实也不能看懂的是我现在不去讲他是重点

109
00:07:34,911 --> 00:07:36,959
静下心来仔细看看就知道了

110
00:07:39,007 --> 00:07:41,055
这是一个单调的还是素

111
00:07:42,591 --> 00:07:43,359
接下来

112
00:07:44,127 --> 00:07:45,663
要设计这么一个

113
00:07:45,919 --> 00:07:49,759
嵌入式指针这个我们前面已经介绍过了

114
00:07:51,039 --> 00:07:51,551
载体

115
00:07:53,343 --> 00:07:55,135
下面是一个优点

116
00:07:55,647 --> 00:07:57,695
华盛顿就是上面这个东西

117
00:07:58,719 --> 00:08:00,511
我就是要利用这个东西

118
00:08:01,023 --> 00:08:04,095
也不是我是这个团队要利用这个东西呢

119
00:08:04,607 --> 00:08:05,631
去跨越

120
00:08:06,143 --> 00:08:06,911
这样子

121
00:08:07,167 --> 00:08:09,215
现在一个切割的状态

122
00:08:10,495 --> 00:08:13,567
一般我们会把这个指针命名为next

123
00:08:14,335 --> 00:08:15,103
这个尺寸

124
00:08:17,151 --> 00:08:18,431
一名为Master

125
00:08:18,687 --> 00:08:19,711
还挺好的

126
00:08:19,967 --> 00:08:23,295
他是这个这里的名字特别强调free distinct

127
00:08:27,647 --> 00:08:28,159
好

128
00:08:28,671 --> 00:08:29,695
那么由于

129
00:08:29,951 --> 00:08:36,095
我前面也提过自己的头本来是两个member两个成员其中一个根本用不到所以拿掉

130
00:08:36,351 --> 00:08:37,119
调整下一个

131
00:08:37,375 --> 00:08:40,447
既然是下一个是Union可以改为四川酒

132
00:08:40,703 --> 00:08:42,495
这样就好懂多了

133
00:08:46,847 --> 00:08:47,359
再往下

134
00:08:48,895 --> 00:08:49,663
我们要注意

135
00:08:49,919 --> 00:08:51,967
全部的data不是静态的

136
00:08:53,759 --> 00:08:56,063
全部的方式都是静态的

137
00:08:59,647 --> 00:09:04,511
可见这一个Class非常容易改成C语言

138
00:09:05,535 --> 00:09:11,167
他现在只是把一些静态的东西你想象是一些全局和萝卜的东西

139
00:09:11,423 --> 00:09:13,727
包装到一个类里头去

140
00:09:16,031 --> 00:09:17,055
我们后面会有

141
00:09:17,311 --> 00:09:23,455
一张投影片来检讨怎么样把它改成时间语言这是一个好东西怎么样改成日语

142
00:09:24,735 --> 00:09:25,759
非常简单

143
00:09:27,551 --> 00:09:28,575
现在来看

144
00:09:28,831 --> 00:09:30,879
这些数据你都有什么呢

145
00:09:31,647 --> 00:09:32,671
这是一个数

146
00:09:32,927 --> 00:09:33,951
素朴

147
00:09:34,463 --> 00:09:35,743
这是哪十六根

148
00:09:38,047 --> 00:09:40,863
我今天换成尽量华盛顿

149
00:09:41,119 --> 00:09:44,191
你就特别容易一下子就抓到

150
00:09:45,471 --> 00:09:45,983
观念

151
00:09:48,031 --> 00:09:49,055
是要跟尺寸

152
00:09:50,079 --> 00:09:51,359
这边有一个函数

153
00:09:52,127 --> 00:09:53,919
这个函数做什么事情

154
00:09:55,711 --> 00:09:56,735
看我右边的柱子

155
00:09:56,991 --> 00:09:58,271
我右边的举例

156
00:09:58,783 --> 00:10:04,159
你传给他吧得到就是你传给他16个到医生给他24到2

157
00:10:04,671 --> 00:10:06,207
20也是得到2

158
00:10:07,743 --> 00:10:13,887
在这个函数就是很方便的帮你计算出如果你要的是多大的一个区块它音

159
00:10:14,143 --> 00:10:16,447
应该有的几号链表

160
00:10:16,703 --> 00:10:17,983
它提供服务

161
00:10:19,263 --> 00:10:21,055
很容易设计的一个函数

162
00:10:23,103 --> 00:10:29,247
所以我如果要的区块和容器发出来要的是20这么大的话经过这里的运算应该有的分号

163
00:10:29,503 --> 00:10:33,599
好链表链表骑士给出去的每一块都是24

164
00:10:34,111 --> 00:10:35,391
上调

165
00:10:39,743 --> 00:10:40,511
还有什么呢

166
00:10:41,535 --> 00:10:43,071
我们先跳过这几个

167
00:10:43,839 --> 00:10:47,423
这个三个变量是两根指针

168
00:10:49,215 --> 00:10:50,751
就是用来指向

169
00:10:52,031 --> 00:10:52,799
上辈子

170
00:10:55,359 --> 00:10:58,943
你把想把哪里当三辈子你就把这两个指针指过去

171
00:11:00,991 --> 00:11:02,015
下面这个呢

172
00:11:02,527 --> 00:11:04,063
Heap size就是

173
00:11:04,319 --> 00:11:05,087
累计

174
00:11:05,343 --> 00:11:11,231
总量我们前头的电话里面不是一再的再关心到它的累计重量了

175
00:11:11,487 --> 00:11:13,791
因为这个总量会关系到

176
00:11:14,047 --> 00:11:14,815
追加量

177
00:11:16,351 --> 00:11:17,631
这个变数

178
00:11:19,679 --> 00:11:24,031
怎么刚刚跳过的有什么两个静态函数一个叫video

179
00:11:24,799 --> 00:11:25,823
充值

180
00:11:27,103 --> 00:11:28,639
我想找一只讲这个字眼

181
00:11:28,895 --> 00:11:31,711
链表哄者充值赞助

182
00:11:32,735 --> 00:11:34,271
充值的过程里头

183
00:11:34,527 --> 00:11:36,319
他想去分配一大块

184
00:11:37,087 --> 00:11:40,159
在内存管理里面有一个术语叫呛

185
00:11:40,671 --> 00:11:41,439
Trump

186
00:11:42,719 --> 00:11:47,839
这个唱个这个字以显示查不到的不过这个英文字典一直在变化现在也许查得到了

187
00:11:48,607 --> 00:11:51,679
英文是不断的在累积的一种语言

188
00:11:51,935 --> 00:11:53,727
反正在

189
00:11:53,983 --> 00:11:56,543
这种管理里面呛个就表示一大块

190
00:11:58,079 --> 00:12:00,895
一大块另外一个子也叫black

191
00:12:01,663 --> 00:12:03,967
97认为比较小块的东西

192
00:12:04,479 --> 00:12:09,087
说这个函数是什么枪口可以就是要一大块的意思

193
00:12:09,343 --> 00:12:12,159
这个函数是充值这是要一大块

194
00:12:12,927 --> 00:12:14,719
切得非常的干净漂亮

195
00:12:14,975 --> 00:12:17,279
怎么做呢现在还没有这是一个声明

196
00:12:20,095 --> 00:12:23,167
一下去还没玩的这个Class还没完

197
00:12:23,679 --> 00:12:24,447
下一页

198
00:12:24,703 --> 00:12:27,519
这个Class一直要到这个170行这里

199
00:12:29,567 --> 00:12:35,455
剩下的两个函数最重要的一个就是配一个就是

200
00:12:38,271 --> 00:12:39,295
我看他做什么事

201
00:12:42,111 --> 00:12:43,903
首先我们来认识一个

202
00:12:46,207 --> 00:12:48,767
让你停下来的地方最好

203
00:12:52,607 --> 00:12:54,655
这个发的头一般人很少用

204
00:12:55,167 --> 00:12:56,703
这跟多线程有关

205
00:12:57,983 --> 00:13:00,031
这个字眼就是容易

206
00:13:00,287 --> 00:13:01,311
挥发的

207
00:13:01,567 --> 00:13:03,871
好像久经比较容易挥发掉

208
00:13:05,663 --> 00:13:10,527
所以这个跟多线程有关而前面我已经提过了现成的部分我全部拿掉

209
00:13:11,295 --> 00:13:14,367
不过这里我没有拿到证只能保留因为不影响

210
00:13:15,903 --> 00:13:16,671
分米

211
00:13:17,183 --> 00:13:18,719
要去理解这一行

212
00:13:18,975 --> 00:13:20,255
你宝宝的头拿掉

213
00:13:21,023 --> 00:13:22,303
会变成什么呢

214
00:13:23,071 --> 00:13:25,631
你把它拿掉合并起来就是这个注解

215
00:13:27,167 --> 00:13:28,959
这是指针的指针

216
00:13:30,751 --> 00:13:35,103
哇听起来很可怕怎么跑出指针的指针其实没有什么你看这个图

217
00:13:36,639 --> 00:13:41,247
救我需要一根指针去指向这个16条链表的其中一个

218
00:13:42,783 --> 00:13:47,903
而这里面的元素是什么又是一根指针指向下面这个链表的7点

219
00:13:49,695 --> 00:13:52,511
所以我只蓝色的这个词过来的

220
00:13:53,023 --> 00:13:55,327
它的类型是指针的指针

221
00:13:56,095 --> 00:14:00,703
他想他他本身又是一根指针

222
00:14:00,959 --> 00:14:02,495
所以蓝色这个东西

223
00:14:02,751 --> 00:14:04,031
必须声明为这样

224
00:14:04,799 --> 00:14:05,823
慢慢体会吧

225
00:14:06,335 --> 00:14:07,103
我就讲到这里

226
00:14:10,943 --> 00:14:16,831
V8的头后面会常常出现八个操作把它拿掉有助于你理解

227
00:14:19,647 --> 00:14:20,927
好理投射进来

228
00:14:21,183 --> 00:14:21,951
做什么事呢

229
00:14:22,463 --> 00:14:24,255
判断如果n

230
00:14:24,511 --> 00:14:25,791
要的大小

231
00:14:26,559 --> 00:14:28,607
大于128的话

232
00:14:29,119 --> 00:14:30,399
那就是我不服务

233
00:14:31,679 --> 00:14:37,823
我不和我做什么事呢我交给第1集和第1集刚刚是跳过去的可是我有告诉你他的其实你

234
00:14:38,079 --> 00:14:39,359
这里头就是调用malloc

235
00:14:40,639 --> 00:14:46,015
我们最后面第2季讲完之后呢我会再到第1季去把一些关键点抓出来给你看

236
00:14:47,551 --> 00:14:51,135
所以他的一起去做的一集的名字叫这个

237
00:14:51,647 --> 00:14:53,951
它里头有一个函数则K的

238
00:14:54,463 --> 00:14:55,231
怎么去做

239
00:14:56,767 --> 00:14:57,535
做完

240
00:14:57,791 --> 00:14:58,559
当然

241
00:14:58,815 --> 00:15:01,375
在绝大部分情况下都是很成功了

242
00:15:01,887 --> 00:15:03,679
除非山穷水尽用风光

243
00:15:04,191 --> 00:15:05,471
说这边就结束了

244
00:15:09,823 --> 00:15:13,919
但是如果小于18小于等于把那就是该我来做了

245
00:15:15,199 --> 00:15:16,991
好我做的事情在这里

246
00:15:18,527 --> 00:15:22,367
首先判断它应该落在第几号链表

247
00:15:23,647 --> 00:15:28,767
这位在你当然已经需要停得下来好好地看看你手上的讲义

248
00:15:30,047 --> 00:15:36,191
当你在看讲义或者看停下来看看这个画面的时候一定不要忽略了我画的这些

249
00:15:36,447 --> 00:15:37,215
线条

250
00:15:37,727 --> 00:15:40,543
这些变量代表什么意思你要看

251
00:15:41,055 --> 00:15:46,175
不要硬看这个代码还花了30分钟之后一看啊原来图已经画好了

252
00:15:46,431 --> 00:15:47,967
这样太浪费时间

253
00:15:50,015 --> 00:15:56,159
所以这个地方反正我我用口语来告诉你做什么事就是侦测出应该

254
00:15:56,415 --> 00:15:59,487
邮递区号链表终于定位定出来了

255
00:16:00,511 --> 00:16:01,279
定出来了

256
00:16:01,791 --> 00:16:04,095
定出来之后去看看

257
00:16:04,863 --> 00:16:06,143
他是不是空

258
00:16:06,911 --> 00:16:07,935
没有判断

259
00:16:10,239 --> 00:16:13,823
如果不是空这边要等于零表示空吗

260
00:16:15,103 --> 00:16:17,151
那不是空的话就跑到下面来

261
00:16:17,663 --> 00:16:18,943
这边指针拉动

262
00:16:19,455 --> 00:16:23,295
什么意思啊现在这边有拉有一些

263
00:16:23,807 --> 00:16:24,319
聚会

264
00:16:25,343 --> 00:16:28,671
把第1个给出去把这个指针往下子

265
00:16:29,695 --> 00:16:30,463
这样的解释

266
00:16:31,231 --> 00:16:32,511
下面的动作

267
00:16:36,607 --> 00:16:40,191
可是如果链表不是Call而是空的话怎么办呢

268
00:16:40,447 --> 00:16:41,983
那就要充值

269
00:16:42,751 --> 00:16:44,799
所以这个电表是空

270
00:16:45,055 --> 00:16:47,615
就要去充值费

271
00:16:49,407 --> 00:16:54,527
充值要充每个单元是多少呢这个恩啊要啊

272
00:16:54,783 --> 00:16:56,063
小道

273
00:16:56,575 --> 00:16:57,855
发的边界

274
00:16:59,647 --> 00:17:01,439
Run up刚介绍过了

275
00:17:06,303 --> 00:17:08,607
3v3充值怎么样

276
00:17:08,863 --> 00:17:09,887
现在不管他

277
00:17:10,143 --> 00:17:12,191
那是经过她之后就充好了

278
00:17:12,703 --> 00:17:14,751
从好了之后拿第1个出去

279
00:17:15,007 --> 00:17:15,519
这个

280
00:17:15,775 --> 00:17:17,055
OK了就结束了

281
00:17:18,079 --> 00:17:19,359
非常干净漂亮

282
00:17:24,991 --> 00:17:27,551
在我们的重点剩下去看容易毕业是什么

283
00:17:28,319 --> 00:17:32,671
他是如何去充值的与我们刚刚在讲他的行为

284
00:17:32,927 --> 00:17:38,303
没事的我们会去理解到他应该去看看三倍匙可以切几个

285
00:17:39,071 --> 00:17:42,655
上辈子要是不够有没有碎片要去做处理

286
00:17:43,935 --> 00:17:44,959
当当当

287
00:17:50,335 --> 00:17:54,431
好他的兄弟这个还是我的兄弟做什么事呢

288
00:17:55,967 --> 00:17:56,991
回收

289
00:17:58,271 --> 00:17:59,807
他会说到一根指针

290
00:18:00,575 --> 00:18:01,855
我就把这个指针

291
00:18:02,367 --> 00:18:03,391
死神来了

292
00:18:03,903 --> 00:18:06,975
打打回收到单向链表来

293
00:18:07,999 --> 00:18:10,559
因为这个链表这个单向链表

294
00:18:10,815 --> 00:18:12,095
这里就是

295
00:18:13,375 --> 00:18:15,679
你现在有1块要还回来了

296
00:18:17,215 --> 00:18:19,263
这个指针大过去这边只是拿过来

297
00:18:19,775 --> 00:18:20,799
这里的动作

298
00:18:22,335 --> 00:18:24,639
结束了这就是回收这里

299
00:18:25,151 --> 00:18:26,943
指针怎么拉我们就不讲了

300
00:18:28,223 --> 00:18:30,015
不是我们

301
00:18:30,271 --> 00:18:32,319
你应该要具备这个观念

302
00:18:32,575 --> 00:18:35,135
自己这个基础然后你仔细的看这个代码

303
00:18:36,927 --> 00:18:39,231
拉动之前有一个判断

304
00:18:40,511 --> 00:18:44,351
这个是回收这边是给出去这边是收回来

305
00:18:44,863 --> 00:18:50,495
给出去的时候有判断你这个人是不是大1128回收的时候也要判断

306
00:18:51,519 --> 00:18:56,127
热回收的东西一定是要从这里给出去的然后回收这个才

307
00:18:56,639 --> 00:18:57,407
平安

308
00:18:59,199 --> 00:19:05,343
如果这个大医院发表是不是从我手上给出去是那老师给的那我这里也

309
00:19:05,599 --> 00:19:08,671
也不能够把那么燃的回收所以

310
00:19:08,927 --> 00:19:11,231
如果N大于128的话

311
00:19:11,743 --> 00:19:13,791
我们要调用第1集

312
00:19:14,559 --> 00:19:16,095
这边也是第1集

313
00:19:16,607 --> 00:19:18,655
我们要调一级分配去

314
00:19:19,167 --> 00:19:19,935
去回收

315
00:19:20,447 --> 00:19:21,471
不关我的事

316
00:19:22,751 --> 00:19:24,287
一起做什么事情呢

317
00:19:24,543 --> 00:19:30,175
这边第1集是用malloc所以这里的第1集就是用如意去回收

318
00:19:32,991 --> 00:19:34,527
谁叫郑氏的

319
00:19:35,039 --> 00:19:37,599
收回来之前要做这个检查

320
00:19:41,695 --> 00:19:47,839
好前面会有一些变量的声明也是一样如果你看的不是很清楚你就可以把巴了吧

321
00:19:48,863 --> 00:19:50,143
这样你就很清楚

322
00:19:51,167 --> 00:19:52,703
我没有住家提醒你

323
00:19:52,959 --> 00:19:54,495
其实是指针的指针

324
00:19:58,591 --> 00:19:59,871
这边是

325
00:20:01,407 --> 00:20:03,199
分配这里是回收

326
00:20:06,015 --> 00:20:07,807
我们剩下fail

327
00:20:09,087 --> 00:20:09,599
没看

328
00:20:11,647 --> 00:20:17,791
这个分配器另外一个函数叫如意OK这边游戏

329
00:20:18,047 --> 00:20:24,191
我就不把它列出来了因为这已经不是重点了我们重点是这两个

330
00:20:24,447 --> 00:20:30,591
看到这个地方呢

331
00:20:30,847 --> 00:20:36,991
你如果平和下来仔细想你也可能会看我一样想起点个

332
00:20:37,247 --> 00:20:43,391
这个问题就是我这里怎么没有看到

333
00:20:43,647 --> 00:20:49,791
还给操作系统

334
00:20:50,047 --> 00:20:56,191
当初我拿的时候如果没有内容我就要充值

335
00:20:56,447 --> 00:21:02,591
充值就跟赞赞赞备尺寸拿赞被子没有

336
00:21:02,847 --> 00:21:08,991
没有的话会用malloc去哪啊去可是这个地方我怎么没看到

337
00:21:09,247 --> 00:21:15,391
3D动作了按理说应该要对应了没有

338
00:21:15,647 --> 00:21:21,792
有辐射那么就表示这个链表将会成长到一个高

339
00:21:22,048 --> 00:21:28,192
高宏如果你的程序曾经用过一千万个

340
00:21:28,448 --> 00:21:34,592
元素最高曾经同时拥有1000万个元素

341
00:21:34,848 --> 00:21:40,992
然后你是犯了900万个这900万个全部落到

342
00:21:41,248 --> 00:21:47,392
他们没有办法去检测合并然后还给操作系统因为那个

343
00:21:47,648 --> 00:21:53,792
这个非常困难我们前面提过了这个链表很长你根本不知道怎么去

344
00:21:54,048 --> 00:22:00,192
判断哪些是连续的一定要连续才能还给操作系统

345
00:22:00,448 --> 00:22:06,592
说他没有吃饭这个不算内存泄露

346
00:22:06,848 --> 00:22:12,992
不断在我们只能说它非常的霸道他曾经

347
00:22:13,248 --> 00:22:19,392
经拥有过的就全部在他手中他再也不还给操作系统

348
00:22:19,648 --> 00:22:25,792
这个算不算一个缺点那要看你从什么角度来看

349
00:22:26,048 --> 00:22:32,192
取决于你如果你从你个人的角度你的城

350
00:22:32,448 --> 00:22:38,592
程序的角度来看那没有什么坏处反正他抓到手上抓到全部为你

351
00:22:38,848 --> 00:22:44,992
服务你下次再要他要给你了但是

352
00:22:45,248 --> 00:22:51,392
如果你从多任务包的testcase的角度操作系统multitasking这台电脑不

353
00:22:51,648 --> 00:22:57,792
不是指望你这个程序可能你自己都作为一个中端客户你做同时再用其他的程序

354
00:22:58,048 --> 00:23:04,192
所有的资源费你这个东西抓住那就不好了

355
00:23:04,448 --> 00:23:10,592
这是一个值得讨论的话题这也可以说是他的一个

356
00:23:10,848 --> 00:23:16,992
一个一个争议点但是他没有看这段代码没有

357
00:23:17,248 --> 00:23:23,392
经过这个讨论之前没有人知道这个事情没有人知道原来在以前在用革命c

358
00:23:23,648 --> 00:23:29,792
分配器的时候据说她非常的棒

359
00:23:30,048 --> 00:23:36,192
但是竟然会发生损失值得争议我们留在后

360
00:23:36,448 --> 00:23:42,592
后面的讨论继续往下看我说这一段代码还可能出

361
00:23:42,848 --> 00:23:48,992
出现两个疑惑的一个刚好通过了没有free第2个疑惑就是

362
00:23:49,248 --> 00:23:55,392
这里面没有检查任何一个检查机制在谈这个

363
00:23:55,648 --> 00:24:01,792
婚床件来检查什么呢除了这个检查这个大小

364
00:24:02,048 --> 00:24:08,192
12月8之外还应该去检查这个指针到底是

365
00:24:08,448 --> 00:24:14,592
是不是属于属于这个系统给出去

366
00:24:14,848 --> 00:24:20,992
我这个话的意思是如果我现在看这个状况我彻底了解了

367
00:24:21,248 --> 00:24:27,392
好我用malloc去得到一根尺寸一块内存就有了一个指针

368
00:24:27,648 --> 00:24:33,792
我把这个指针还给他

369
00:24:34,048 --> 00:24:40,192
他没有去检查这个指针不是从这个系统来的他

370
00:24:40,448 --> 00:24:46,592
他还是把他收回去了这句话并非当初从这里取得的

371
00:24:46,848 --> 00:24:52,992
仍然可以定我现在还给他的前头带着

372
00:24:53,248 --> 00:24:59,392
他的cookie但是这个不影响你可以想想看这个需要你时间去思考画画图

373
00:24:59,648 --> 00:25:05,792
回收就是把指针拉过来这边他过去所以前头戴着公平

374
00:25:06,048 --> 00:25:12,192
其实不影响但是如果皮所指的大小不是八的倍数的话就可能

375
00:25:12,448 --> 00:25:18,592
不好了这个都要你花时间小

376
00:25:18,848 --> 00:25:24,992
我想过之后的结论是这样

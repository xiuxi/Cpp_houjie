1
00:00:06,656 --> 00:00:07,424
大主题

2
00:00:09,472 --> 00:00:11,264
我要弹幕

3
00:00:12,544 --> 00:00:13,568
以及他对

4
00:00:14,336 --> 00:00:15,616
容器的影响

5
00:00:16,640 --> 00:00:19,968
也是C9家2.0之后的一个

6
00:00:20,224 --> 00:00:22,528
加进来的一个语法

7
00:00:23,808 --> 00:00:27,392
他这个语法的部分呢我在这边我们可以看到一点点

8
00:00:28,416 --> 00:00:32,256
最详细的部分也是要在另外一门课

9
00:00:32,512 --> 00:00:36,864
现在2.0或者叫亲叫家2011怎么克制旅行

10
00:00:37,120 --> 00:00:39,424
这个地方你可以先去认识一下

11
00:00:39,680 --> 00:00:40,704
而我这里

12
00:00:41,216 --> 00:00:43,264
其实主要重点是告诉各位

13
00:00:44,800 --> 00:00:45,312
你

14
00:00:45,824 --> 00:00:48,128
放到容器里面的元素

15
00:00:48,640 --> 00:00:50,688
这个元素的类型

16
00:00:52,736 --> 00:00:55,040
加不加莫夫这个功能

17
00:00:55,296 --> 00:00:56,064
会带来

18
00:00:56,320 --> 00:00:56,832
极大的

19
00:00:57,088 --> 00:00:58,112
效率低下

20
00:00:58,880 --> 00:01:01,184
假货不佳

21
00:01:02,208 --> 00:01:05,024
我现在会有连续好几张同一点

22
00:01:05,280 --> 00:01:06,048
画面

23
00:01:06,816 --> 00:01:08,096
去测试

24
00:01:09,376 --> 00:01:10,144
我把

25
00:01:11,168 --> 00:01:15,008
有没付功能的跟没有万事功能的元素

26
00:01:15,520 --> 00:01:16,544
放到

27
00:01:17,056 --> 00:01:18,592
不同的容器去

28
00:01:18,848 --> 00:01:21,152
你看这也是放到vector

29
00:01:21,664 --> 00:01:24,992
我在标题上面出来对不对

30
00:01:25,248 --> 00:01:26,272
下一个是对的

31
00:01:26,784 --> 00:01:27,808
再来是对

32
00:01:28,320 --> 00:01:31,904
再来是对multiset是红黑树做的

33
00:01:32,672 --> 00:01:36,000
下一页防covid-19

34
00:01:36,512 --> 00:01:38,304
哈希表htable坐落

35
00:01:39,072 --> 00:01:40,864
我把最重要的一些

36
00:01:41,888 --> 00:01:43,936
容器的都测试过

37
00:01:44,448 --> 00:01:47,776
每一次的测试我都放进去的是

38
00:01:48,032 --> 00:01:51,360
有沐足功能的汗没有目功能的

39
00:01:51,616 --> 00:01:55,712
你现在对到底什么叫牧付功能还不理解吗没关系

40
00:01:56,736 --> 00:01:57,760
现在回到前面了

41
00:01:59,552 --> 00:02:04,160
所以我们会看到的这个画面里头他每一张我都把这个

42
00:02:04,672 --> 00:02:08,000
数据结构就是这个容器的一个基本长相了

43
00:02:09,024 --> 00:02:13,632
在第2讲里面我们曾经详细介绍过的这些图都拿过来

44
00:02:13,888 --> 00:02:15,424
对应的来看

45
00:02:19,520 --> 00:02:25,664
每一个这个画面上面这一段都是我这边有写的test with Mobile elements

46
00:02:26,944 --> 00:02:28,992
什么叫Mobile还不知道吗

47
00:02:29,248 --> 00:02:31,296
下面这个人test with

48
00:02:31,552 --> 00:02:33,600
朗姆风elements

49
00:02:34,368 --> 00:02:36,160
我们拿它来上下比对

50
00:02:42,560 --> 00:02:45,632
这个测试的我都是300万次

51
00:02:45,888 --> 00:02:48,192
这个可以在让这个程序的时候

52
00:02:48,704 --> 00:02:49,472
H定

53
00:02:51,264 --> 00:02:55,104
在前面的第1讲时候我在测试都是100万

54
00:02:55,616 --> 00:02:57,408
这次我决定再多一点

55
00:02:57,664 --> 00:03:00,224
都是300万个元素放进去

56
00:03:01,248 --> 00:03:02,784
我们先看这个执行结果

57
00:03:03,808 --> 00:03:06,368
我把300万个元素放进去

58
00:03:07,136 --> 00:03:08,416
这个圈起来这一块

59
00:03:09,696 --> 00:03:11,488
放进去的这个过程

60
00:03:12,256 --> 00:03:15,584
应按理说我300万个

61
00:03:15,840 --> 00:03:18,656
300个元素可以发现10字符串

62
00:03:20,704 --> 00:03:23,776
一个一个字符在放进去应该调用

63
00:03:24,800 --> 00:03:25,568
不上诉

64
00:03:26,336 --> 00:03:28,896
3000000就应该调用300万次

65
00:03:30,176 --> 00:03:32,736
这边登记的就是它的次数

66
00:03:33,760 --> 00:03:36,832
这里有卡副卡刷卡

67
00:03:39,648 --> 00:03:40,672
你现在还不知道

68
00:03:41,184 --> 00:03:42,464
Contrada怎么写

69
00:03:44,768 --> 00:03:45,536
不过

70
00:04:15,744 --> 00:04:17,280
就是copycat的

71
00:04:18,815 --> 00:04:20,095
这个是我们理解的

72
00:04:20,607 --> 00:04:24,703
在没有学到莫之前我们知道什么叫咖啡的

73
00:04:24,959 --> 00:04:25,727
拷贝构造

74
00:04:26,495 --> 00:04:30,591
他会比较有很多次但我妈也不太理解怎么会是700万次

75
00:04:32,895 --> 00:04:33,407
好

76
00:04:33,919 --> 00:04:34,943
这两个

77
00:04:35,455 --> 00:04:37,503
这个帮你挑出来了差距

78
00:04:38,015 --> 00:04:39,295
差别很大

79
00:04:40,063 --> 00:04:43,903
这是什么这是放300万个元素进去所花的时间

80
00:04:44,159 --> 00:04:45,951
8547个

81
00:04:46,207 --> 00:04:47,487
为a minute second

82
00:04:48,255 --> 00:04:50,815
这个是14000上面是8000

83
00:04:51,071 --> 00:04:51,839
差距很大

84
00:04:54,655 --> 00:04:56,447
而且我只能提醒你

85
00:04:56,703 --> 00:05:02,079
有时候更是巨大的多多大好几倍甚至好几十倍

86
00:05:02,335 --> 00:05:03,359
因为这个

87
00:05:03,615 --> 00:05:08,223
这里头过程中需要内存但要去找内存所以

88
00:05:09,247 --> 00:05:15,391
执行之后你这个电脑的内存状态是很破碎还是很连续都会带来影响

89
00:05:16,927 --> 00:05:19,231
这项现在你看到这个市场

90
00:05:19,743 --> 00:05:22,559
他会要两倍啊这就是算小的了

91
00:05:23,071 --> 00:05:25,375
我曾经执行过有差距十几倍的

92
00:05:28,447 --> 00:05:28,959
所以

93
00:05:29,471 --> 00:05:34,079
如果我是有一种特殊写法让他movable的话

94
00:05:34,591 --> 00:05:35,359
就会比

95
00:05:36,383 --> 00:05:41,759
传统上我们不知道那个写法那这个加速度就会多

96
00:05:44,319 --> 00:05:45,855
另外我还测试

97
00:05:46,111 --> 00:05:46,623
Hobby

98
00:05:48,415 --> 00:05:49,951
汉谟拉比

99
00:05:51,231 --> 00:05:53,535
所以有所谓的move copy

100
00:05:54,559 --> 00:05:55,839
这个就是copy

101
00:05:57,631 --> 00:05:59,935
我现在这个有一个东西

102
00:06:00,191 --> 00:06:00,959
10000

103
00:06:01,983 --> 00:06:02,751
这边人

104
00:06:03,007 --> 00:06:04,799
这样就是一个卡比动作

105
00:06:07,615 --> 00:06:08,383
宝贝构造

106
00:06:09,151 --> 00:06:11,199
下面这个就是move copy

107
00:06:12,735 --> 00:06:14,527
包括现在先不解释这个

108
00:06:14,783 --> 00:06:17,343
语法上啊反正这就是两种

109
00:06:17,599 --> 00:06:19,903
Copy的方式得到了结果

110
00:06:21,439 --> 00:06:23,999
下载这个是执行结果

111
00:06:25,023 --> 00:06:26,815
下面这是另外一种事情结果

112
00:06:29,119 --> 00:06:32,959
差距非常非常大大到无穷大的这种感觉

113
00:06:33,727 --> 00:06:35,007
零个music

114
00:06:35,263 --> 00:06:37,055
3500x

115
00:06:37,823 --> 00:06:40,127
这个灵是因为我的刻度不够细

116
00:06:41,151 --> 00:06:44,223
可能是0.1个民族x表示出来是0

117
00:06:44,991 --> 00:06:45,503
好

118
00:06:45,759 --> 00:06:47,039
但是差别巨大

119
00:06:49,599 --> 00:06:54,975
直接编带给大家一个感觉就是如果加上莫夫的功能好像

120
00:06:55,743 --> 00:06:57,279
好像你看到了这些的就

121
00:06:57,791 --> 00:06:59,839
整个拉开了这个效率

122
00:07:01,119 --> 00:07:07,263
我们一般讲效能讲效率有空间上的效率和速度上的效率让我们现在谈的是数

123
00:07:07,519 --> 00:07:08,287
速度上的效果

124
00:07:10,591 --> 00:07:11,103
好

125
00:07:11,359 --> 00:07:12,127
在这个

126
00:07:12,383 --> 00:07:13,407
太麻里头啊

127
00:07:13,663 --> 00:07:18,271
我只写单一的函数很像你会看到这关键的这一块

128
00:07:18,783 --> 00:07:20,831
单一的函数而这个单例函数

129
00:07:21,343 --> 00:07:23,903
要能够接受各式各样的容器

130
00:07:25,183 --> 00:07:26,975
刚刚翻过来有五页

131
00:07:27,231 --> 00:07:30,559
人也是不同的容器但是都跑到同一个代码

132
00:07:31,839 --> 00:07:34,143
所以我在放元素的时候

133
00:07:35,679 --> 00:07:39,007
我这个来等于零I小于这里就是300万

134
00:07:40,543 --> 00:07:45,407
再放每一个元素的时候我有一个随机值取出来以后变成字符串

135
00:07:46,687 --> 00:07:48,479
我把这个字符串呢

136
00:07:48,991 --> 00:07:50,015
换成

137
00:07:51,551 --> 00:07:54,111
第一次我是换成movable的

138
00:07:54,879 --> 00:07:57,439
第2次我是换成number

139
00:07:59,999 --> 00:08:01,535
我多谢同一套代码

140
00:08:02,815 --> 00:08:03,583
就这一块

141
00:08:04,607 --> 00:08:07,935
然后用insert方式

142
00:08:10,751 --> 00:08:12,031
Cncert

143
00:08:13,567 --> 00:08:14,847
请看这一页

144
00:08:15,615 --> 00:08:21,503
This this this fact is that there is an alternative that

145
00:08:23,039 --> 00:08:24,831
找个容器

146
00:08:25,343 --> 00:08:27,135
都要提供insert

147
00:08:27,903 --> 00:08:29,951
因为我这个代码要

148
00:08:30,719 --> 00:08:32,255
就只有这么一份代码

149
00:08:33,279 --> 00:08:35,071
要面对不同的容器

150
00:08:36,351 --> 00:08:37,887
在这里可能你会想

151
00:08:41,983 --> 00:08:43,263
可能你会想

152
00:08:44,799 --> 00:08:46,335
红黑树

153
00:08:47,103 --> 00:08:48,383
散列表哈希表

154
00:08:49,919 --> 00:08:50,431
他们

155
00:08:50,943 --> 00:08:51,711
Insert

156
00:08:51,967 --> 00:08:52,735
就可以

157
00:08:56,063 --> 00:08:58,623
你只要因是它就会落在他改落地位置

158
00:09:00,415 --> 00:09:01,183
办事

159
00:09:02,463 --> 00:09:02,975
Vector

160
00:09:03,487 --> 00:09:04,255
Context

161
00:09:04,767 --> 00:09:05,791
XXXX

162
00:09:06,815 --> 00:09:10,143
你要因是你必须告诉他在哪里

163
00:09:12,959 --> 00:09:15,007
所以这两大类型的

164
00:09:15,263 --> 00:09:20,639
一种是观点式的容器一种是循序式的容器的音色动作不太一样

165
00:09:21,663 --> 00:09:24,223
你怎么能用同一个函数据应付正

166
00:09:24,479 --> 00:09:25,247
不同的

167
00:09:26,527 --> 00:09:28,063
而这个容器呢

168
00:09:28,831 --> 00:09:30,879
这只是很幸运啊

169
00:09:31,135 --> 00:09:33,695
我去查到了这个音色的

170
00:09:34,207 --> 00:09:37,791
在红黑树以及闪电表他去表里头

171
00:09:38,047 --> 00:09:41,375
音色的也可以指定一个位置

172
00:09:41,631 --> 00:09:47,007
我刚刚说其实你就因此就好了它自然该落在该弱的位置

173
00:09:47,775 --> 00:09:50,847
但是他有另外一个接口是允许你指定

174
00:09:51,103 --> 00:09:53,407
不是这个指定的位置

175
00:09:53,663 --> 00:09:54,943
只是一个

176
00:09:55,711 --> 00:10:01,087
只是一个我一直都比这个位置就是不是这个啊我比错了这一个还可以

177
00:10:02,111 --> 00:10:04,159
这位置只是一个提示

178
00:10:05,439 --> 00:10:07,999
它比如在红黑树里面你说你要把它放到

179
00:10:08,255 --> 00:10:11,839
头的位置但是如果万一他不应该在同的位置他他

180
00:10:12,095 --> 00:10:12,607
他会

181
00:10:12,863 --> 00:10:14,911
还是落在他下落的位置

182
00:10:16,191 --> 00:10:18,751
曾说我在写这个我们再看这个

183
00:10:19,007 --> 00:10:21,055
翻译程序的顺便对于

184
00:10:21,311 --> 00:10:27,455
我们在B2将面容器的方方面面的又多了一些认识多一些整理

185
00:10:27,711 --> 00:10:29,759
还包括其他的等下还没看到

186
00:10:30,015 --> 00:10:31,551
对于这个萃取机

187
00:10:32,319 --> 00:10:33,599
这个应用

188
00:10:34,879 --> 00:10:35,391
好

189
00:10:38,463 --> 00:10:39,743
这个是

190
00:10:39,999 --> 00:10:41,279
300万+ 10

191
00:10:41,791 --> 00:10:46,399
现在差不多知道了15张投影片的表现的东西我们一夜夜来看吗

192
00:10:47,935 --> 00:10:48,447
好

193
00:10:51,007 --> 00:10:57,151
进行下一个之前我来解释为什么你放300万个元素为需要7

194
00:10:57,407 --> 00:10:59,455
100万次的考试

195
00:10:59,967 --> 00:11:00,735
Concert

196
00:11:00,991 --> 00:11:01,759
这个是

197
00:11:02,271 --> 00:11:03,551
Happy consort

198
00:11:03,807 --> 00:11:06,879
这个是不错的为什么是700万次

199
00:11:09,951 --> 00:11:11,743
因为它的特性是这样

200
00:11:13,023 --> 00:11:14,303
它是两倍增长

201
00:11:14,815 --> 00:11:20,959
两倍增长所以你把元素放进去他这个一开始不是那么大让他满了之后呢

202
00:11:21,215 --> 00:11:27,359
我们就要把他就去找另外一块两倍大的然后把原来的东西全部拷贝过去

203
00:11:27,615 --> 00:11:30,431
我去这个拷贝过去就引发

204
00:11:30,943 --> 00:11:31,967
拷贝构造

205
00:11:32,223 --> 00:11:33,503
和拷贝复制

206
00:11:35,551 --> 00:11:37,343
因为这样所以

207
00:11:37,855 --> 00:11:41,695
在300万个元素中间有好多好多的成长

208
00:11:42,975 --> 00:11:44,767
Ecovacs要成长

209
00:11:46,303 --> 00:11:48,095
所以拨出这么多

210
00:11:49,887 --> 00:11:51,935
700万个300万的差别

211
00:11:52,959 --> 00:11:58,335
如果你一开始就指定better的有一个足够大那这个次数就不会这么多

212
00:12:02,431 --> 00:12:04,991
好我们再往下看链表呢

213
00:12:05,247 --> 00:12:07,039
链表是一个萝卜一个坑

214
00:12:07,551 --> 00:12:11,647
你放300美元诉他就是应该300万个节点

215
00:12:12,927 --> 00:12:13,695
没有什么

216
00:12:13,951 --> 00:12:15,487
和中增长的那种

217
00:12:15,743 --> 00:12:16,511
那种

218
00:12:16,767 --> 00:12:20,351
东西煮这种行为存在所以

219
00:12:21,631 --> 00:12:23,423
你放300万个元素

220
00:12:23,935 --> 00:12:25,471
他就是300万次的

221
00:12:28,031 --> 00:12:31,359
或者是第2种300万次的卡比卡出来

222
00:12:34,175 --> 00:12:34,687
好

223
00:12:34,943 --> 00:12:36,223
这边的注解说

224
00:12:37,759 --> 00:12:39,551
这个差距就不大了

225
00:12:41,087 --> 00:12:45,183
你放的是可帮你的我不可帮你的人差距不大

226
00:12:46,207 --> 00:12:47,487
时间恰好

227
00:12:47,743 --> 00:12:49,279
他就不大为什么

228
00:12:50,559 --> 00:12:52,863
你可以想想电表是这样

229
00:12:55,423 --> 00:12:56,191
所以

230
00:12:56,703 --> 00:13:01,823
他在搬动的过程里面他在咖啡的过程里面的跟刚刚的

231
00:13:02,079 --> 00:13:03,103
欧瑞

232
00:13:03,615 --> 00:13:06,431
不少瑞刚刚等开发完全不同

233
00:13:08,735 --> 00:13:12,575
后面给了这些投影片这些差距大

234
00:13:12,831 --> 00:13:15,135
这个差距也不大

235
00:13:15,391 --> 00:13:17,183
这个差距也不太大

236
00:13:17,951 --> 00:13:18,719
为什么

237
00:13:19,999 --> 00:13:21,535
你参考右边这个图

238
00:13:21,791 --> 00:13:23,071
我现在回放了

239
00:13:23,839 --> 00:13:25,375
这都是一个一个的节点

240
00:13:26,399 --> 00:13:27,423
上一页

241
00:13:27,679 --> 00:13:29,215
这是一个一个的节点

242
00:13:29,983 --> 00:13:32,031
在上月的他

243
00:13:32,799 --> 00:13:35,359
他虽然是一些缓冲区

244
00:13:36,127 --> 00:13:39,199
但是会扩充的并不是缓冲区会扩充

245
00:13:39,455 --> 00:13:42,527
这款程序用完之后增加一个新的缓冲区

246
00:13:42,783 --> 00:13:45,599
再胖也是其实也是一个节点

247
00:13:46,367 --> 00:13:48,671
定表更是如此

248
00:13:49,439 --> 00:13:55,583
并没有哪一个容器像那个一样是连续的然后要为了增长

249
00:13:55,839 --> 00:13:59,167
增长还要两倍这种动作

250
00:14:00,191 --> 00:14:01,471
所以

251
00:14:02,751 --> 00:14:06,079
所以在后面看到的这四个容器

252
00:14:06,591 --> 00:14:07,359
这个

253
00:14:07,871 --> 00:14:09,663
差距都没有那么大

254
00:14:13,247 --> 00:14:15,295
则生成的区域

255
00:14:15,807 --> 00:14:17,343
这个不了解容器

256
00:14:20,671 --> 00:14:21,695
好

257
00:14:21,951 --> 00:14:24,511
但是我还是要再进行一次

258
00:14:24,767 --> 00:14:29,119
他的差距多少也取决于到底你现在

259
00:14:29,631 --> 00:14:31,167
你的操作系统

260
00:14:31,423 --> 00:14:37,567
正在执行了这个环境底下那个内存的破碎或者是他分布的情况

261
00:14:37,823 --> 00:14:41,663
这数据可能你之前会跟我这个差别很大但是有可能的

262
00:14:42,175 --> 00:14:44,991
这里只是给大家一个基本概念

263
00:14:47,551 --> 00:14:48,831
而且

264
00:14:49,343 --> 00:14:50,367
影响

265
00:14:51,135 --> 00:14:52,159
我们在谈的是

266
00:14:52,415 --> 00:14:53,439
这种元素

267
00:14:53,695 --> 00:14:55,743
对于容器的影响

268
00:14:55,999 --> 00:14:57,023
速度影响

269
00:14:57,791 --> 00:15:01,631
不只是表现在这个这只是开始在放元素

270
00:15:02,655 --> 00:15:03,935
你后头对

271
00:15:04,191 --> 00:15:05,983
容器的各种操作

272
00:15:07,007 --> 00:15:08,031
你都会带来影响

273
00:15:09,055 --> 00:15:12,383
Mobile和栏目它也都会带来影响

274
00:15:13,407 --> 00:15:18,527
有时候你看看这个差距不大呀那如果我选择容器选择这种容器

275
00:15:19,039 --> 00:15:21,343
大概是不是我就

276
00:15:22,367 --> 00:15:24,671
就不用去写那个我很陌生的东西

277
00:15:25,695 --> 00:15:29,535
这个是陌生的吗4.0新的我要去学习吗

278
00:15:30,047 --> 00:15:33,119
是不是就可以不必去学习的人我刚刚说

279
00:15:33,375 --> 00:15:37,727
他的影响不是只有在一开始放元素后头的操作都有影响

280
00:15:39,007 --> 00:15:43,359
最2.0里头是非常强调的这个木府证功能

281
00:15:48,479 --> 00:15:52,319
这五个东西执行完毕这个画面

282
00:15:52,575 --> 00:15:53,343
我去了

283
00:15:54,111 --> 00:15:55,135
现在看看

284
00:15:55,647 --> 00:15:59,231
这个movable的Class怎么写

285
00:16:01,023 --> 00:16:07,167
我刚提过了这是语法的部分的我不会在这里讲太详细了只把它一些现在足够的

286
00:16:07,423 --> 00:16:10,495
谢谢你的讲就足够的一些东西提出来

287
00:16:12,287 --> 00:16:13,311
首先

288
00:16:14,079 --> 00:16:17,663
刚刚的测试程序都会打印出

289
00:16:17,919 --> 00:16:20,223
哪一个函数被调用多少次

290
00:16:20,991 --> 00:16:25,599
所以我这里呢准备这些静态的数据

291
00:16:26,367 --> 00:16:28,927
我的命名方式是这样这些都是这个家

292
00:16:31,231 --> 00:16:32,511
然后面有注解

293
00:16:33,535 --> 00:16:36,351
谁是default constructor或者累计次数

294
00:16:36,863 --> 00:16:38,911
好吃的copy口说的

295
00:16:39,167 --> 00:16:40,959
等等等各位看这个猪

296
00:16:44,031 --> 00:16:47,871
这是一个静态的所以会不断的数据累加

297
00:16:48,383 --> 00:16:50,431
我会变成你消失变成了

298
00:16:51,967 --> 00:16:53,247
因为他是静态的

299
00:16:54,527 --> 00:16:55,295
所以

300
00:16:55,551 --> 00:16:57,087
这边我要给石

301
00:16:57,599 --> 00:16:58,111
在

302
00:16:58,367 --> 00:17:00,671
Class之外要有一个定义

303
00:17:02,207 --> 00:17:03,487
我当初只为0

304
00:17:05,791 --> 00:17:07,583
我觉得这两张投影片

305
00:17:07,839 --> 00:17:11,423
在你手上的代码里面它是连续的是从这边

306
00:17:11,679 --> 00:17:15,775
我这边然后下一页这边到这边

307
00:17:16,031 --> 00:17:20,895
最刚刚的Class结束了这里再跟他说这些基本数据

308
00:17:23,711 --> 00:17:24,991
刚刚这边来

309
00:17:27,807 --> 00:17:31,135
现在我要引导你去看那几个特殊函数

310
00:17:32,415 --> 00:17:33,951
这是一个字符串

311
00:17:34,719 --> 00:17:38,303
字符串的设计都会里头是一根指针

312
00:17:39,583 --> 00:17:43,935
指针然后这里面会有一个分配的动作这里就是牛的动作

313
00:17:44,191 --> 00:17:45,983
去分配中药的最快

314
00:17:46,495 --> 00:17:47,775
这个是一个指针

315
00:17:49,567 --> 00:17:52,639
这是后来尿出来的一会要放肆

316
00:17:54,431 --> 00:17:58,015
好这个就是大家熟悉的

317
00:17:59,039 --> 00:18:00,063
Contract

318
00:18:00,319 --> 00:18:02,623
这里面我就把这个变量加加

319
00:18:03,647 --> 00:18:06,463
The composer会调用这个函数

320
00:18:07,231 --> 00:18:09,791
去做分配内存的动作

321
00:18:12,863 --> 00:18:14,655
这个就是copy口说的

322
00:18:15,423 --> 00:18:20,543
那他也要分配呀他copy是copy一个新的一块内容要差别

323
00:18:21,055 --> 00:18:23,103
所以他也要调用同样这个函数

324
00:18:26,687 --> 00:18:27,967
咖啡assignment

325
00:18:28,479 --> 00:18:29,759
这也是你熟悉的

326
00:18:30,015 --> 00:18:36,159
我就不讲解了既然叫copy后只要独立于会另外一个空间所以都要

327
00:18:36,415 --> 00:18:39,743
不要呼叫这一个函数调用这个函数

328
00:18:40,255 --> 00:18:42,559
这个函数所做的事情这个就是卡屏

329
00:18:44,095 --> 00:18:45,887
这个叫声好呗

330
00:18:47,679 --> 00:18:49,215
这不但把指针

331
00:18:49,471 --> 00:18:55,615
这个对象本身只有指针了但是不但把纸箱拷贝过来还要把指针所指的东西也拷贝过来这个

332
00:18:55,871 --> 00:18:57,151
深拷贝

333
00:18:58,175 --> 00:18:59,967
深拷贝是我们欢迎的

334
00:19:00,223 --> 00:19:02,015
浅拷贝就很危险

335
00:19:06,879 --> 00:19:08,415
至少我现在可以告诉你

336
00:19:09,439 --> 00:19:10,463
深拷贝

337
00:19:11,231 --> 00:19:12,511
浅拷贝呢

338
00:19:13,279 --> 00:19:14,303
有什么好的动作

339
00:19:15,071 --> 00:19:17,375
现在我来看一下

340
00:19:19,167 --> 00:19:19,679
这

341
00:19:19,935 --> 00:19:20,959
The class

342
00:19:23,007 --> 00:19:28,383
Happy constructor hampir sama operator是大家熟悉的

343
00:19:29,151 --> 00:19:30,687
Move的动作在这一块

344
00:19:31,711 --> 00:19:32,479
一集

345
00:19:32,991 --> 00:19:35,807
下一页在同一个程序同一个

346
00:19:36,575 --> 00:19:37,087
喂

347
00:19:37,343 --> 00:19:38,111
这块

348
00:19:39,135 --> 00:19:45,279
哈哈哈比这个这个叫莫夫的版本copy的版本差别在哪里呢

349
00:19:46,303 --> 00:19:47,583
只在这个地方

350
00:19:48,351 --> 00:19:49,631
参数的传递

351
00:19:50,399 --> 00:19:56,543
把这个非常的独特的2.0之后新增加的语法这个叫reference of reference

352
00:19:58,079 --> 00:20:00,895
啊我们现在就不去西部探讨他的意思了

353
00:20:01,663 --> 00:20:02,943
不是我现在的目的

354
00:20:03,455 --> 00:20:05,503
还是差别在这个地方

355
00:20:06,015 --> 00:20:09,087
下一页那差别再也是这一个

356
00:20:09,855 --> 00:20:14,207
最copy版本汉墓版本两者的差别就在于这里

357
00:20:14,463 --> 00:20:20,095
用这样来分出来那么目的动作是什么这里的动作

358
00:20:20,863 --> 00:20:25,983
就留给你细看了我不是讲他但是这个地方你会看到我是把汤的家家

359
00:20:26,495 --> 00:20:30,591
这里的动作所做的事情画图画在这个地方

360
00:20:30,847 --> 00:20:31,359
这里

361
00:20:31,871 --> 00:20:34,175
这是木木的动作其实只是

362
00:20:34,943 --> 00:20:36,479
本来这一个

363
00:20:37,247 --> 00:20:39,295
这个子字串字符串

364
00:20:40,575 --> 00:20:41,855
本来是这样

365
00:20:42,879 --> 00:20:44,927
现在要做一个move copy

366
00:20:46,207 --> 00:20:49,023
是这样我这个指针刺过来

367
00:20:49,279 --> 00:20:51,583
并且把原来这个尺寸段

368
00:20:53,119 --> 00:20:54,911
这不就是浅拷贝吗

369
00:20:57,471 --> 00:21:01,055
其实也谈不上拷贝因为这个指针被打断了

370
00:21:01,823 --> 00:21:06,431
如果没有打断这两个那这两个指向同一个这个叫浅拷贝

371
00:21:07,455 --> 00:21:12,063
这边打算的动作就是这里的闹事围设为0

372
00:21:14,367 --> 00:21:15,903
嘴莫反本

373
00:21:16,416 --> 00:21:21,280
跟他的版本的差别咖啡版本是真的有分配的深拷贝

374
00:21:21,536 --> 00:21:22,560
木版本

375
00:21:22,816 --> 00:21:24,608
只是拷贝指针而已

376
00:21:25,888 --> 00:21:29,984
当然你可能现在你就是马上就想到吧这样不是很危险吗

377
00:21:30,752 --> 00:21:33,824
一切都是后面有整个一套完整的做法

378
00:21:35,360 --> 00:21:40,224
什么我的版本那我们再看这一个那这个什么

379
00:21:40,480 --> 00:21:46,624
另外这个目的一个赋值操作这里头的动作我也不去细讲

380
00:21:47,136 --> 00:21:52,768
请读下来慢慢体会它的动作一样就是刚刚这张图上也这个图

381
00:21:53,536 --> 00:21:55,584
指针拷贝过来请拷贝

382
00:21:55,840 --> 00:21:58,656
把原来的指针把断掉这个闹的动作

383
00:22:02,496 --> 00:22:03,264
同时

384
00:22:03,776 --> 00:22:05,568
这一个类

385
00:22:05,824 --> 00:22:11,712
由于有目版本所以它的析构函数也有一点点差别

386
00:22:12,992 --> 00:22:14,784
通常我们在这里呀

387
00:22:16,064 --> 00:22:18,880
直接就把这个支撑傻掉

388
00:22:21,184 --> 00:22:27,328
也不用去检查当然有的人只是看个人习惯有的人会说那我要还是要先检查一下

389
00:22:27,584 --> 00:22:30,144
这个指针指向的这个指针

390
00:22:30,400 --> 00:22:31,424
想吃不错

391
00:22:32,192 --> 00:22:34,752
他不是不是零

392
00:22:35,776 --> 00:22:36,800
我才去杀他

393
00:22:37,568 --> 00:22:40,896
他是挺表示他已经是已经被杀过了我就不用再杀了

394
00:22:42,176 --> 00:22:44,992
其实这个这个可以去想想是一家家好

395
00:22:45,248 --> 00:22:51,392
规格对于一个指针它的历代两次会怎么样啊现在家规格没有趣

396
00:22:51,648 --> 00:22:53,184
俊明说这个事情

397
00:22:53,440 --> 00:22:57,024
找我们不太确定会怎么样啊所以一个

398
00:22:57,280 --> 00:23:00,864
一个正规的写法本来他就会写成这样子

399
00:23:02,656 --> 00:23:08,800
但是一般人可能想反正这个指针在在我这个前面的设计都不可能被蚊子喂

400
00:23:09,056 --> 00:23:13,664
貌似为零所以我这边也就不用检查了很多人也会这样

401
00:23:14,944 --> 00:23:18,528
不过现在这个版本里头由于这个浅拷贝

402
00:23:18,784 --> 00:23:21,344
拷贝完之后这个指针是设为0

403
00:23:22,368 --> 00:23:24,672
所以这里一定要做这个检查

404
00:23:26,976 --> 00:23:29,536
这个就是Mobile版本的

405
00:23:29,792 --> 00:23:35,936
汉纳姆的版本

406
00:23:36,192 --> 00:23:37,472
我并没有答应在这个

407
00:23:37,984 --> 00:23:44,128
这个这个影片上你可以比你手上就代码你就可以对这两个版本的差

408
00:23:46,432 --> 00:23:46,944
好

409
00:23:47,200 --> 00:23:48,992
你这样写出来之后

410
00:23:51,808 --> 00:23:52,576
对于

411
00:23:54,624 --> 00:23:56,416
100万次或者是

412
00:23:56,672 --> 00:23:59,232
这次数很多的这一个

413
00:24:00,000 --> 00:24:01,280
拷贝动作

414
00:24:02,560 --> 00:24:03,584
本来是

415
00:24:04,096 --> 00:24:06,144
真的有拷贝这个内容

416
00:24:07,936 --> 00:24:09,216
现在这里呢

417
00:24:09,472 --> 00:24:11,008
调用的却是

418
00:24:11,264 --> 00:24:12,032
版本

419
00:24:13,312 --> 00:24:14,848
那就只拷贝指针

420
00:24:16,896 --> 00:24:17,664
这个

421
00:24:17,920 --> 00:24:20,224
工作量不可以暴力气

422
00:24:20,736 --> 00:24:24,064
当然是木版本的快多了

423
00:24:25,600 --> 00:24:28,160
我们回到前面的测试看看这些画面

424
00:24:30,720 --> 00:24:33,792
这里有我使用了五种容器吗

425
00:24:35,072 --> 00:24:37,888
帮我使用Mobile版本的字符串的时候

426
00:24:39,936 --> 00:24:41,984
做拷贝的

427
00:24:42,240 --> 00:24:45,056
它自动就自然而然他就会调用

428
00:24:45,568 --> 00:24:46,592
木版本的

429
00:24:48,640 --> 00:24:49,664
那如果是

430
00:24:49,920 --> 00:24:51,456
非木版本的

431
00:24:51,712 --> 00:24:53,248
要用的就是这一个

432
00:24:53,760 --> 00:24:54,784
这两者

433
00:24:55,040 --> 00:25:01,184
我在写元素安插进去的时候我并没有去特别说我这一个安插的东

434
00:25:01,440 --> 00:25:04,512
东西是木板的还是木木板

435
00:25:04,768 --> 00:25:09,632
我不需要这些写的话如果需要我来写那就对我负担太重

436
00:25:10,144 --> 00:25:10,656
不需要

437
00:25:14,240 --> 00:25:15,008
OK

438
00:25:15,776 --> 00:25:18,080
好现在回到刚刚的这个源代码来

439
00:25:18,848 --> 00:25:24,992
所以现在大家这个虽然我没有讲得非常的深入因为这不是目前的重点但是go

440
00:25:25,248 --> 00:25:26,272
各位已经知道

441
00:25:27,040 --> 00:25:29,856
增加一个木版本的东西

442
00:25:30,112 --> 00:25:34,208
增加了拿起筷子到了

443
00:25:37,280 --> 00:25:38,048
好

444
00:25:38,560 --> 00:25:41,376
你所拿到的源代码还没看到这块

445
00:25:43,680 --> 00:25:47,264
这一块是因为我在测试容器我这些东西

446
00:25:47,520 --> 00:25:52,640
300万个要放到容器里去而我放的容器

447
00:25:53,152 --> 00:25:56,224
最后的测试我是放按enter

448
00:25:56,736 --> 00:25:57,760
也就是底部是

449
00:25:58,016 --> 00:25:58,784
Istanbul

450
00:25:59,296 --> 00:26:02,624
Hashtable需要黑方式

451
00:26:03,392 --> 00:26:07,232
所以我这个地方必须去写一个孩子放学出来

452
00:26:09,024 --> 00:26:11,328
那这个就不解释他的写法了

453
00:26:12,096 --> 00:26:13,376
其实我是借用

454
00:26:13,888 --> 00:26:18,240
放这个也不必讲啊反正我也要写出一个非虚方现在这边

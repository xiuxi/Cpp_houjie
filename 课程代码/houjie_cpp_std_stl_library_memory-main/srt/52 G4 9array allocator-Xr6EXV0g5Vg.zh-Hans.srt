1
00:00:00,256 --> 00:00:06,400
我们来看看这个App

2
00:00:06,656 --> 00:00:08,192
Relocate

3
00:00:08,960 --> 00:00:09,984
刚刚李菁

4
00:00:11,008 --> 00:00:13,568
这些概念就是里头他有一个

5
00:00:14,592 --> 00:00:16,128
Array这样的对象

6
00:00:16,384 --> 00:00:22,528
而这个rfc家在2.0新的一个容器内部是一个字应该要数组

7
00:00:22,784 --> 00:00:26,624
这是刚刚客为我们已经走到的印象现在来看看

8
00:00:27,136 --> 00:00:29,952
这个array allocator

9
00:00:30,208 --> 00:00:32,512
这个模板参数

10
00:00:33,536 --> 00:00:39,168
默认就是他的关键源代码默认识spdt乱而为

11
00:00:40,960 --> 00:00:45,568
算是就是2003年的一个

12
00:00:46,336 --> 00:00:52,480
一个是标准一个比较小的一个版本那个版本叫TR

13
00:00:52,736 --> 00:00:58,880
老王那后来到了现在在2011年已经派经期时内容已经汗到标准库里面

14
00:00:59,136 --> 00:01:00,160
不过大家

15
00:01:00,928 --> 00:01:02,976
早在晚是在

16
00:01:03,232 --> 00:01:09,376
沟通上或者是标准库的实现上面都仍然保留了一个版本不是这个

17
00:01:10,912 --> 00:01:17,056
4.9是2011之后的版本人里头对于这个语言代码单元

18
00:01:17,312 --> 00:01:20,128
仍然使用的雅万瑞

19
00:01:20,896 --> 00:01:23,712
他并没有去用标准库的瑞

20
00:01:24,224 --> 00:01:28,064
但这件事情是是无所谓的

21
00:01:28,832 --> 00:01:29,600
也就是说

22
00:01:29,856 --> 00:01:34,464
它默认是这样可是你指定给他的如果不是CR1而是

23
00:01:34,720 --> 00:01:38,560
兴奋心的sgd比较锐他也接受

24
00:01:38,816 --> 00:01:44,704
因为这两个东西其实本质是相同的它的本质是什么呢等一下

25
00:01:44,960 --> 00:01:45,984
你会看到

26
00:01:47,008 --> 00:01:49,312
儿子是第2个模板参数

27
00:01:50,080 --> 00:01:50,848
里头

28
00:01:51,360 --> 00:01:54,432
就把这一个参数这是一个类型

29
00:01:54,688 --> 00:01:58,528
这是这个type这个菜的话那个名字

30
00:01:59,296 --> 00:02:03,904
然后就以蓝色的这一个声明了一个变量

31
00:02:04,416 --> 00:02:06,208
注意这是一根指针

32
00:02:06,720 --> 00:02:09,024
这只是一根指针

33
00:02:10,048 --> 00:02:12,608
说他不是一个大东西

34
00:02:12,864 --> 00:02:18,496
这一根指针将要用来指向蓝色的这个

35
00:02:19,776 --> 00:02:20,800
这个是什么呢

36
00:02:21,312 --> 00:02:22,848
这个就是黄的这个

37
00:02:23,360 --> 00:02:27,456
黄的是什么呢就是一个这一种东西

38
00:02:28,480 --> 00:02:30,272
这种东西又是什么呢

39
00:02:30,528 --> 00:02:33,600
它的底部其实就是一个最佳的数字

40
00:02:34,112 --> 00:02:34,624
于是

41
00:02:35,392 --> 00:02:36,160
于是

42
00:02:36,416 --> 00:02:37,696
我画的这条腿

43
00:02:39,232 --> 00:02:45,376
说他这是一个指针指向的其实就是男的男的就是黄的黄就是这

44
00:02:45,632 --> 00:02:46,656
这个这个就是这个

45
00:02:49,984 --> 00:02:51,264
这是极佳的速度

46
00:02:52,800 --> 00:02:53,568
后头

47
00:02:55,616 --> 00:02:59,968
分配和释放的动作都是对这一

48
00:03:00,224 --> 00:03:01,760
会内容我

49
00:03:02,272 --> 00:03:03,040
操作

50
00:03:05,088 --> 00:03:09,440
这里很有趣的一点是由于这将是一个

51
00:03:09,696 --> 00:03:12,000
Cplusplus的数组

52
00:03:12,768 --> 00:03:15,328
所以这是静态的

53
00:03:16,096 --> 00:03:17,632
他不需要释放

54
00:03:19,424 --> 00:03:20,704
回想一下数组

55
00:03:21,984 --> 00:03:26,848
只有动态分配才要吃发烧药的OK的或者叫free

56
00:03:27,616 --> 00:03:29,664
术中没有这种概念

57
00:03:30,176 --> 00:03:31,200
所以

58
00:03:31,456 --> 00:03:32,736
你看看它的接口

59
00:03:34,272 --> 00:03:36,832
这个allocator

60
00:03:37,600 --> 00:03:40,160
里面只有二楼配合这个函数

61
00:03:40,672 --> 00:03:42,208
没有DK

62
00:03:43,488 --> 00:03:48,864
不过你如果调用它的clk它仍然有它就有五类

63
00:03:49,120 --> 00:03:50,656
这个函数来供应

64
00:03:51,424 --> 00:03:53,472
这个函数做什么事呢

65
00:03:53,728 --> 00:03:54,752
Nothing

66
00:03:55,008 --> 00:03:56,288
什么都没做

67
00:03:57,056 --> 00:04:02,688
使它仍然保留了这个接口因为这是所有的分配器必须提供的两个函数

68
00:04:03,456 --> 00:04:07,296
不过那个地儿都可以其实什么都没做一个空的函数

69
00:04:08,064 --> 00:04:12,928
为什么这样设计因为刚刚我已经讲过了这是静态的东西

70
00:04:13,440 --> 00:04:16,512
这不需要释放不需要归还的

71
00:04:18,815 --> 00:04:24,703
至于他的分配动作刚刚提过多是从治理的分配那个动作呢在这儿

72
00:04:25,215 --> 00:04:25,983
在这里

73
00:04:26,751 --> 00:04:30,079
这个动作我们用下一张图会更清楚

74
00:04:31,359 --> 00:04:32,895
下一张图长得是这样

75
00:04:33,663 --> 00:04:35,711
这样就会更清楚一些

76
00:04:37,503 --> 00:04:38,015
好

77
00:04:38,271 --> 00:04:42,623
在刚刚进行的是这夜了现在我们看怎么去用它

78
00:04:44,159 --> 00:04:49,023
由于你投放的这一种黄色的这个东西

79
00:04:51,071 --> 00:04:52,607
这是比较新的

80
00:04:54,655 --> 00:04:56,703
很多人还很陌生

81
00:04:57,727 --> 00:05:01,311
因此也就不知道怎么使用这一种东西

82
00:05:03,359 --> 00:05:05,407
现在我们来看看怎么使用

83
00:05:07,199 --> 00:05:07,967
好

84
00:05:08,223 --> 00:05:12,063
我这个程序呢这边有个新下家的速度

85
00:05:14,879 --> 00:05:17,183
我就要了一个array allocator

86
00:05:18,207 --> 00:05:19,743
里面的元素都是整数

87
00:05:21,023 --> 00:05:25,887
我的第2个模板参数已经看到了再回去看一次黄色的这个

88
00:05:26,399 --> 00:05:27,679
必须说

89
00:05:27,935 --> 00:05:30,239
他是一个这种花卷

90
00:05:31,519 --> 00:05:32,543
因此

91
00:05:32,799 --> 00:05:34,079
我在这里就说了

92
00:05:35,103 --> 00:05:36,127
是这种OP

93
00:05:37,407 --> 00:05:39,711
符合刚刚上业的写法

94
00:05:41,247 --> 00:05:46,879
这一种无厘头要放的是走出这个跟这个必须相符

95
00:05:48,671 --> 00:05:49,439
必须相符

96
00:05:49,951 --> 00:05:53,023
人家分配器说我分配数据都是整数

97
00:05:53,279 --> 00:05:56,607
这里面的数组的每一个都是整数这样才相符啊

98
00:05:57,887 --> 00:05:59,167
这个数字有多少呢

99
00:05:59,423 --> 00:06:01,215
就要和这个数字相比

100
00:06:01,983 --> 00:06:03,007
6536

101
00:06:03,775 --> 00:06:06,847
这是我在这个例子里面一曲的大小

102
00:06:09,407 --> 00:06:13,503
这样子定下来之后这一整行是一个他的

103
00:06:14,783 --> 00:06:17,343
绿色这个是我的offset name

104
00:06:18,623 --> 00:06:24,767
这时候要给一个初值进去就把我上面这个视觉要素素放进去了

105
00:06:25,023 --> 00:06:26,815
一直翻译去就传给他

106
00:06:27,839 --> 00:06:30,911
你看看这个构造函数这样会调用构造函数

107
00:06:31,423 --> 00:06:36,031
构造函数再看一下商业构造函数

108
00:06:37,567 --> 00:06:40,127
还可行所以说是构造函数

109
00:06:41,407 --> 00:06:42,687
那就接受了

110
00:06:43,199 --> 00:06:43,967
一个指针吗

111
00:06:45,503 --> 00:06:49,087
这个指针将会被记录在这里

112
00:06:50,623 --> 00:06:51,647
这个支撑

113
00:06:52,927 --> 00:06:56,511
默认识落那我就没有用所以一定要给他

114
00:06:59,327 --> 00:07:05,471
所以在看我的使用的例子我就给了我自己在家的这个数

115
00:07:07,775 --> 00:07:13,919
这样我就可以华盛顿说里头有跟指针指向这个数组了636

116
00:07:18,015 --> 00:07:19,295
接下来呢

117
00:07:19,807 --> 00:07:20,831
我做了

118
00:07:21,087 --> 00:07:23,391
分配的动作和翅膀的动作

119
00:07:23,903 --> 00:07:27,231
用法和其他的分配器都一样

120
00:07:28,255 --> 00:07:34,399
这个分配的时候得到这边指定13表示要一个元素和

121
00:07:34,655 --> 00:07:40,543
三个元素每个元素是什么呢这个已经说明了分配器要分配的是整数

122
00:07:41,311 --> 00:07:47,455
这个分配器要是被种族所以这个分配一就是从这一个数组里面去拿一个

123
00:07:47,967 --> 00:07:49,503
这壁纸船回来给他

124
00:07:50,783 --> 00:07:51,551
用掉了

125
00:07:52,063 --> 00:07:52,831
在

126
00:07:53,087 --> 00:07:58,463
613呢他就是这三个再把这个地址三个的7点地址

127
00:07:59,999 --> 00:08:01,791
唱回来回来

128
00:08:02,047 --> 00:08:03,583
这样就用掉的四个

129
00:08:04,351 --> 00:08:07,679
继续往下分配就继续往后面的东西

130
00:08:09,215 --> 00:08:15,359
这些变化这些变化我们可以回到上一页看这个二楼配置

131
00:08:15,615 --> 00:08:16,639
这些变化

132
00:08:18,175 --> 00:08:24,063
你可以花点时间其实这很简单的花一点时间看看这个我就不带你一行行看了

133
00:08:25,343 --> 00:08:26,879
这里的变化

134
00:08:27,391 --> 00:08:31,743
就等同于好像有一个索引在帮忙记录

135
00:08:31,999 --> 00:08:38,143
现在用到多少了啊用了一个现在这里用了三个到这里了那接下来呢继续去使用

136
00:08:38,399 --> 00:08:41,215
你个八个每次一个都可以

137
00:08:44,287 --> 00:08:48,639
在他的整个源代码的设计里头我们就看不到

138
00:08:49,407 --> 00:08:54,783
看不到他会回头过来用这些东西已经分配出去的东西

139
00:08:58,623 --> 00:09:04,767
因为它的配置就都那什么事情

140
00:09:05,535 --> 00:09:07,071
说其实呢

141
00:09:07,327 --> 00:09:10,399
其实这一个reader

142
00:09:10,911 --> 00:09:14,495
可以想办法做一点是做一些更好的事情

143
00:09:15,263 --> 00:09:16,799
什么叫更好的事情

144
00:09:17,567 --> 00:09:23,711
这事如果他还的话你看这样子现在把这两根指针又一天回去这个是怎么是收回来了

145
00:09:23,967 --> 00:09:25,247
塞的这些收回来了

146
00:09:25,503 --> 00:09:28,319
那么应该可以在再被使用

147
00:09:29,855 --> 00:09:33,695
当然这样的话这个就变成一个小型小型的

148
00:09:33,951 --> 00:09:34,975
内存池

149
00:09:37,279 --> 00:09:43,423
不是这样才真的比较有用现在这样子呢说实在的我的评价就是

150
00:09:43,679 --> 00:09:47,007
这个array allocator还真没有太大的用途

151
00:09:50,335 --> 00:09:56,479
总之人我们是长了眼长的长的眼镜看一看啊有人做的这些事情有的做做的

152
00:09:56,735 --> 00:09:57,759
做了一个分配器

153
00:10:02,367 --> 00:10:04,159
好关于吃一个

154
00:10:04,927 --> 00:10:07,999
说把静态的数组的地址存进来

155
00:10:08,511 --> 00:10:11,071
变成汤内部的最大会

156
00:10:12,351 --> 00:10:13,887
我换了一个思维

157
00:10:14,655 --> 00:10:20,799
我看下一页换一个中用法一样可以这个速度我也可以用动态

158
00:10:21,055 --> 00:10:21,823
永泰去取的

159
00:10:22,335 --> 00:10:26,943
动态分配给大会把它当成数组定义为相同

160
00:10:27,199 --> 00:10:28,223
我看怎么做

161
00:10:28,479 --> 00:10:30,783
这个array

162
00:10:32,063 --> 00:10:35,391
第2个模板参数应该是个类型

163
00:10:36,671 --> 00:10:38,207
这个类型呢

164
00:10:38,719 --> 00:10:43,071
上头我就先做了一个定义它是一个这样的extent

165
00:10:46,655 --> 00:10:49,727
其实这个跟上业你看的是一样的

166
00:10:50,751 --> 00:10:53,567
那你自己两液对照一下是一样的

167
00:10:53,823 --> 00:10:56,383
只不过上个月这个是静态的数组

168
00:10:56,639 --> 00:10:58,431
下一页那我把它变成

169
00:10:59,199 --> 00:11:00,735
而为这个对象

170
00:11:03,039 --> 00:11:07,903
然后我们又必须另文必须六才有那么一大快跑出来

171
00:11:08,671 --> 00:11:10,463
这辆

172
00:11:10,719 --> 00:11:12,255
这两行

173
00:11:12,767 --> 00:11:16,351
就等同于商业的这个静态数组

174
00:11:16,607 --> 00:11:19,167
意思是一样的角色是一样的

175
00:11:22,751 --> 00:11:25,055
这只是这两页的用法不同

176
00:11:25,823 --> 00:11:27,359
其他都完全相同

177
00:11:29,151 --> 00:11:31,967
在整理一次这两页的差别在哪里呢

178
00:11:32,223 --> 00:11:36,319
毕业我用的是静态的cplusplus的数组

179
00:11:36,831 --> 00:11:39,647
安省最大会12月我用

180
00:11:39,903 --> 00:11:43,231
你是数组但是我是用动态分配的方式

181
00:11:43,743 --> 00:11:46,303
Cplusplus 2.0那个array

182
00:11:47,071 --> 00:11:48,607
Object形式

183
00:11:49,119 --> 00:11:49,631
行程

184
00:11:49,887 --> 00:11:51,423
尾部的一大块

185
00:11:56,287 --> 00:12:02,431
我说我要介绍七个分配器最前面两个很阳春很简单的讲完了第3个就是这个

186
00:12:02,687 --> 00:12:03,967
Hello Kitty

187
00:12:04,479 --> 00:12:09,343
第3个吗我也忘了

188
00:12:11,135 --> 00:12:16,511
接下来我们要谈这个第8个locator刚刚我对他的评语是也没什么用

189
00:12:17,023 --> 00:12:18,815
我们来谈谈他的做法

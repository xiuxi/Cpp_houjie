1
00:00:05,888 --> 00:00:07,680
V2版本的分配器

2
00:00:09,472 --> 00:00:10,496
相当不错

3
00:00:12,544 --> 00:00:15,104
按照这个方式的进行下去

4
00:00:15,872 --> 00:00:19,968
任何一个需要这种良好的内存分配的

5
00:00:20,224 --> 00:00:22,528
Class我们都为他写一个

6
00:00:22,784 --> 00:00:26,880
香港没有的一个版本有时也就是为他写

7
00:00:27,136 --> 00:00:31,744
Operator new hair products里头都是外大会做切割

8
00:00:32,256 --> 00:00:34,816
然后一个一个的回收就刚刚的那个版本

9
00:00:37,888 --> 00:00:39,680
可是如果这样的话

10
00:00:40,704 --> 00:00:41,728
这是一个错

11
00:00:41,984 --> 00:00:45,824
重复性的动作太多了我们写代码的重复

12
00:00:46,080 --> 00:00:46,848
动作太多

13
00:00:47,872 --> 00:00:52,736
Clexane hecd-1头像

14
00:00:54,016 --> 00:01:00,160
从内存从软件工程的角度来看并不合适同样东西我们不是可以

15
00:01:00,416 --> 00:01:02,720
对把它集中到一个地方去吗

16
00:01:03,488 --> 00:01:08,096
这样万一将来要改变的话也比较方便打一个地方就好了

17
00:01:09,632 --> 00:01:13,472
是我们现在的版本3就循了这一条路线

18
00:01:14,240 --> 00:01:16,032
想要把刚刚

19
00:01:16,800 --> 00:01:18,336
在那些动作

20
00:01:18,592 --> 00:01:20,896
即抽出来集中

21
00:01:21,152 --> 00:01:21,664
在

22
00:01:22,688 --> 00:01:28,832
一个一个一个全局的函数那还是某一个类的地方

23
00:01:29,856 --> 00:01:33,184
我们不喜欢全局的东西在面向对象

24
00:01:33,440 --> 00:01:36,512
所以我们最终决定了

25
00:01:37,280 --> 00:01:38,816
把刚刚的那些动作

26
00:01:39,328 --> 00:01:40,352
抽取出来

27
00:01:40,864 --> 00:01:42,912
放到一个class

28
00:01:44,448 --> 00:01:47,264
这个Class我不起来把他叫Peter

29
00:01:48,032 --> 00:01:49,568
哇哦这个名字出现了

30
00:01:50,848 --> 00:01:54,432
回来一步一步接近标准库的那个分配器的做法

31
00:01:55,968 --> 00:01:58,272
这个allocated里面做

32
00:01:58,784 --> 00:02:00,576
重返的这两个函数

33
00:02:01,344 --> 00:02:02,112
不是

34
00:02:03,136 --> 00:02:06,720
就这一次不在重载怎么还是我就

35
00:02:07,488 --> 00:02:13,632
设计两个现在被业界大家公认叫什么名字一个叫allocate一个叫

36
00:02:13,888 --> 00:02:14,912
Kate

37
00:02:16,192 --> 00:02:17,472
好先把子

38
00:02:17,728 --> 00:02:19,520
世界好像是后

39
00:02:20,800 --> 00:02:22,080
其他的class

40
00:02:22,336 --> 00:02:24,384
真正需要内存管理的class

41
00:02:24,640 --> 00:02:25,408
富了

42
00:02:25,664 --> 00:02:26,944
不了

43
00:02:28,480 --> 00:02:29,504
等等等

44
00:02:30,528 --> 00:02:33,600
当需要用到这种内存管理时

45
00:02:33,856 --> 00:02:36,416
他只要写出

46
00:02:37,440 --> 00:02:38,464
这两个数

47
00:02:40,256 --> 00:02:41,792
而这两个函数里头

48
00:02:42,048 --> 00:02:43,584
刚刚是做了很多的动作

49
00:02:43,840 --> 00:02:45,376
这边写出了现在不必了

50
00:02:46,144 --> 00:02:49,472
这两个动作就分别交给

51
00:02:50,752 --> 00:02:51,776
这个去做

52
00:02:53,312 --> 00:02:54,592
这个就是

53
00:02:54,848 --> 00:02:56,896
上月出现的allocator

54
00:02:59,456 --> 00:03:02,272
怎么做先不必急反正教给他去做

55
00:03:04,064 --> 00:03:10,208
而这一个Locate是专门为这个负载服务的所以他是他设计为一个

56
00:03:10,464 --> 00:03:15,584
静态的东西这个locator你可以想象里面就是有一根

57
00:03:15,840 --> 00:03:16,608
指针

58
00:03:16,864 --> 00:03:18,144
子像一条链表

59
00:03:19,168 --> 00:03:21,472
专门为他来服务

60
00:03:21,728 --> 00:03:23,008
景泰

61
00:03:23,776 --> 00:03:27,104
另外这边右边的功能也有一个

62
00:03:28,384 --> 00:03:30,944
也是sata应该用红色的

63
00:03:31,456 --> 00:03:33,504
左右可以对

64
00:03:36,320 --> 00:03:37,344
意思是

65
00:03:37,600 --> 00:03:43,744
每一个Class里头都有专门为自己服务的小型的OK这

66
00:03:44,000 --> 00:03:47,584
Hello Kitty里面就有一条单向链表

67
00:03:48,352 --> 00:03:54,496
链表里面所挂的每一个区块就是负这种发小右边就是不这种

68
00:03:57,824 --> 00:03:59,360
这样就是我所谓的话

69
00:04:00,128 --> 00:04:01,408
内存的事情

70
00:04:01,664 --> 00:04:02,688
抽出来

71
00:04:02,944 --> 00:04:09,088
放大了CAD里面这样设计部的人不必在管内存

72
00:04:09,344 --> 00:04:11,392
管理的那些琐碎的事

73
00:04:11,648 --> 00:04:14,464
全部交给lk的作者

74
00:04:16,256 --> 00:04:20,351
由于这个是一个静态的所以要在Class外头

75
00:04:20,607 --> 00:04:21,631
去定义它

76
00:04:23,423 --> 00:04:24,447
右边也是一样

77
00:04:28,031 --> 00:04:31,871
好现在我们来看看这个locator所做的事情

78
00:04:33,151 --> 00:04:39,295
他所做的事情无非就是把刚刚版本的进化到版本儿到了版本

79
00:04:39,551 --> 00:04:41,343
20天的做法搬过来

80
00:04:41,855 --> 00:04:45,183
所以这里的allocate handy locator

81
00:04:45,439 --> 00:04:46,207
这边

82
00:04:46,463 --> 00:04:48,255
Hello Kitty nltk

83
00:04:48,511 --> 00:04:50,815
里头的动作已经很熟悉了

84
00:04:51,327 --> 00:04:53,887
哇一大块没了口

85
00:04:54,911 --> 00:04:55,423
这周

86
00:04:55,679 --> 00:04:56,191
我

87
00:04:57,215 --> 00:04:59,775
我整理出来的我用的是My Love

88
00:05:01,055 --> 00:05:03,103
这个惩罚程度来

89
00:05:05,407 --> 00:05:11,551
我设为五一次要一大块我这个一大块的我有点夸张了其实是

90
00:05:11,807 --> 00:05:14,367
不是太大了一会我每次只要五个

91
00:05:14,879 --> 00:05:19,999
我要做做什么用我等下观察的时候比较容易观察

92
00:05:20,767 --> 00:05:22,047
在现实中呢

93
00:05:22,303 --> 00:05:25,887
他可能是多少这个就是这个团队的经验

94
00:05:26,655 --> 00:05:32,799
也许这个团队认为你设计这个的团队认为24个是不错的大小太大也不好看

95
00:05:33,055 --> 00:05:33,567
大小也不好

96
00:05:35,359 --> 00:05:38,175
标准库里面是多大呢而起

97
00:05:38,943 --> 00:05:40,223
我们到的第2季

98
00:05:41,247 --> 00:05:43,807
在谈到标准库的做法

99
00:05:44,575 --> 00:05:50,719
好我这边是为五个所以每次就是五个这么大的东西分配好之后

100
00:05:50,975 --> 00:05:52,511
把他的一切割

101
00:05:53,791 --> 00:05:55,583
这个动作我前面都提过了

102
00:05:57,119 --> 00:05:59,423
这里借用的方式就是这个

103
00:06:00,191 --> 00:06:01,983
嵌入式指针

104
00:06:04,031 --> 00:06:05,055
这个设计

105
00:06:06,335 --> 00:06:12,479
我这个设计就比刚刚的第2版本简化多了我们再看一次能刚第2版本

106
00:06:14,271 --> 00:06:15,295
这边又有

107
00:06:15,807 --> 00:06:19,391
Representation这里又有Union

108
00:06:19,647 --> 00:06:22,975
大家对Union的有可能不是那么熟悉

109
00:06:24,511 --> 00:06:26,047
我把它全部简化

110
00:06:27,071 --> 00:06:28,863
变成现在你看起来

111
00:06:31,167 --> 00:06:34,495
这个其实就是大家在学校里面洗一个

112
00:06:35,263 --> 00:06:38,335
单向链表的时候会做的事情

113
00:06:39,359 --> 00:06:41,407
华盛顿就更容易理解

114
00:06:42,943 --> 00:06:43,711
就是

115
00:06:45,759 --> 00:06:47,039
如果我像

116
00:06:47,807 --> 00:06:49,599
Hello K的要求

117
00:06:49,855 --> 00:06:50,879
怎么大的话

118
00:06:53,183 --> 00:06:58,047
这么大将是下一页服的大小或者是顾的大小

119
00:06:58,303 --> 00:07:02,143
就是互相区别的要求吗或者是故乡OK的要求

120
00:07:02,655 --> 00:07:04,703
要求

121
00:07:06,239 --> 00:07:07,519
于是回到这边来

122
00:07:08,543 --> 00:07:11,103
这个浅蓝色的筷子大小

123
00:07:12,639 --> 00:07:18,783
在这里头将会借用前面的四个字节当NEX这个指责

124
00:07:20,575 --> 00:07:21,855
这个指针将会

125
00:07:22,111 --> 00:07:24,671
你说移动啊这个时间加快复制

126
00:07:24,927 --> 00:07:25,951
让它指向

127
00:07:26,463 --> 00:07:27,487
20到这里来

128
00:07:30,047 --> 00:07:33,631
下一次再估值又指向一个比较远的地方

129
00:07:34,399 --> 00:07:40,031
每次都借用一个对象飞快将会成为一个对象

130
00:07:40,543 --> 00:07:42,591
前四个字节能使者

131
00:07:46,431 --> 00:07:47,199
这个服

132
00:07:47,711 --> 00:07:49,503
发出需求的时候

133
00:07:50,271 --> 00:07:51,807
这块就是付这么大

134
00:07:54,367 --> 00:07:57,951
将要被拿来做成一个负的对象出来

135
00:08:02,559 --> 00:08:03,071
好

136
00:08:03,327 --> 00:08:06,655
所以这边是allocate什么是的哦OK

137
00:08:07,935 --> 00:08:09,215
简单的回收动作

138
00:08:11,007 --> 00:08:13,311
这样设计好之后

139
00:08:14,591 --> 00:08:19,455
任何一个可拉斯要使用他只要向左边这样写我右边这样写

140
00:08:21,759 --> 00:08:25,343
这个写法非常的字是

141
00:08:27,391 --> 00:08:28,671
也简单

142
00:08:30,719 --> 00:08:33,791
好这个比先前的设计干净多了

143
00:08:34,559 --> 00:08:37,887
Application classics复或者事故

144
00:08:38,399 --> 00:08:43,007
不再需要与内存分配的细节纠缠不清

145
00:08:43,519 --> 00:08:47,359
所有的细节都让allocator去操心就好

146
00:08:49,407 --> 00:08:50,431
这个就是我们的

147
00:08:51,711 --> 00:08:52,735
V3版本

148
00:08:54,015 --> 00:08:54,783
三本

149
00:08:56,063 --> 00:08:57,599
我这边没有标出来

150
00:08:57,855 --> 00:09:00,159
你看我前面有标12

151
00:09:01,183 --> 00:09:07,327
第3版本的就是这一个也许各位在可以在你的讲义上指标翻让你更

152
00:09:07,583 --> 00:09:09,631
方便我们还要进入到版本4

153
00:09:12,959 --> 00:09:17,311
最前面这一个版本一个版本会调的parkplus locator

154
00:09:18,591 --> 00:09:22,687
阿拉伯三就不叫这个名字了我把它叫做static

155
00:09:23,199 --> 00:09:23,967
因为他是

156
00:09:24,223 --> 00:09:24,735
变成

157
00:09:25,247 --> 00:09:26,271
应用榜的

158
00:09:26,527 --> 00:09:27,295
一个一个的

159
00:09:27,551 --> 00:09:28,575
景泰东西

160
00:09:39,583 --> 00:09:40,351
我看结果

161
00:09:42,143 --> 00:09:43,167
测试的结果

162
00:09:44,447 --> 00:09:45,727
我现在不

163
00:09:46,495 --> 00:09:47,775
把下面的故

164
00:09:49,311 --> 00:09:50,591
上叶这个情况

165
00:09:51,359 --> 00:09:55,199
万故以后东西不一样啊服里头是这样

166
00:09:56,223 --> 00:09:57,503
部里头是这样

167
00:09:59,039 --> 00:10:01,599
我用来模拟一般的现实生活中

168
00:10:01,855 --> 00:10:03,391
我们在这些

169
00:10:03,647 --> 00:10:06,719
Vacation classes

170
00:10:07,743 --> 00:10:08,255
表现

171
00:10:10,303 --> 00:10:11,071
好

172
00:10:11,327 --> 00:10:15,679
诉我准备100分指针不也是100分之争

173
00:10:17,983 --> 00:10:20,799
啊看看大小所以输出结果呢

174
00:10:21,311 --> 00:10:22,591
故事吧

175
00:10:23,103 --> 00:10:24,383
Ue4

176
00:10:26,943 --> 00:10:28,479
然后疯了

177
00:10:29,247 --> 00:10:35,391
随意看看结果我这边选23个这边显示七个其实无所谓我就任意了

178
00:10:35,647 --> 00:10:37,951
只要不要超过100根指针就好了

179
00:10:39,487 --> 00:10:42,559
上面这个我定了23个服

180
00:10:43,327 --> 00:10:44,607
最后再把地掉

181
00:10:45,119 --> 00:10:47,935
厦门这个我们有了17个故

182
00:10:48,191 --> 00:10:49,471
这个把地掉

183
00:10:52,031 --> 00:10:54,335
这是做了一些出来

184
00:10:56,127 --> 00:10:57,407
我观察什么事情

185
00:10:58,431 --> 00:10:59,967
首先我要确认

186
00:11:00,479 --> 00:11:03,551
我写的这个版本是对的第3版本了吗

187
00:11:04,319 --> 00:11:10,463
所以我就我我打印出来看看它里面的值是不是我射进去的词这个运

188
00:11:10,719 --> 00:11:14,047
运作正确没有档期没有Crash掉

189
00:11:16,607 --> 00:11:17,887
确保正确性

190
00:11:19,679 --> 00:11:20,447
这个件

191
00:11:21,727 --> 00:11:23,519
我又可以在这个输出里面

192
00:11:23,775 --> 00:11:26,591
看到一些我预期中的东西

193
00:11:27,615 --> 00:11:28,639
我一起什么呢

194
00:11:30,175 --> 00:11:30,943
往前看

195
00:11:31,455 --> 00:11:37,599
这个allocator我的设计本是要的一大块计时15个小块

196
00:11:39,391 --> 00:11:42,463
所以每次要的那五个元素

197
00:11:43,487 --> 00:11:44,767
一定是相邻

198
00:11:46,815 --> 00:11:49,375
他很听我的那五个不1定像你

199
00:11:51,423 --> 00:11:52,959
我希望能看到这个结果

200
00:11:55,519 --> 00:11:56,799
我要这个字形画面

201
00:11:57,055 --> 00:11:58,079
果然

202
00:11:58,335 --> 00:12:00,895
我这个用黄色的线去取得出来

203
00:12:01,407 --> 00:12:02,431
每五个

204
00:12:02,687 --> 00:12:04,479
每五个我们来看看

205
00:12:04,735 --> 00:12:05,503
这事故

206
00:12:06,527 --> 00:12:07,807
他的这五个

207
00:12:08,063 --> 00:12:09,343
就是充值

208
00:12:10,367 --> 00:12:12,671
梳子就是啊所以是一个流水号码

209
00:12:14,719 --> 00:12:20,863
这个大小是吧所以它的间隔是这是9098 10a 810

210
00:12:21,887 --> 00:12:22,911
就是这个间隔

211
00:12:25,215 --> 00:12:27,263
但是这个五个35个

212
00:12:28,287 --> 00:12:30,079
这从b0调到40

213
00:12:30,591 --> 00:12:33,663
Ambient lab4这跳很远

214
00:12:33,919 --> 00:12:35,967
反正这是另外的5块

215
00:12:36,735 --> 00:12:41,599
他说这个片子里的也不一样这个舞的160跳到6080

216
00:12:42,623 --> 00:12:44,159
这都是不连续的了

217
00:12:45,695 --> 00:12:47,999
同样的讨论在左手边

218
00:12:49,023 --> 00:12:50,303
也是五个

219
00:12:50,815 --> 00:12:53,631
按下面的五个按键下面的五个

220
00:12:54,143 --> 00:12:55,935
是分离的

221
00:12:59,519 --> 00:13:01,311
这就是我们的第3版本

222
00:13:02,079 --> 00:13:06,431
把内存分配的动作不要再散落于

223
00:13:07,199 --> 00:13:08,735
杂乱的

224
00:13:09,759 --> 00:13:10,271
在

225
00:13:10,527 --> 00:13:11,295
这个

226
00:13:11,551 --> 00:13:13,343
Class都写一份出来

227
00:13:13,599 --> 00:13:14,367
不要这样

228
00:13:14,623 --> 00:13:20,767
我们把它集中到一个所谓的locator去这个allocate里面维护

229
00:13:21,023 --> 00:13:22,047
一条链表

230
00:13:23,327 --> 00:13:25,119
20这个l o o k的是

231
00:13:25,631 --> 00:13:31,775
专属于某的cosplay

232
00:13:33,311 --> 00:13:35,871
这就是我们的版本班

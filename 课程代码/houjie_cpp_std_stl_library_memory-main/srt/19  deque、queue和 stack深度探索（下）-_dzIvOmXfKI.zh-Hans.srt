1
00:00:06,656 --> 00:00:07,424
下看

2
00:00:09,472 --> 00:00:15,616
对于这个剩下的一个我要躺着比较大的主题就是他怎么模拟连续

3
00:00:15,872 --> 00:00:16,384
去空间

4
00:00:17,920 --> 00:00:19,712
模拟连续空间

5
00:00:20,992 --> 00:00:22,784
他当然就着落在这些

6
00:00:23,040 --> 00:00:27,136
迭代器的加加减减和加等于减等于这些动作上面

7
00:00:28,928 --> 00:00:29,952
他一定要能够

8
00:00:30,208 --> 00:00:31,744
检查边界

9
00:00:32,000 --> 00:00:32,768
跳到

10
00:00:34,304 --> 00:00:36,096
另一个反冲去去

11
00:00:36,864 --> 00:00:41,728
一定要在隐藏的有这些功能让使用者不知不觉的

12
00:00:42,752 --> 00:00:46,080
我们先看看这里所呈现的人这些函数

13
00:00:46,848 --> 00:00:49,152
这些函数都不是迭代器

14
00:00:49,664 --> 00:00:52,736
我们先看看这些函数传回什么东西

15
00:00:54,784 --> 00:00:57,344
Trump应该成为铜元素

16
00:00:57,600 --> 00:00:59,648
这个应该从回回吧那个元素

17
00:01:00,928 --> 00:01:02,464
他们所做的事情吗

18
00:01:05,536 --> 00:01:09,632
这个图已经呈现了这个图出现好几次这个图已经呈现

19
00:01:10,912 --> 00:01:17,056
这一个容器本身有一个大的永远只相同有一个finish永远指向为

20
00:01:17,312 --> 00:01:18,592
所以

21
00:01:18,848 --> 00:01:20,640
Front就传回

22
00:01:20,896 --> 00:01:22,688
Start所吃的东西

23
00:01:23,712 --> 00:01:24,224
Back

24
00:01:24,480 --> 00:01:25,760
坐船回

25
00:01:26,016 --> 00:01:27,808
Finish说吃的东西

26
00:01:28,832 --> 00:01:30,368
不对我讲太快了

27
00:01:30,624 --> 00:01:31,648
Finish

28
00:01:31,904 --> 00:01:35,744
所指的是最后一个元素的下一位置

29
00:01:36,000 --> 00:01:37,792
所以你要先倒退一个

30
00:01:39,584 --> 00:01:40,096
你看

31
00:01:40,352 --> 00:01:41,888
这个函数

32
00:01:42,144 --> 00:01:42,912
是

33
00:01:43,168 --> 00:01:45,984
把finish倒退格

34
00:01:47,008 --> 00:01:52,640
而且放到骗子然后把天不捡捡到退一个以后取出那一个的元素出来

35
00:01:52,896 --> 00:01:55,200
这才是最后一个元素

36
00:01:57,760 --> 00:01:58,784
Size

37
00:02:01,344 --> 00:02:02,880
目前有多少元素

38
00:02:03,392 --> 00:02:03,904
放

39
00:02:04,160 --> 00:02:07,744
头衔尾部队尾巴剪发剪头

40
00:02:08,000 --> 00:02:09,280
Finish

41
00:02:10,048 --> 00:02:11,072
减掉Spark

42
00:02:13,120 --> 00:02:17,216
检的这个动作我特别用不同的颜色标出来

43
00:02:19,264 --> 00:02:19,776
就是

44
00:02:20,032 --> 00:02:24,384
迭代器一定是对于这个检做了操作符重载

45
00:02:26,176 --> 00:02:30,016
你现在可以想象一下他说他做的事情是什么

46
00:02:31,040 --> 00:02:36,416
他一定是在看这两个迭代器中间有多少个缓冲区

47
00:02:37,440 --> 00:02:43,328
把这个缓冲区的各组成理缓冲区里面的元素的个数

48
00:02:45,632 --> 00:02:49,216
我刚说还没讲完但是我刚所说的话是什么意思呢

49
00:02:49,728 --> 00:02:51,008
比如现在这样好了

50
00:02:54,080 --> 00:02:55,872
Finish指的是

51
00:02:56,896 --> 00:02:57,408
3

52
00:02:57,664 --> 00:03:00,736
其实只到这里了但是它的前一个是最

53
00:03:00,992 --> 00:03:02,528
最finish的这里

54
00:03:03,808 --> 00:03:04,576
Dart

55
00:03:04,832 --> 00:03:05,344
到这里

56
00:03:06,112 --> 00:03:07,392
他们中间

57
00:03:09,184 --> 00:03:14,048
从他们中间夹了多少中区那这个图自己处理处

58
00:03:14,816 --> 00:03:16,352
一个两个三个

59
00:03:18,144 --> 00:03:21,472
每个缓冲区18个元素是38 24

60
00:03:22,240 --> 00:03:23,264
24个小时

61
00:03:24,800 --> 00:03:26,336
然后这一个

62
00:03:26,592 --> 00:03:28,384
Finish本身

63
00:03:28,896 --> 00:03:30,176
有多少个元素呢

64
00:03:30,432 --> 00:03:34,528
我们现在是华盛顿了你一看就知道了这是没有人数0

65
00:03:35,808 --> 00:03:37,856
OPPO端这边的有三个元素

66
00:03:38,368 --> 00:03:40,928
所以刚刚有24个

67
00:03:41,440 --> 00:03:42,976
加上这里的三个

68
00:03:43,232 --> 00:03:44,768
他们两者的距离

69
00:03:45,280 --> 00:03:47,584
24加37

70
00:03:49,632 --> 00:03:53,728
只要把刚刚说了这段话把它编程变成程序

71
00:03:55,008 --> 00:03:57,824
就是这个建豪的动作

72
00:04:00,128 --> 00:04:06,272
也就是迭代器对于这个检号作操作符重载他重返重新定义成什么呢

73
00:04:06,528 --> 00:04:09,344
就是刚刚我口头上说的这些事情

74
00:04:11,904 --> 00:04:13,696
我们就会看到他的眼袋吗

75
00:04:17,280 --> 00:04:18,559
在我家

76
00:04:20,351 --> 00:04:23,679
现在就真正进入了你看我这边有一句话说

77
00:04:24,447 --> 00:04:30,591
如何模拟连续空间呢其实全部都是一层胃的功效功

78
00:04:30,847 --> 00:04:32,127
人功劳

79
00:04:33,663 --> 00:04:39,039
所以接下来的正是张是五张同一片全部都是迭代器的操作符重载

80
00:04:39,807 --> 00:04:41,087
掀开新号

81
00:04:41,343 --> 00:04:42,879
型号是取值

82
00:04:43,391 --> 00:04:47,743
取值这个跟他是不是连续这个假相关

83
00:04:48,255 --> 00:04:50,303
他取值得去的就是

84
00:04:51,071 --> 00:04:53,375
迭代器是四格

85
00:04:53,631 --> 00:04:57,727
这次格目前此项哪个元素最红色的这一根是current

86
00:04:58,751 --> 00:05:04,639
所以你要对这个迭代器取值其实就是取科人所知的东西

87
00:05:04,895 --> 00:05:05,919
这个动作

88
00:05:10,271 --> 00:05:11,295
箭头符号呢

89
00:05:11,807 --> 00:05:14,623
箭头符号里面借用了型号

90
00:05:15,135 --> 00:05:18,975
这部分我就不讲了你可以回去体会工作这么的简单

91
00:05:22,815 --> 00:05:23,839
捡好呢

92
00:05:24,351 --> 00:05:29,215
刚刚才提过在上页QQ才去住过我们现在看它怎么实现的

93
00:05:31,775 --> 00:05:34,591
这边有注解

94
00:05:36,127 --> 00:05:41,759
两个迭代器要相简要算出距离多少元素

95
00:05:42,527 --> 00:05:45,855
好首先这一个是什么这个是什么

96
00:05:47,135 --> 00:05:48,415
Buffersize

97
00:05:49,695 --> 00:05:52,255
刚刚才看过buffersize的那个函数

98
00:05:52,511 --> 00:05:53,279
再看一次

99
00:05:56,607 --> 00:05:57,119
这里

100
00:05:57,887 --> 00:06:02,239
这个名字不太一样的70%是这里是再算出那个

101
00:06:02,751 --> 00:06:04,031
大小的名称

102
00:06:04,543 --> 00:06:06,847
其实就是这个部分的动作啊

103
00:06:07,615 --> 00:06:08,383
Office

104
00:06:08,895 --> 00:06:10,431
再回到这边来

105
00:06:12,735 --> 00:06:13,759
Buffersize

106
00:06:16,063 --> 00:06:19,135
你这个图来看的话那就是吧

107
00:06:20,671 --> 00:06:22,719
霸州市的最快的一段动作

108
00:06:23,231 --> 00:06:24,511
还要成语

109
00:06:24,767 --> 00:06:25,791
这会是什么

110
00:06:26,815 --> 00:06:29,119
首尾buffer之间的

111
00:06:29,375 --> 00:06:30,143
塑料

112
00:06:30,911 --> 00:06:33,215
到底有几种花粉

113
00:06:34,239 --> 00:06:35,263
这是怎么做的

114
00:06:36,287 --> 00:06:36,799
你有

115
00:06:38,079 --> 00:06:40,895
一根有大器和第2期

116
00:06:42,943 --> 00:06:43,711
你把

117
00:06:45,247 --> 00:06:49,343
Xsmb好了AKB48

118
00:06:49,599 --> 00:06:52,927
等一下从A到B那么B减a

119
00:06:53,695 --> 00:06:55,487
再说一次

120
00:06:55,999 --> 00:06:58,047
从A这个迭代器

121
00:06:58,559 --> 00:07:00,351
倒逼这个迭代器

122
00:07:01,375 --> 00:07:03,679
所以他们的距离要比价

123
00:07:05,471 --> 00:07:08,799
那第1节之后了就是这里的动作

124
00:07:13,151 --> 00:07:14,687
这个肉的是什么

125
00:07:15,967 --> 00:07:19,807
这个node的就是这个控制中心里面的

126
00:07:20,575 --> 00:07:22,623
就是这个蓝色的这个note

127
00:07:23,135 --> 00:07:27,487
他将会是控制中心里面的某一个格子

128
00:07:29,791 --> 00:07:32,095
所以这两个No的相减

129
00:07:32,607 --> 00:07:37,215
就是两根迭代器在这个控制中心里面的距离

130
00:07:40,031 --> 00:07:41,311
还要再减一

131
00:07:42,847 --> 00:07:43,615
因为

132
00:07:44,127 --> 00:07:45,407
你这个图来看

133
00:07:47,455 --> 00:07:48,479
那个简易就是

134
00:07:49,503 --> 00:07:50,783
7点的飞快

135
00:07:53,343 --> 00:07:54,879
我们现在要算的是

136
00:07:55,135 --> 00:07:57,183
整个完整的缓冲区

137
00:07:58,207 --> 00:07:59,743
你这个图来看

138
00:08:01,023 --> 00:08:04,607
角色尾巴是finish我们要飞的是强大的

139
00:08:04,863 --> 00:08:05,631
头吗

140
00:08:07,679 --> 00:08:09,471
这两者之间

141
00:08:11,007 --> 00:08:13,055
完整的缓冲区有三个

142
00:08:14,335 --> 00:08:15,615
这就是这一个动作

143
00:08:17,407 --> 00:08:19,455
说剪完之后还要再减一

144
00:08:20,735 --> 00:08:24,319
有点像那个植树问题他那个编解你要考虑一下

145
00:08:25,087 --> 00:08:27,135
不能放进来的就不要放弃了

146
00:08:28,671 --> 00:08:33,023
这样就吃三个玩意图来看三个完整的缓冲区

147
00:08:33,279 --> 00:08:36,863
去场以每个缓冲区的元素个数

148
00:08:37,119 --> 00:08:39,167
你这个图来看这是吧

149
00:08:39,423 --> 00:08:42,495
这个呢是338 24

150
00:08:43,519 --> 00:08:47,615
用图来解释比较清楚啊24个

151
00:08:47,871 --> 00:08:51,455
然后还要加上什么呢

152
00:08:52,479 --> 00:08:53,503
加上

153
00:08:54,783 --> 00:08:55,295
这个

154
00:08:55,551 --> 00:08:58,367
刚刚说A到B a b两者

155
00:08:59,135 --> 00:09:01,695
代表的两个缓冲区有多少

156
00:09:01,951 --> 00:09:02,719
元素

157
00:09:03,487 --> 00:09:05,023
所以这个是

158
00:09:06,303 --> 00:09:07,839
某个缓冲区的

159
00:09:08,095 --> 00:09:11,679
人数和另一个缓冲区的剩余数

160
00:09:15,007 --> 00:09:20,895
这样子不能加起来就是这两个迭代器的距离所谓距离就是

161
00:09:21,151 --> 00:09:22,431
多少个元素

162
00:09:22,687 --> 00:09:23,711
在其间

163
00:09:26,783 --> 00:09:28,575
减法是这个动作

164
00:09:37,535 --> 00:09:38,047
好

165
00:09:38,303 --> 00:09:38,815
这是

166
00:09:39,327 --> 00:09:45,215
我们在谈论是制造一个连续空间的假象一个操作符重载

167
00:09:45,727 --> 00:09:47,263
第1个

168
00:09:48,543 --> 00:09:49,823
我们再往下看

169
00:09:52,639 --> 00:09:53,919
加加减减

170
00:09:54,687 --> 00:09:56,991
这个家家有两个版本

171
00:09:57,503 --> 00:10:02,111
其中的下面这个版本这里的家家要用是上面这个版本

172
00:10:03,903 --> 00:10:06,207
这个一个很好的写法

173
00:10:06,463 --> 00:10:12,607
这些有时候出手一个大家风范对于操作符重载的加加减减的两个

174
00:10:14,911 --> 00:10:16,191
大家风范就是这样

175
00:10:17,471 --> 00:10:18,751
知名的

176
00:10:19,007 --> 00:10:20,543
酷了20怎么做

177
00:10:21,311 --> 00:10:23,871
用后佳佳去调用钱佳佳

178
00:10:24,127 --> 00:10:26,175
后天简要用钱奖

179
00:10:26,431 --> 00:10:30,783
请跟后前面提过吗s626

180
00:10:31,807 --> 00:10:33,343
好现在来看下家

181
00:10:35,647 --> 00:10:39,743
一个迭代器家家就是要移到下一个元素去

182
00:10:40,511 --> 00:10:41,791
所以在这个地方

183
00:10:42,815 --> 00:10:47,935
就先把科软科人就是指向我这个地方这一个应该变成紫色的活

184
00:10:48,191 --> 00:10:49,471
这次没有标好

185
00:10:52,543 --> 00:10:56,127
Baccarin加加加完之后

186
00:10:57,151 --> 00:11:00,223
看看是不是到达的边界

187
00:11:02,015 --> 00:11:03,807
我们回到前面的图来看

188
00:11:05,599 --> 00:11:09,695
每一个迭代器都有First Class

189
00:11:10,207 --> 00:11:11,743
边界

190
00:11:13,279 --> 00:11:17,631
所以刚刚你看的那个动作源代码的动作就是把current

191
00:11:17,887 --> 00:11:19,423
佳佳之后

192
00:11:19,679 --> 00:11:21,983
看看是不是到的边界

193
00:11:24,031 --> 00:11:30,175
当然家家之后不可能到这一个边界一定是要检查这一个连接这里有两个边界

194
00:11:30,431 --> 00:11:30,943
这一个

195
00:11:31,199 --> 00:11:34,015
如果剪剪裁要剪到这个边界

196
00:11:37,343 --> 00:11:38,879
水刚刚去吃什么呢

197
00:11:39,135 --> 00:11:45,279
你把科润家家之后看看是不是到达边界认识的就是刚刚涂上右边那个便捷

198
00:11:46,559 --> 00:11:49,887
如果没有到达边界那这件事情就结束了

199
00:11:50,911 --> 00:11:52,191
已经移动了

200
00:11:52,959 --> 00:11:57,311
但如果到达边界那他就应该跳到下一个缓冲区去

201
00:11:57,823 --> 00:11:59,871
就是这个动作

202
00:12:02,175 --> 00:12:04,735
这个ceph node源代码在这里

203
00:12:06,783 --> 00:12:10,623
他要怎么跳到下个缓冲区他要回到控制中心

204
00:12:10,879 --> 00:12:12,671
然后移动到下一格

205
00:12:13,183 --> 00:12:16,255
下一个四个指针指向另一个东西

206
00:12:17,279 --> 00:12:19,839
这样就是跳到下一个东西去了

207
00:12:25,727 --> 00:12:31,871
我们再一次回到这里来加加就是把current当前的元素移动一个

208
00:12:34,175 --> 00:12:36,735
移动完之后检查有没有到边界

209
00:12:38,271 --> 00:12:40,575
如果到了边界就重新测一次

210
00:12:42,623 --> 00:12:44,927
当然你一移动到边界之后

211
00:12:45,183 --> 00:12:51,327
移动到下一个缓冲区之后的那个边那个缓冲期又要从边界要塞

212
00:12:53,119 --> 00:12:55,679
这边有first test

213
00:12:57,983 --> 00:12:59,519
好这里是嘉嘉

214
00:12:59,775 --> 00:13:01,311
简简单一样

215
00:13:01,823 --> 00:13:03,615
你把current

216
00:13:05,407 --> 00:13:06,687
能不能先剪剪

217
00:13:07,199 --> 00:13:07,711
不行

218
00:13:08,223 --> 00:13:10,271
要先看看是不是赢在起点

219
00:13:11,807 --> 00:13:13,343
我们用这个图来解释

220
00:13:14,367 --> 00:13:17,695
假设现在current就是指向这里

221
00:13:19,487 --> 00:13:25,631
还要浅浅的话那你不能先做剪剪的动作应该牵头就没有了别到悬崖下面去了

222
00:13:25,887 --> 00:13:26,911
所以

223
00:13:27,935 --> 00:13:29,983
要先做什么事情看看

224
00:13:30,751 --> 00:13:33,055
先看看它是这里这个动作

225
00:13:34,847 --> 00:13:35,871
我回到这个图来

226
00:13:36,639 --> 00:13:39,967
先看看目前到底是不是在边界上

227
00:13:40,991 --> 00:13:44,063
如果在边界上的话他就应该

228
00:13:44,319 --> 00:13:46,623
跳到另一个缓冲区取

229
00:13:47,647 --> 00:13:48,927
我们拿这个出来看好了

230
00:13:49,439 --> 00:13:50,463
享受现在

231
00:13:50,975 --> 00:13:51,999
迭代器指向这里

232
00:13:53,535 --> 00:13:55,327
说要剪剪的话呢

233
00:13:55,583 --> 00:13:58,143
你看啊他已经在边界上

234
00:13:58,399 --> 00:14:00,959
就要退回这个控制中心

235
00:14:03,007 --> 00:14:05,823
找出它的前一个缓冲区在哪里

236
00:14:06,079 --> 00:14:08,383
我们再仔细看这个地方啊这个

237
00:14:09,151 --> 00:14:11,711
会回他的控制中心那是

238
00:14:12,479 --> 00:14:13,247
这一个

239
00:14:14,015 --> 00:14:17,087
真格的权利

240
00:14:17,343 --> 00:14:18,111
搜索连这个

241
00:14:19,391 --> 00:14:22,463
于是就那个标准它的前面在这里

242
00:14:24,767 --> 00:14:25,791
好看吗

243
00:14:29,631 --> 00:14:32,191
他一判断是在缓冲区的起点

244
00:14:32,959 --> 00:14:35,519
九窍之前一个缓冲区

245
00:14:37,823 --> 00:14:42,431
跳过去之后应该指向前一个缓冲区的最末端

246
00:14:44,223 --> 00:14:45,247
这是合理的吗

247
00:14:45,759 --> 00:14:47,039
看的是这个图

248
00:14:47,807 --> 00:14:48,831
刚刚在这里啊

249
00:14:49,855 --> 00:14:51,135
由于他们已经是

250
00:14:51,903 --> 00:14:53,439
临界点的边界了

251
00:14:53,695 --> 00:14:56,255
最退回控制中心

252
00:14:56,767 --> 00:14:59,839
找出前一个中区

253
00:15:00,607 --> 00:15:01,631
权力广东西的最

254
00:15:04,703 --> 00:15:05,727
最后一个元素

255
00:15:07,263 --> 00:15:08,287
这样就是一个

256
00:15:08,799 --> 00:15:10,079
剪剪的动作

257
00:15:24,159 --> 00:15:26,463
借由这里的加加减减

258
00:15:26,719 --> 00:15:31,071
让使用者感受不到有所谓的分段

259
00:15:31,583 --> 00:15:33,887
他感受到的是连续

260
00:15:36,703 --> 00:15:37,983
下一页

261
00:15:38,751 --> 00:15:40,799
刚刚那个家家跟检检视

262
00:15:41,567 --> 00:15:42,847
移动一个位置

263
00:15:45,407 --> 00:15:50,015
这可能号称他是连续空间所以应该可以移动

264
00:15:50,271 --> 00:15:51,295
N个位置

265
00:15:51,551 --> 00:15:53,855
不是每次都移动一个位置

266
00:15:54,367 --> 00:15:56,671
所以它提供了家等

267
00:15:58,975 --> 00:15:59,487
加蓬

268
00:15:59,999 --> 00:16:01,279
也提供了家

269
00:16:02,303 --> 00:16:05,375
余花你可以把一个iterator加55

270
00:16:05,631 --> 00:16:07,167
那就是移动五个元素

271
00:16:07,679 --> 00:16:09,215
我的家等入

272
00:16:10,239 --> 00:16:12,799
加更加等于你知道了的意思

273
00:16:13,823 --> 00:16:15,615
好这里的家

274
00:16:16,639 --> 00:16:19,711
里头的动作可以借用加等与来做

275
00:16:20,735 --> 00:16:21,247
所以

276
00:16:21,759 --> 00:16:24,319
这个关键在上面这块家等

277
00:16:27,135 --> 00:16:28,671
这里的动作

278
00:16:29,695 --> 00:16:32,255
你可以停止下来仔细的看

279
00:16:33,279 --> 00:16:37,119
我现在要移到前面去用图形来解释

280
00:16:39,167 --> 00:16:42,751
而我在看图形的时候说价是所讲的话

281
00:16:43,007 --> 00:16:45,567
实现出来就是你刚看到的那一夜

282
00:16:45,823 --> 00:16:47,615
我们早上比较大地图

283
00:16:48,639 --> 00:16:49,407
这个好了

284
00:16:52,223 --> 00:16:54,783
假设现在迭代器在这个位置上

285
00:16:56,319 --> 00:16:59,647
我们现在正在讨论的是家等就是要移动

286
00:17:00,671 --> 00:17:01,951
一个以上的位置

287
00:17:02,463 --> 00:17:07,583
比如说要啊我找一个比较好的情况啊

288
00:17:08,863 --> 00:17:09,631
好的

289
00:17:11,167 --> 00:17:12,191
就说这里好了

290
00:17:12,959 --> 00:17:13,727
在这样

291
00:17:16,543 --> 00:17:18,847
一个迭代期目前的客人

292
00:17:19,871 --> 00:17:21,151
指向这个地方

293
00:17:21,919 --> 00:17:24,479
如果你家等于3

294
00:17:24,735 --> 00:17:25,759
意思是什么呢

295
00:17:26,527 --> 00:17:28,831
我先我要我自己要记清楚的

296
00:17:29,087 --> 00:17:35,231
这里好家等13这里要移动到这里了

297
00:17:37,023 --> 00:17:39,071
但是如果加等于八呢

298
00:17:40,095 --> 00:17:42,143
那他应该是移动到这里了

299
00:17:43,423 --> 00:17:48,287
家一家2 Plus plus plus 5 PLUS 6 Plus 6 Plus这里

300
00:17:49,055 --> 00:17:50,335
假期加班

301
00:17:51,359 --> 00:17:53,151
可见他会跨越

302
00:17:55,711 --> 00:17:56,735
剪也是一样

303
00:17:57,759 --> 00:18:03,391
所以没事在家等于他这个做一个跳一个人的动作的时候

304
00:18:04,671 --> 00:18:10,815
要是由你来设计只要一点时间让你去思考你也会这么去刺激啊你怎么设计呢

305
00:18:11,071 --> 00:18:17,215
加完之后你会看看他有没有超过边界或者剪完之后看看他有没有超过边界

306
00:18:21,567 --> 00:18:27,711
加完不剪完之后是不是仍然落在同一个缓冲区这是要先判断的

307
00:18:28,991 --> 00:18:34,879
如果他仍然若在同一个目标点如果在同一个缓冲区的话就直接嫁过去就好了

308
00:18:35,135 --> 00:18:36,671
因为没有跨越边界

309
00:18:37,951 --> 00:18:43,071
但如果一检查一开始以检查出来我这么一条会跨越缓冲区的话

310
00:18:43,583 --> 00:18:44,863
他做法就不一样

311
00:18:45,887 --> 00:18:46,655
怎么办呢

312
00:18:47,423 --> 00:18:48,447
你看再看一次这里

313
00:18:49,471 --> 00:18:51,007
如果牙加八的话

314
00:18:51,263 --> 00:18:56,383
1检查还没有结啊一检查已经知道这个比将会跨越缓冲区

315
00:18:56,895 --> 00:18:59,455
在这里要加吧那他要到这里来

316
00:18:59,967 --> 00:19:01,247
因此

317
00:19:02,271 --> 00:19:05,855
他就要算出来那我要跨越多少个环中去

318
00:19:07,135 --> 00:19:13,279
这是很容易算的这些你要跳多少的距离去除以每个缓冲区的大小

319
00:19:13,535 --> 00:19:17,119
你就知道要画多少个还怎么去你吃

320
00:19:17,631 --> 00:19:19,423
仍然回到这个原始状态

321
00:19:20,447 --> 00:19:23,263
你知道要跨越多少缓冲区之后

322
00:19:23,519 --> 00:19:26,591
这个迭代器就要先退回控制中心

323
00:19:27,615 --> 00:19:29,407
先退回控制中心的这里

324
00:19:30,687 --> 00:19:34,527
贾胜要前进三个缓冲区这里就前进三个

325
00:19:34,783 --> 00:19:37,087
前进两个的话这里就前进两个

326
00:19:38,111 --> 00:19:41,183
终于到达了正确的缓冲区之后

327
00:19:42,207 --> 00:19:43,743
再决定要走几个

328
00:19:47,583 --> 00:19:48,863
整理一次

329
00:19:49,119 --> 00:19:50,399
整理一下就是

330
00:19:50,911 --> 00:19:54,751
当他要跳要n的距离不管是往前跳或往后跳

331
00:19:55,263 --> 00:19:59,359
他都会先判断一下到底会不会跨越缓冲区

332
00:20:00,127 --> 00:20:02,175
如果不跨越缓冲区

333
00:20:02,687 --> 00:20:03,967
事情很简单

334
00:20:04,479 --> 00:20:06,783
如果绘画乐缓冲区

335
00:20:07,039 --> 00:20:09,087
他要算出要跨几个

336
00:20:10,111 --> 00:20:11,903
然后退回控制中心

337
00:20:14,207 --> 00:20:16,767
退回去的目的就是要跨越还中去了

338
00:20:17,535 --> 00:20:19,071
跨越之后

339
00:20:20,095 --> 00:20:20,863
再决定

340
00:20:22,143 --> 00:20:23,423
剩下几个要走

341
00:20:25,983 --> 00:20:27,263
这一些动作

342
00:20:27,775 --> 00:20:29,055
表现出来

343
00:20:29,823 --> 00:20:31,103
就是这里的

344
00:20:31,359 --> 00:20:32,639
佳佳

345
00:20:32,895 --> 00:20:36,479
我们刚刚是在谈这个吗不是我们在弹夹等于

346
00:20:37,247 --> 00:20:38,271
这些动作

347
00:20:39,807 --> 00:20:41,087
看看这边的注解

348
00:20:41,343 --> 00:20:46,207
这些人需要你花时间理请阁下来花时间慢慢的去屑去想

349
00:20:46,463 --> 00:20:47,743
注意我这个注解

350
00:20:47,999 --> 00:20:49,535
你看第1个注解说

351
00:20:49,791 --> 00:20:52,095
目标位置是在同一种中区内

352
00:20:52,351 --> 00:20:53,631
安娜非常简单

353
00:20:54,399 --> 00:20:56,959
如果不在同一个缓冲区内

354
00:20:57,727 --> 00:21:00,287
那么切换到正确的话怎么去

355
00:21:01,823 --> 00:21:05,151
然后再切换到正确的元素位置

356
00:21:05,919 --> 00:21:08,735
这都是刚刚口与做错的事情

357
00:21:17,440 --> 00:21:18,976
碱等也是一样

358
00:21:21,024 --> 00:21:26,400
家家等于是要跳往前n个元素满减等一个往后往的元素

359
00:21:30,240 --> 00:21:31,776
怎么这么简单呢

360
00:21:32,032 --> 00:21:33,056
这里怎么这么简单

361
00:21:33,568 --> 00:21:35,616
刚刚这个家等于说那么多

362
00:21:35,872 --> 00:21:37,152
剪刀鱼怎么那么少呢

363
00:21:37,664 --> 00:21:41,760
因为这个简等于可以用加等于来表现

364
00:21:42,784 --> 00:21:44,320
太太有意思了

365
00:21:44,576 --> 00:21:46,112
这个减等于

366
00:21:46,368 --> 00:21:50,208
等于等于什么事情相当于什么事情相当于

367
00:21:50,976 --> 00:21:53,024
加等于一个富文

368
00:21:54,304 --> 00:21:55,072
太好玩了

369
00:21:57,632 --> 00:21:58,912
反向操作就是了

370
00:22:03,008 --> 00:22:04,544
号中括号是什么

371
00:22:05,568 --> 00:22:11,456
只要连续空间的这一种和的假象象这个就是一个假象的连续空间

372
00:22:11,712 --> 00:22:12,992
他都应该提供

373
00:22:13,248 --> 00:22:14,784
中括号这一个

374
00:22:15,040 --> 00:22:16,832
这是说的下标操作符

375
00:22:17,600 --> 00:22:19,136
从挂号这个操作符

376
00:22:19,392 --> 00:22:20,928
中括号操作符

377
00:22:22,208 --> 00:22:24,256
这次订的几个元素

378
00:22:25,024 --> 00:22:26,048
那怎么办呢

379
00:22:27,072 --> 00:22:29,888
就是加到那个第n个位置去吗

380
00:22:30,400 --> 00:22:34,496
有说就中括号元素是参数是恩

381
00:22:35,520 --> 00:22:36,544
我要做什么事情

382
00:22:36,800 --> 00:22:38,336
就是把这个迭代器

383
00:22:38,592 --> 00:22:42,176
移动到n位置然后那拿出他的词出来

384
00:22:42,944 --> 00:22:44,480
中国好的东西

385
00:22:48,576 --> 00:22:51,136
好整个DAC

386
00:22:51,392 --> 00:22:52,416
很好玩

387
00:22:52,672 --> 00:22:58,560
我们已经介绍过它的数据结构它里面有些什么东西我们也介绍它的迭代器

388
00:22:58,816 --> 00:23:01,376
有这些迭代器的操作符重载

389
00:23:01,888 --> 00:23:02,656
就知道

390
00:23:03,424 --> 00:23:05,216
哈可以去欺骗

391
00:23:05,728 --> 00:23:06,496
使用者

392
00:23:07,008 --> 00:23:09,312
告诉使用者说他是连续的

393
00:23:09,568 --> 00:23:13,664
虽然他其实不是延续这个欺骗是单一的

394
00:23:13,920 --> 00:23:15,968
让使用者很好用

395
00:23:16,480 --> 00:23:17,760
好好的去使用它

396
00:23:20,576 --> 00:23:26,720
针叶我仍然跟前面一样惯例了我要把4.9版就算是非常新的版本里面

397
00:23:26,976 --> 00:23:28,000
里面的结构

398
00:23:28,256 --> 00:23:29,536
拿出来给各位看看

399
00:23:32,352 --> 00:23:33,120
样的

400
00:23:33,376 --> 00:23:38,752
在2.9本就是比较旧的版本的单一

401
00:23:41,056 --> 00:23:42,848
24.9能变成这么多

402
00:23:43,616 --> 00:23:49,760
其实这个慢慢的去归纳出一个接一个一个情况就是各个容器从本来吧

403
00:23:50,016 --> 00:23:56,160
翻译的可是现在变成复杂它都变成什么样的复杂情况的他都是那个本

404
00:23:56,416 --> 00:23:58,208
有一个被子

405
00:23:58,720 --> 00:24:01,792
这个杯子里面的会有一个

406
00:24:02,560 --> 00:24:05,120
数据这个数据是什么事

407
00:24:05,376 --> 00:24:07,424
右手边这个implementation

408
00:24:08,192 --> 00:24:11,776
这个也可以选用会计政治

409
00:24:13,824 --> 00:24:15,104
每一个容器都有

410
00:24:15,360 --> 00:24:20,224
都被设计成一个基本这样的形式形式四个class

411
00:24:22,272 --> 00:24:24,064
我的概念没有变我的

412
00:24:24,576 --> 00:24:27,648
斑点没有变就是其实没必要这样

413
00:24:28,928 --> 00:24:33,536
任由其的是根本这里不应该继承和OK的

414
00:24:34,304 --> 00:24:39,936
你怎么能说这个东西是一个用public记者说的是一个OK的

415
00:24:40,192 --> 00:24:41,472
不对不对

416
00:24:42,496 --> 00:24:46,336
不过这个反正他就设计成这样了没有影响功能了

417
00:24:48,128 --> 00:24:49,152
好

418
00:24:50,944 --> 00:24:53,504
这张图里面有呈现出这个大小

419
00:24:54,528 --> 00:24:59,136
我们前面在很单纯的单一克拉斯里面对于贝壳的大小刚样计算过

420
00:25:00,672 --> 00:25:04,256
我现在在这种复杂的情况之下那来再谈一次好了

421
00:25:04,512 --> 00:25:05,280
这个多大

422
00:25:05,792 --> 00:25:06,816
他没有数据

423
00:25:07,328 --> 00:25:08,096
其他势力

424
00:25:09,120 --> 00:25:15,264
但是他有父类别父类所以他的大小就是负那个大小为多大呢为了有一个

425
00:25:15,520 --> 00:25:16,032
数据

426
00:25:17,056 --> 00:25:18,592
这个数据是什么

427
00:25:18,848 --> 00:25:20,384
这个数据是这种类型

428
00:25:21,152 --> 00:25:22,176
这种类型多大

429
00:25:23,712 --> 00:25:24,736
四个东西

430
00:25:25,504 --> 00:25:26,784
华加起来就对了

431
00:25:27,808 --> 00:25:29,856
这个它还有一个父类

432
00:25:30,368 --> 00:25:33,440
这个父类分配器的是没有大小

433
00:25:34,464 --> 00:25:36,256
最主要就是看这四个

434
00:25:36,768 --> 00:25:38,816
是个多大呢看一下

435
00:25:39,072 --> 00:25:41,632
两根指针所以25次

436
00:25:42,912 --> 00:25:43,936
两个迭代器

437
00:25:45,216 --> 00:25:46,496
每个迭代器是多大

438
00:25:47,264 --> 00:25:48,800
觉得气的设计在这里

439
00:25:50,080 --> 00:25:50,848
四个字成语

440
00:25:51,616 --> 00:25:52,896
四个字都是16

441
00:25:53,152 --> 00:25:58,016
最低养个迭代器是32加上这里发誓词

442
00:25:58,272 --> 00:26:03,648
它的大小跟前面旧版2.91版的那个大小是一样的

443
00:26:09,280 --> 00:26:11,072
因为在这边注意这里

444
00:26:11,584 --> 00:26:14,144
这个DAC有一个父类

445
00:26:14,912 --> 00:26:16,448
这个服务类

446
00:26:16,704 --> 00:26:19,520
这个父类好那这个DAC

447
00:26:19,776 --> 00:26:23,104
参数了现在只有两个参数我把参数

448
00:26:23,616 --> 00:26:25,152
他没有第3个

449
00:26:25,408 --> 00:26:27,456
我们很快看一下原来的版本是什么

450
00:26:33,600 --> 00:26:34,112
在这里

451
00:26:34,624 --> 00:26:37,440
它是由三个模板参数

452
00:26:38,208 --> 00:26:39,744
现在少掉了第3个

453
00:26:40,512 --> 00:26:41,024
好

454
00:26:41,792 --> 00:26:43,840
现在准备新版本来

455
00:26:45,120 --> 00:26:45,888
他现在

456
00:26:46,144 --> 00:26:52,288
不允许为了从4.5点就没了也许更早就没了我没有办法哪一个版本都看了

457
00:26:52,544 --> 00:26:55,104
很早时候就取消掉这一个

458
00:26:55,616 --> 00:26:59,712
取消了这一个人我是觉得有好也有坏了

459
00:27:00,736 --> 00:27:02,528
好的地方就是

460
00:27:04,064 --> 00:27:10,208
好像其实没有必要让使用的知道的这么复杂这个容器这么设计连他内部原来他是

461
00:27:10,464 --> 00:27:16,608
分段的没断多大让使用者去吃到让使用者是指定好像未免

462
00:27:16,864 --> 00:27:20,704
附录了太多他自己其实现上的一些细节

463
00:27:20,960 --> 00:27:24,032
可能他是这个考量所以清单的就把它拿掉

464
00:27:26,080 --> 00:27:28,640
这是有好有坏里面的好

465
00:27:29,664 --> 00:27:34,784
他是说所谓坏那就是对于我们中很清楚知道里面结构的女人

466
00:27:35,552 --> 00:27:40,416
也许我可以调整那个buffer缓冲区里面的元素个数

467
00:27:41,440 --> 00:27:47,584
好如果你能力够你可以去去去去驾校模拟想象的整个状况的话你又知道他了

468
00:27:47,840 --> 00:27:52,192
他里面是这么一个结构的话那有这个第3参数你可以

469
00:27:52,960 --> 00:27:54,752
你可以去调整它

470
00:27:55,520 --> 00:27:57,056
但是现在的确

471
00:27:57,568 --> 00:27:59,104
不允许你调整

472
00:27:59,616 --> 00:28:02,944
他用的就是那个那个默认的设计方式

473
00:28:03,456 --> 00:28:09,600
510个字节去除以那个数的大小来当成缓冲区的人

474
00:28:09,856 --> 00:28:10,624
Gosu

475
00:28:12,416 --> 00:28:13,952
这边有现在没有

476
00:28:15,232 --> 00:28:17,280
我刚刚讲的那一段的这个地方

477
00:28:19,072 --> 00:28:21,632
这是新版本

478
00:28:21,888 --> 00:28:28,032
状况下面相同影片前面的这些图整个集合起来

479
00:28:28,544 --> 00:28:34,688
让他在观念能够再一次的整理这一部分就是它的一些Class的关系

480
00:28:35,968 --> 00:28:39,552
那这一张图那就是吧

481
00:28:39,808 --> 00:28:40,576
Dec

482
00:28:40,832 --> 00:28:46,976
这个里面有四个变量化出来这四个变量分别要

483
00:28:47,232 --> 00:28:51,840
要表现的一个就是控制中心控制中心

484
00:28:52,096 --> 00:28:56,704
所控制的是一块一块一块块的缓冲区

485
00:28:57,728 --> 00:29:03,872
给我这边有一个大小是在记录这个控制中心可以容纳多少根指针

486
00:29:04,128 --> 00:29:10,272
另外还有一个大的跟finish这是两个迭代器分别指向

487
00:29:10,528 --> 00:29:13,856
所有元素的头和尾

488
00:29:14,112 --> 00:29:18,208
姜别是就更清楚了

489
00:29:18,464 --> 00:29:23,840
还有一点有一件事情当然一直没有提到的就是

490
00:29:24,096 --> 00:29:30,240
这个控制中心前面我有提过他是一个呗

491
00:29:31,520 --> 00:29:37,664
这个图形化的花格如果有九个缓冲区的话就发个旧部

492
00:29:37,920 --> 00:29:44,064
所以他就会扩充变成16个一扩充成16个的时候再与原来的吧

493
00:29:44,320 --> 00:29:50,464
花蛤的只要copy前面我们讲不再提供扩充了之后要靠逼

494
00:29:50,720 --> 00:29:56,864
他有一个聪明他有一个一个做法是什么呢他copy到中

495
00:29:57,120 --> 00:30:03,264
算来也就是说本来有八个要copy到16

496
00:30:03,520 --> 00:30:09,664
六个空间去的时候他是靠鼻到16的中段位的就

497
00:30:09,920 --> 00:30:13,248
就是让左边跟右边都有一些

498
00:30:13,504 --> 00:30:19,648
出来这样就可以像所

499
00:30:19,904 --> 00:30:26,048
扩充缓冲区或者向右库存缓冲区等量的过程

500
00:30:26,304 --> 00:30:32,448
我再说一次就是他是copy到中断的

501
00:30:32,704 --> 00:30:38,848
好这个就是DAC相当有趣的一个

502
00:30:39,104 --> 00:30:45,248
设计而且非常好用我们

503
00:30:45,504 --> 00:30:51,648
做起了接下面的两个容器在因为

504
00:30:51,904 --> 00:30:58,048
后面的这两个容器和DAC脱离不了关系一个叫

505
00:30:58,304 --> 00:31:04,448
里面的第1季那个就是就是这个

506
00:31:05,472 --> 00:31:11,616
另外一个就是去武汉市这个大家在在计算机领域

507
00:31:11,872 --> 00:31:17,760
这一定是从人想我们看看这个是怎么做的

508
00:31:18,272 --> 00:31:24,160
这一张图很清楚的表现出

509
00:31:24,672 --> 00:31:30,816
它是双向开口就出这个样子就是长

510
00:31:31,072 --> 00:31:37,216
一个是先进先出一个是先进后出

511
00:31:37,472 --> 00:31:43,616
所以你可以感受到

512
00:31:43,872 --> 00:31:50,016
根秀里头我们可以不必重写这些功能我们只要让他那

513
00:31:50,272 --> 00:31:56,416
然后疯掉其中某些工作就形成的

514
00:31:56,672 --> 00:32:02,816
每个新的容器出来就是

515
00:32:03,072 --> 00:32:09,216
什么叫做内含一个DAC并且封装封住其封锁住某些

516
00:32:09,472 --> 00:32:14,592
这功能这是什么意思呢源代码在这里你看器

517
00:32:14,848 --> 00:32:20,992
克拉斯特这个地方它的数据data在哪里

518
00:32:21,248 --> 00:32:27,392
你这个c c是什么菜比较Secrets是什么

519
00:32:27,648 --> 00:32:33,792
上看模板参数指定为它默认为不有一个

520
00:32:34,048 --> 00:32:40,192
这就是我刚刚所说的他那不用一个这个来支持的

521
00:32:41,728 --> 00:32:47,872
以及上面这样有了这个这个之后

522
00:32:48,128 --> 00:32:52,736
亲手做的事情

523
00:32:52,992 --> 00:32:59,136
这是这几个蓝色的这几个12345678 12345678个函数

524
00:32:59,392 --> 00:33:01,440
那个操作

525
00:33:01,952 --> 00:33:08,096
这些操作自己都不做事他都是转调用CG做的就是

526
00:33:08,352 --> 00:33:10,400
你刚刚说了这个DAC

527
00:33:10,656 --> 00:33:16,800
所以代码是这样啊最秋那他自己都不做事

528
00:33:18,080 --> 00:33:21,152
要做的事情都交给那个去做

529
00:33:21,408 --> 00:33:23,456
这个是双向开口啊

530
00:33:23,968 --> 00:33:27,808
所以完全能够满足这两个动作

531
00:33:30,112 --> 00:33:32,672
这个一个转调用的形式

532
00:33:37,024 --> 00:33:38,816
所以就

533
00:33:39,072 --> 00:33:43,424
20座上非常的简单因为已经设计出一个这个出来了

534
00:33:44,448 --> 00:33:50,592
那么也因为这样所以在技术上我们也有时候不会把被Q

535
00:33:50,848 --> 00:33:53,664
成为一个容器

536
00:33:54,176 --> 00:34:00,320
我们会说他是一个adapter一个教师

537
00:34:00,576 --> 00:34:01,600
佩奇

538
00:34:02,112 --> 00:34:03,136
他把

539
00:34:03,648 --> 00:34:08,000
别人稍微改装一下就变成了他自己

540
00:34:10,304 --> 00:34:11,840
下一页是stack

541
00:34:12,352 --> 00:34:17,728
完全一样的道理这个的动作是这样在一段里面进出

542
00:34:17,984 --> 00:34:20,544
好他的源代码是这样子

543
00:34:22,080 --> 00:34:22,848
Sex

544
00:34:23,104 --> 00:34:25,152
里头的数据只有一个

545
00:34:25,408 --> 00:34:31,552
Ccc66是什么那一号

546
00:34:31,808 --> 00:34:33,856
所以

547
00:34:34,112 --> 00:34:35,904
我们说stack

548
00:34:36,160 --> 00:34:38,464
内含了一个bat

549
00:34:40,768 --> 00:34:46,912
而这里面所提供的动作123456六个动作他自己都不做事他都

550
00:34:47,168 --> 00:34:49,216
让心去做

551
00:34:50,752 --> 00:34:52,288
全部都是转调用

552
00:34:52,544 --> 00:34:58,688
这个这个整个的运作形式整合的设计概念跟上射完全一样

553
00:35:00,736 --> 00:35:02,272
Sex

554
00:35:08,160 --> 00:35:10,976
为什么他默认选择秀

555
00:35:12,768 --> 00:35:15,072
为什么这两个东西没任

556
00:35:15,328 --> 00:35:18,912
都是选择DAC来做底层的服务

557
00:35:19,680 --> 00:35:20,960
我的问题也就是

558
00:35:21,472 --> 00:35:24,544
可不可以选其他的溶剂做底层服务呢

559
00:35:27,360 --> 00:35:32,224
你只要回到前面这一个有这个代码的部分

560
00:35:32,480 --> 00:35:33,248
你看看

561
00:35:35,296 --> 00:35:38,880
他已经写成这样了这个转调用形式

562
00:35:39,648 --> 00:35:40,416
所以

563
00:35:42,720 --> 00:35:47,840
哈比布的这一个数据结构如果能够提供这些函数

564
00:35:48,608 --> 00:35:52,704
他转调用所需要的这些函数如果能提供

565
00:35:54,240 --> 00:35:56,800
这个容器就可以作为底部支撑

566
00:35:57,312 --> 00:35:58,336
700bike

567
00:36:01,920 --> 00:36:04,480
那到底有哪些可以和哪些不行

568
00:36:05,248 --> 00:36:06,784
我这边做了一个整理

569
00:36:08,576 --> 00:36:09,600
这边说

570
00:36:10,368 --> 00:36:11,904
Thank you

571
00:36:13,184 --> 00:36:14,208
可以选择

572
00:36:14,720 --> 00:36:17,024
Zstack

573
00:36:18,048 --> 00:36:20,096
看到默认就是选这个吗

574
00:36:21,120 --> 00:36:22,656
第4可以吗

575
00:36:23,424 --> 00:36:29,568
从源代码去看然后去比对一下就知道他可不可以

576
00:36:29,824 --> 00:36:30,336
可以

577
00:36:33,408 --> 00:36:35,968
可以而且我这边也试了一次给你看

578
00:36:39,808 --> 00:36:44,672
现在的问题可能就都可以吗左边就是这个界面右边就是Q

579
00:36:44,928 --> 00:36:48,000
我做了一个吃饭他们都选择什么呢

580
00:36:48,256 --> 00:36:51,840
第2个参数我写出来了我选list

581
00:36:52,608 --> 00:36:53,632
底部支撑

582
00:36:54,144 --> 00:36:56,448
怎么右边也是我选择的是

583
00:36:57,472 --> 00:37:00,288
而且这个英语通过可以执行

584
00:37:01,568 --> 00:37:02,592
结论就是这样

585
00:37:03,104 --> 00:37:07,712
他可以选择back这是默认的也可以像我这样选择的是谁

586
00:37:09,760 --> 00:37:10,784
谁比较快

587
00:37:12,832 --> 00:37:14,880
既然这个被当作默认了

588
00:37:15,136 --> 00:37:16,416
想必再给那个逼

589
00:37:16,672 --> 00:37:18,208
复制程会比较快

590
00:37:18,976 --> 00:37:20,256
开始做一个实验

591
00:37:20,512 --> 00:37:23,584
我没有去做这个实验没有答案给你

592
00:37:23,840 --> 00:37:25,632
没有结果给你的是

593
00:37:26,400 --> 00:37:29,728
我可以告诉你一定是默认的那个

594
00:37:30,752 --> 00:37:31,520
你讲会

595
00:37:31,776 --> 00:37:35,872
不然这个团队不会选择那个默认的那个

596
00:37:37,664 --> 00:37:39,200
好这是这一句话

597
00:37:40,224 --> 00:37:41,760
那我看上面这句话

598
00:37:43,296 --> 00:37:45,856
人气都不允许别的

599
00:37:46,880 --> 00:37:48,928
所以他也不提供给大气

600
00:37:52,256 --> 00:37:58,400
前面讲的那些容器以及后面要讲的这个static这些这些

601
00:37:58,656 --> 00:37:59,680
标准容器

602
00:38:01,216 --> 00:38:02,752
都允许你

603
00:38:03,008 --> 00:38:04,032
建立它

604
00:38:05,056 --> 00:38:06,336
也允许你

605
00:38:06,592 --> 00:38:09,920
在某个地方插入音色的一个元素

606
00:38:10,944 --> 00:38:12,992
但是现在看的这两种

607
00:38:13,504 --> 00:38:15,552
他们有特殊的行为

608
00:38:15,808 --> 00:38:21,952
一个先进先出一个先进后出你如果在里面任意放一个元素进行如果

609
00:38:22,208 --> 00:38:24,768
如果它能够允许你任意放元素的话

610
00:38:25,024 --> 00:38:27,584
就会干扰了这个行为模式

611
00:38:29,632 --> 00:38:34,752
这个行为模式是被全世界公认的一个先进先出一个现今何处所以

612
00:38:35,776 --> 00:38:37,568
他不允许你犯错

613
00:38:38,336 --> 00:38:39,360
也因此

614
00:38:39,872 --> 00:38:42,432
那你放元素是要靠迭代器

615
00:38:42,944 --> 00:38:43,968
说他根本就不

616
00:38:44,224 --> 00:38:45,504
提供给你迭代器

617
00:38:46,528 --> 00:38:50,112
你要拿东西就是从头断了或者从尾端了

618
00:38:53,184 --> 00:38:54,720
不是这一句话的意思

619
00:38:55,744 --> 00:38:58,560
所以如果你像我这样写

620
00:38:59,584 --> 00:39:00,864
我有一个stack

621
00:39:01,120 --> 00:39:06,496
我要去取他的iterator定义就从编译时会报错

622
00:39:08,288 --> 00:39:11,872
信息说什么呢说iterative不是

623
00:39:12,640 --> 00:39:14,432
这个容器的一个成员

624
00:39:17,504 --> 00:39:18,528
有时候看一看

625
00:39:18,784 --> 00:39:20,832
定义气的报错信息是

626
00:39:21,600 --> 00:39:23,648
这是蛮好的

627
00:39:24,672 --> 00:39:25,440
看看他

628
00:39:25,696 --> 00:39:27,232
回答了你什么事情

629
00:39:27,488 --> 00:39:30,048
符不符合你对于技术的理解

630
00:39:32,096 --> 00:39:33,888
我们再看下一页

631
00:39:37,984 --> 00:39:39,008
随便说

632
00:39:40,032 --> 00:39:41,568
前面提到了

633
00:39:41,824 --> 00:39:44,640
默认有一个东西做底部支撑吗

634
00:39:45,408 --> 00:39:50,528
然后钱越说我如果不要用默认的那个我用list

635
00:39:50,784 --> 00:39:53,088
电表当底部支撑是可以的

636
00:39:53,856 --> 00:39:55,904
那这厌恶要说

637
00:39:56,672 --> 00:39:57,696
这个东西

638
00:39:58,720 --> 00:40:02,048
可以选择这个东西打给你是什么

639
00:40:02,560 --> 00:40:06,656
我看你不能用WiFi

640
00:40:06,912 --> 00:40:10,496
然后我都要用这些函数看看OK通过

641
00:40:13,312 --> 00:40:14,336
那是气

642
00:40:14,848 --> 00:40:16,384
我可以选择陪伴他

643
00:40:17,920 --> 00:40:20,480
那么想必master提供

644
00:40:21,760 --> 00:40:22,272
一定

645
00:40:23,552 --> 00:40:29,184
这里就要转调用这些函数里头的没有权不提供

646
00:40:29,440 --> 00:40:30,976
看看这个例子

647
00:40:31,488 --> 00:40:32,768
特别是Q

648
00:40:33,792 --> 00:40:35,328
我选择的是next

649
00:40:35,584 --> 00:40:36,608
到底部支撑

650
00:40:37,632 --> 00:40:39,168
有些动作通过

651
00:40:39,680 --> 00:40:43,008
但是这个动作不通过他这个东西

652
00:40:44,032 --> 00:40:46,592
错误信息报错信息说什么

653
00:40:48,128 --> 00:40:49,920
说他在调用的时候啊

654
00:40:51,456 --> 00:40:53,248
我们的程式是调用pop

655
00:40:54,016 --> 00:40:59,136
可是转调用的时候会调用write

656
00:41:00,672 --> 00:41:01,440
Public

657
00:41:02,208 --> 00:41:04,000
结果他说vector

658
00:41:04,256 --> 00:41:06,304
没有public

659
00:41:07,072 --> 00:41:09,376
VR weather的确没有泡from

660
00:41:11,168 --> 00:41:12,960
最不能够使用

661
00:41:16,800 --> 00:41:21,408
这个地方我们也带出一个概念呢我们就由这个例子代数的概念

662
00:41:23,200 --> 00:41:26,272
你在使用模板时候

663
00:41:27,040 --> 00:41:29,856
他是不会事先帮你做

664
00:41:30,624 --> 00:41:34,208
全面性的编译器帮你做全面性的检测

665
00:41:36,000 --> 00:41:37,536
象征一个例子

666
00:41:39,328 --> 00:41:43,936
其他的动作sidetrack

667
00:41:44,192 --> 00:41:45,728
都是可以调用的

668
00:41:46,240 --> 00:41:48,032
只有怕的不能调用

669
00:41:48,288 --> 00:41:50,592
怕不是这里最重要的动作

670
00:41:50,848 --> 00:41:53,151
不能调用等一下本没有用

671
00:41:54,175 --> 00:41:58,271
你说你不能拿master来当底部支撑

672
00:41:58,527 --> 00:42:02,367
但是其实是局部不行而已

673
00:42:02,623 --> 00:42:06,975
我要表达的意思是这些东西都是无法

674
00:42:07,743 --> 00:42:13,887
编译器对于模板的他不会有一个全面检查他是你用到

675
00:42:14,143 --> 00:42:20,287
要多少他在帮你剪多少所以你如果你的城市里头那你却没有

676
00:42:20,543 --> 00:42:26,687
有去调用这一行的话这样不允许你的确没有调用这样的话其他的妻子是

677
00:42:26,943 --> 00:42:27,967
只会通过的

678
00:42:29,759 --> 00:42:33,855
好下一页

679
00:42:34,111 --> 00:42:38,719
我们自己也一直在弹

680
00:42:38,975 --> 00:42:42,815
这个stack Q3跟站

681
00:42:43,071 --> 00:42:49,215
到底什么东西能不能做他的底部支撑和我们这几天一直在谈这个事情现在这也告诉你

682
00:42:49,471 --> 00:42:55,615
都不可以选择set和Map作为

683
00:42:55,871 --> 00:43:02,015
原因跟前面讲的是一样的你如果做底部支撑那么脏

684
00:43:02,271 --> 00:43:05,855
他要转调用说他调用不到

685
00:43:06,111 --> 00:43:12,255
正确的函数的话那这个就提出了这就不能作为候选

686
00:43:12,511 --> 00:43:18,655
这边就是给你看这个step

687
00:43:18,911 --> 00:43:21,983
锅里面放set

688
00:43:22,239 --> 00:43:28,383
一定会通过若干跟你讲啊这边有钱啊1751如果什么我刚跟你讲

689
00:43:28,639 --> 00:43:34,783
他不会做全面性的检查最光子这样可以做这些动作

690
00:43:35,039 --> 00:43:41,183
也可以有些不行这边已经告诉你了某些动作会发生爆炸

691
00:43:41,439 --> 00:43:47,583
说到这里来自于Map的这一个例子

692
00:43:47,839 --> 00:43:53,983
只是放下面这个例子方便那这一行就不通

693
00:43:54,239 --> 00:44:00,383
不通过为什么因为面不需要放弃根六根本就放错了

694
00:44:00,639 --> 00:44:06,783
一开始放就被检查出来不可以

695
00:44:07,039 --> 00:44:13,183
好

696
00:44:13,439 --> 00:44:19,583
我们藉由这个这个很大的题目

697
00:44:19,839 --> 00:44:25,983
然后带到后面这个是这个人去了很小的题目他之所以很小因为

698
00:44:26,239 --> 00:44:32,383
因为他是借了别人的力量这三个通常我们的

699
00:44:32,639 --> 00:44:37,247
放在一起来他这是这三个容器

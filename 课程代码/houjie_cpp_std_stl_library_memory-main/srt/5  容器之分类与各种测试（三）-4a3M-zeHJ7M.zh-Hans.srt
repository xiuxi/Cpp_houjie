1
00:00:08,192 --> 00:00:09,728
刚刚我们看过了

2
00:00:10,752 --> 00:00:12,032
Crect rect

3
00:00:12,800 --> 00:00:16,640
后面的测试那都是一样的药性

4
00:00:17,408 --> 00:00:18,176
就是说

5
00:00:18,688 --> 00:00:20,480
一个问答的方式会问

6
00:00:20,992 --> 00:00:23,552
我要选用哪一种容器做测试

7
00:00:24,320 --> 00:00:28,160
这个容器要多少个元素我通常都是100万

8
00:00:28,928 --> 00:00:30,720
那进去之后呢

9
00:00:31,232 --> 00:00:36,352
就会检测他用随机缩放100万个元素进去之后

10
00:00:36,864 --> 00:00:37,888
这个多少时间

11
00:00:38,144 --> 00:00:39,424
几个毫秒

12
00:00:39,680 --> 00:00:40,448
明天

13
00:00:41,216 --> 00:00:41,984
然后

14
00:00:42,752 --> 00:00:44,544
会试着去

15
00:00:44,800 --> 00:00:49,408
说出一些数值有时候的一个人数是什么最后一个元素是什么

16
00:00:49,920 --> 00:00:52,224
然后我会试着去

17
00:00:52,992 --> 00:00:55,040
查找去搜寻

18
00:00:56,064 --> 00:00:56,832
我的素质

19
00:00:57,344 --> 00:00:58,624
看看他搜寻的

20
00:00:58,880 --> 00:00:59,648
效率怎么样

21
00:01:00,416 --> 00:01:02,464
搜寻可能会有两种方法

22
00:01:02,720 --> 00:01:05,792
也可能是一种方法我们还可以拿来比较一下

23
00:01:06,304 --> 00:01:08,096
大致上都是这样的表情

24
00:01:09,120 --> 00:01:11,424
好接下来要进行的是

25
00:01:11,680 --> 00:01:12,192
List

26
00:01:12,704 --> 00:01:17,056
Lisa的长相是这样这个他就在学校里面能碰触的也比较多

27
00:01:18,592 --> 00:01:20,128
双向链表

28
00:01:20,640 --> 00:01:24,992
就是双向链表如果单向链表那是另外一个叫forwards

29
00:01:25,760 --> 00:01:26,272
OK

30
00:01:29,088 --> 00:01:29,856
有时候因为

31
00:01:30,112 --> 00:01:34,208
纤夫的关系上面的他呀因为什么我就没有放进来了

32
00:01:34,464 --> 00:01:36,256
图打开已经放了很晚了

33
00:01:38,816 --> 00:01:39,584
这里面

34
00:01:42,400 --> 00:01:45,728
为什么要建立一个历史的容器就是165

35
00:01:46,240 --> 00:01:49,312
这个没个元素是什么那是一个stream

36
00:01:50,848 --> 00:01:54,176
各位可以注意到从前面到现在已经到等下后面了

37
00:01:54,432 --> 00:01:56,480
所有东西我都不会其他的

38
00:01:56,992 --> 00:01:57,760
12层数

39
00:01:58,016 --> 00:01:59,040
12345是什么

40
00:01:59,296 --> 00:02:00,832
前面提过去式分配器

41
00:02:01,088 --> 00:02:02,880
我都用默认的那个

42
00:02:03,648 --> 00:02:06,208
我们在这个第1讲的最后面

43
00:02:06,464 --> 00:02:09,536
我还会带大家看出了默认的那个之外

44
00:02:10,048 --> 00:02:13,120
还有没有提供什么样的分配器给我用语音如何用

45
00:02:14,144 --> 00:02:14,656
好

46
00:02:15,168 --> 00:02:16,448
165号

47
00:02:17,472 --> 00:02:18,752
接下来

48
00:02:19,008 --> 00:02:20,288
就是一个forest

49
00:02:21,056 --> 00:02:21,824
100万次

50
00:02:22,080 --> 00:02:25,152
这个video是传进来的把知识问答的时候了

51
00:02:25,664 --> 00:02:27,456
100万次

52
00:02:28,224 --> 00:02:30,784
我总是用出来可就包住它以防

53
00:02:31,552 --> 00:02:33,088
方便不到内存

54
00:02:33,856 --> 00:02:34,368
OK

55
00:02:34,624 --> 00:02:36,416
100万是什么呢

56
00:02:36,672 --> 00:02:39,232
说这个就一个元素一个元素的放进去

57
00:02:39,488 --> 00:02:41,024
汉杠杠的

58
00:02:41,280 --> 00:02:44,096
Factor不太一样可是一段

59
00:02:44,864 --> 00:02:47,168
放啊放满了之后成长为另一半

60
00:02:47,680 --> 00:02:53,824
对刚刚没有提到所谓成长是什么意思你不可能他不可能在这个位置

61
00:02:54,080 --> 00:02:54,592
智障

62
00:02:55,104 --> 00:02:59,968
成长两倍他一定要在另外一个地方找一个两倍大的空间

63
00:03:00,736 --> 00:03:04,064
然后再把原来的这些人一个一个的换过去

64
00:03:05,600 --> 00:03:08,672
所以成长这个过程是非常的缓慢

65
00:03:10,976 --> 00:03:12,512
相较之下是非常慢

66
00:03:13,024 --> 00:03:14,304
但是list不一样

67
00:03:14,560 --> 00:03:15,840
20个萝卜一个坑

68
00:03:16,352 --> 00:03:21,472
每放一个元素进去它就在空间中找到一个节点的大小

69
00:03:23,264 --> 00:03:23,776
OK

70
00:03:24,288 --> 00:03:26,848
好但是这个动作也是教父speak

71
00:03:27,360 --> 00:03:29,152
刚刚刚的是一样的

72
00:03:30,944 --> 00:03:33,248
这些事情做完之后

73
00:03:35,552 --> 00:03:37,088
做一些输出动作

74
00:03:37,344 --> 00:03:38,880
看看可以呼叫哪些函数

75
00:03:39,136 --> 00:03:40,160
呼叫什么呢

76
00:03:40,416 --> 00:03:45,792
100万个元素总共花掉了3.65秒

77
00:03:46,816 --> 00:03:50,656
他目前的大小是多少100万没错这正是我的错

78
00:03:50,912 --> 00:03:52,448
符合我们的想象

79
00:03:53,216 --> 00:03:55,008
他还有一个maximus

80
00:03:56,544 --> 00:03:57,312
Waste

81
00:03:57,824 --> 00:04:02,432
电表竟然有一个maximumsize这个蛮出乎我的意料之外

82
00:04:03,456 --> 00:04:04,992
这是他提供那个

83
00:04:05,504 --> 00:04:09,344
数字是33人意思是说他可以放多少

84
00:04:09,600 --> 00:04:11,392
大小是多少多少呢

85
00:04:11,648 --> 00:04:14,720
个拾佰仟万十万百万千万亿

86
00:04:14,976 --> 00:04:16,768
31 5791

87
00:04:18,559 --> 00:04:20,351
3131 5000万个

88
00:04:22,143 --> 00:04:23,423
这个数字怎么来的

89
00:04:25,727 --> 00:04:26,239
我不知道

90
00:04:26,751 --> 00:04:27,519
其实

91
00:04:28,031 --> 00:04:31,103
呼叫到这个函数之前我没有注意过这个还是不好

92
00:04:31,615 --> 00:04:32,127
所以我

93
00:04:32,639 --> 00:04:37,759
要知道这个数字怎么来我就看看源代码我们就放到第2讲第3讲的你说

94
00:04:39,295 --> 00:04:43,391
但是们不可思议的是按照道理讲

95
00:04:43,647 --> 00:04:44,671
List

96
00:04:44,927 --> 00:04:46,719
它的元素是

97
00:04:47,487 --> 00:04:50,047
动态分配而得所以呢

98
00:04:51,327 --> 00:04:53,119
应该是只要你的内存

99
00:04:53,887 --> 00:04:56,191
能够供应他就可以一直要

100
00:04:56,703 --> 00:05:00,031
按理说没有所谓的Max赛种东西

101
00:05:00,287 --> 00:05:02,847
我到现在还真是不知道怎么来的

102
00:05:03,359 --> 00:05:05,407
我回去看看再说

103
00:05:09,247 --> 00:05:11,807
而且在不同的电脑上面呢他的

104
00:05:12,063 --> 00:05:17,695
内存容量你可能是4G搞我发几个他20几个一

105
00:05:17,951 --> 00:05:18,719
不一样啊

106
00:05:18,975 --> 00:05:22,559
说真的是匪夷所思不知道什么叫WiFi

107
00:05:24,095 --> 00:05:24,607
好

108
00:05:25,119 --> 00:05:25,887
请注意

109
00:05:26,399 --> 00:05:30,751
很多的圆很多的容器都有所谓的maximum size

110
00:05:31,519 --> 00:05:35,615
现在我们看的是历史的我们先跳一下下一页是4s

111
00:05:35,871 --> 00:05:42,015
他的maxmara 424百千万事万柏万千151多刚刚那个是3

112
00:05:42,271 --> 00:05:43,807
翻译多就是51多

113
00:05:44,575 --> 00:05:45,343
下一个呢

114
00:05:46,111 --> 00:05:46,623
找一个

115
00:05:46,879 --> 00:05:47,391
Dec

116
00:05:48,415 --> 00:05:54,559
这个也有maxpermsize这个多少个拾佰仟万十万百万千位意识意识

117
00:05:54,815 --> 00:05:55,583
11 7000万

118
00:05:56,095 --> 00:05:57,631
我要可以送到中国人口了

119
00:05:58,655 --> 00:05:59,167
OK

120
00:06:00,447 --> 00:06:02,495
今晚都有这样的数字出来

121
00:06:04,287 --> 00:06:05,055
我回到前面来

122
00:06:07,871 --> 00:06:13,503
你刚刚是说已经120也是放进去了我们看看输出哪些东西吗一方面示范

123
00:06:13,759 --> 00:06:15,551
可以调用哪些函数

124
00:06:16,063 --> 00:06:18,879
随便调用的front人数是47

125
00:06:19,135 --> 00:06:23,487
Bec最后一个元素是1641那这些都对我们没有什么意义

126
00:06:23,999 --> 00:06:26,047
接下来那会儿开始查找了

127
00:06:26,815 --> 00:06:31,679
他问我我还是输入23456所有的例子我都是输入23456

128
00:06:31,935 --> 00:06:35,263
要借与领到32767之间

129
00:06:35,519 --> 00:06:37,311
因为那个转速是在这个范围内

130
00:06:37,823 --> 00:06:40,383
有没有可能我输入一个值他找不到呢

131
00:06:40,639 --> 00:06:42,431
当然有可能因为他是乱数

132
00:06:43,711 --> 00:06:44,735
有可能找不到

133
00:06:44,991 --> 00:06:46,527
不是这个概率大概比

134
00:06:47,807 --> 00:06:49,343
只比平高一点点

135
00:06:50,367 --> 00:06:50,879
为什么

136
00:06:52,927 --> 00:06:59,071
因为我都指定100万个元素而乱数了这产生是零到三个七

137
00:06:59,327 --> 00:07:02,399
767所以在这么多次的产生之中

138
00:07:03,935 --> 00:07:08,031
这本会有某一个数字一直没出现这个也是蛮奇怪的

139
00:07:08,287 --> 00:07:09,311
仅非常非常

140
00:07:09,567 --> 00:07:13,919
对每次我在测试我随便打一个字

141
00:07:16,479 --> 00:07:19,295
只要在06 32767之前

142
00:07:20,575 --> 00:07:21,087
好

143
00:07:22,367 --> 00:07:28,511
我要找这个数字然后怎么找那我们看看我用的是什么样的方法在

144
00:07:28,767 --> 00:07:29,791
右边这个城市吧

145
00:07:31,071 --> 00:07:32,607
188号

146
00:07:34,655 --> 00:07:35,679
我用的是

147
00:07:35,935 --> 00:07:40,287
标准库提供的fine就是循序查找法

148
00:07:45,663 --> 00:07:47,199
有没有用其他的炒法呢

149
00:07:48,735 --> 00:07:49,759
我没有去测试

150
00:07:50,783 --> 00:07:54,111
继续查找找到了吗看看执行结果找到了

151
00:07:54,367 --> 00:07:55,391
花多少时间

152
00:07:55,647 --> 00:07:56,671
16个

153
00:07:56,927 --> 00:07:57,439
Venus

154
00:08:00,511 --> 00:08:01,023
好

155
00:08:01,279 --> 00:08:03,071
后面我还测试

156
00:08:03,583 --> 00:08:06,399
197号197

157
00:08:08,959 --> 00:08:11,263
把这个东西排气一变化要多少时间

158
00:08:14,335 --> 00:08:17,151
2312个

159
00:08:18,943 --> 00:08:21,247
打开一些这样数字上的概念

160
00:08:22,527 --> 00:08:26,879
我这边特别安排的在这个例子里面虎教授

161
00:08:27,135 --> 00:08:28,159
我有一个用意

162
00:08:31,231 --> 00:08:32,255
Sort

163
00:08:33,535 --> 00:08:36,607
是标准库的算法的其中一个

164
00:08:36,863 --> 00:08:40,959
也许是最有名的一个大家想到算法都想到排序

165
00:08:41,983 --> 00:08:44,031
但是197号

166
00:08:44,543 --> 00:08:45,567
我不是呼叫

167
00:08:46,335 --> 00:08:47,615
全局的那个

168
00:08:48,383 --> 00:08:52,735
也就是说我不是使用标准库的算法那一个我用的是什么

169
00:08:52,991 --> 00:08:54,015
197号

170
00:08:54,527 --> 00:08:56,319
C.c

171
00:08:57,087 --> 00:09:01,951
我是调用这个容器里面自己的那个说法

172
00:09:02,463 --> 00:09:03,487
这就有趣了

173
00:09:03,999 --> 00:09:04,767
原来啊

174
00:09:06,815 --> 00:09:08,863
标准库有一个数

175
00:09:09,119 --> 00:09:11,679
原来是这样啊标准会说

176
00:09:12,191 --> 00:09:12,703
而

177
00:09:12,959 --> 00:09:15,519
这一个容器里面自己的事

178
00:09:16,543 --> 00:09:19,615
怎么会这样呢那我呼叫哪一个比较好呢

179
00:09:21,151 --> 00:09:27,039
这些这些原因是跟容器的特性有关我只能现在告诉你

180
00:09:29,087 --> 00:09:30,879
标准库全柜的有的是

181
00:09:31,647 --> 00:09:34,463
某些容器自己里面也有一个锁

182
00:09:34,975 --> 00:09:41,119
当他自己的工作的时候你当然要用他自己的那个说那个一定比较快

183
00:09:43,935 --> 00:09:46,751
所以这边197就做了一个这样吃饭

184
00:09:48,543 --> 00:09:50,079
至于他的原因

185
00:09:52,383 --> 00:09:54,687
这个就要等到我们了解他的

186
00:09:54,943 --> 00:09:55,455
源代码

187
00:09:55,711 --> 00:09:57,759
才能够去讲个清楚

188
00:09:59,807 --> 00:10:02,367
好这是我们的这个容器

189
00:10:03,647 --> 00:10:07,487
下一个荣幸福VS就是单向链表

190
00:10:08,511 --> 00:10:11,327
啊写法都一样啊会看一遍

191
00:10:13,119 --> 00:10:15,423
可以问答的方式传进来1000000

192
00:10:16,959 --> 00:10:20,031
啊重新来100万之后那216号

193
00:10:20,287 --> 00:10:25,151
这边我就定义了一个蜂窝里面都是与这样的一个容器

194
00:10:25,919 --> 00:10:28,991
然后在220号就发了100万次

195
00:10:29,759 --> 00:10:32,831
做什么事情呢224号不行

196
00:10:34,111 --> 00:10:35,647
Front Joy

197
00:10:36,159 --> 00:10:37,439
前面都是不许配给

198
00:10:37,951 --> 00:10:41,535
这里是不是不让他应该不大可能他没有不需要

199
00:10:42,047 --> 00:10:42,815
这个这个

200
00:10:45,119 --> 00:10:46,399
Far from在这里

201
00:10:47,167 --> 00:10:48,191
在这里

202
00:10:50,239 --> 00:10:51,775
等一下

203
00:10:52,031 --> 00:10:53,567
单项

204
00:10:57,151 --> 00:11:03,295
我还得再想我还得再再讲一下它的那个石像一定有一个单一的指针

205
00:11:03,551 --> 00:11:05,599
它是指向左边还是指向右边

206
00:11:05,855 --> 00:11:08,415
这得看一下才知道因为我拨看这个图

207
00:11:08,927 --> 00:11:09,695
不太能

208
00:11:10,719 --> 00:11:11,231
确定

209
00:11:11,743 --> 00:11:13,279
这个主要表示的意思

210
00:11:13,791 --> 00:11:15,071
把着它只有一端

211
00:11:15,583 --> 00:11:17,375
因为他是个单向链表

212
00:11:17,887 --> 00:11:19,679
所以它只提供不需

213
00:11:19,935 --> 00:11:20,447
Truck

214
00:11:20,703 --> 00:11:22,239
只有一端可以放

215
00:11:22,495 --> 00:11:25,567
永远如果从后投放的话那就太慢

216
00:11:25,823 --> 00:11:27,615
所以他根本不提供那种

217
00:11:30,175 --> 00:11:32,735
这就好像那个factor我们前面讲best

218
00:11:32,991 --> 00:11:35,807
他也不提供一个函数上你放在头

219
00:11:36,319 --> 00:11:37,855
它只允许你放在尾巴

220
00:11:39,135 --> 00:11:39,903
要的意思

221
00:11:40,671 --> 00:11:43,487
所以请注意要把24号或许吧

222
00:11:44,511 --> 00:11:47,071
那么接下来完成的时候

223
00:11:47,583 --> 00:11:49,887
我再搜出了一些数值看看

224
00:11:50,399 --> 00:11:53,727
有些什么呢maxmara刚看过了大

225
00:11:54,239 --> 00:11:55,775
5000多万

226
00:11:56,031 --> 00:11:57,311
151

227
00:11:58,591 --> 00:11:59,103
好

228
00:12:00,127 --> 00:12:01,919
还可以把from的因素来看

229
00:12:02,943 --> 00:12:04,735
From的第1个元素的内容

230
00:12:06,271 --> 00:12:09,087
那是你没打印出最后一个元素的内容哦

231
00:12:09,343 --> 00:12:10,879
因为它是一个单向链表

232
00:12:12,159 --> 00:12:13,439
要找到最后归宿

233
00:12:14,207 --> 00:12:15,487
他爸非常慢

234
00:12:17,279 --> 00:12:23,423
这个注解上还告诉你有一些动作是不提供的后面有注解说没有这样的成员

235
00:12:26,495 --> 00:12:27,263
在癌

236
00:12:27,519 --> 00:12:30,591
下面这一段就是要查找要搜寻

237
00:12:32,383 --> 00:12:33,663
用什么方式收取呢

238
00:12:34,943 --> 00:12:35,455
啊

239
00:12:35,711 --> 00:12:36,735
240号

240
00:12:37,247 --> 00:12:37,759
Find

241
00:12:38,015 --> 00:12:38,527
用

242
00:12:38,783 --> 00:12:40,575
全局的配置标准库

243
00:12:40,831 --> 00:12:42,879
提供的那个算法交换

244
00:12:43,391 --> 00:12:43,903
去找

245
00:12:44,159 --> 00:12:45,695
这是一个循序查找

246
00:12:46,463 --> 00:12:47,999
找到花椒多少秒

247
00:12:48,255 --> 00:12:51,583
就看运气因为他是循序查找

248
00:12:52,863 --> 00:12:57,983
我也不知道我要找的这个23456这个元素若在哪一个位置不知道

249
00:12:58,239 --> 00:13:00,799
只不过在这一次的测试照片呢

250
00:13:01,311 --> 00:13:03,359
用掉15个btc

251
00:13:06,943 --> 00:13:08,223
最后在

252
00:13:08,479 --> 00:13:10,527
倒数第4行

253
00:13:11,039 --> 00:13:12,575
刚刚刚不死的呀真是

254
00:13:12,831 --> 00:13:14,623
BB霜向是单向吗

255
00:13:14,879 --> 00:13:16,671
这个它本身有一个site

256
00:13:16,927 --> 00:13:18,975
所以我要用它所提供的锁

257
00:13:19,487 --> 00:13:21,023
说得花掉多少秒呢

258
00:13:22,559 --> 00:13:24,351
2656

259
00:13:26,143 --> 00:13:27,935
给大家一点点感觉

260
00:13:30,495 --> 00:13:33,567
好这是这个4s的看下一个

261
00:13:35,871 --> 00:13:38,431
我这个城市是在

262
00:13:38,943 --> 00:13:41,503
Dev1ce Express

263
00:13:42,271 --> 00:13:44,319
这个环境上面开发的

264
00:13:45,343 --> 00:13:50,463
他不是个怕只是个开发环境可以让你外挂

265
00:13:50,975 --> 00:13:53,535
任何一个你想要的编译器

266
00:13:54,559 --> 00:13:59,935
他预设挂的是跟路gnu几家家的路演绎气

267
00:14:01,215 --> 00:14:06,335
这一套编译器所带的标准库里面的有一个独特的东西

268
00:14:07,359 --> 00:14:12,479
应该说是非标准东西以前就有了就是这个

269
00:14:12,991 --> 00:14:14,015
Sjokz

270
00:14:14,527 --> 00:14:15,551
安相传

271
00:14:17,343 --> 00:14:23,487
刚刚介绍那个蜂窝list也是单向传连这个也是单向传店两者完全

272
00:14:23,743 --> 00:14:27,071
但是刚刚那个是cs7

273
00:14:27,583 --> 00:14:28,351
规定有

274
00:14:28,607 --> 00:14:30,655
这个是俄罗斯

275
00:14:31,423 --> 00:14:33,983
很早前就有它是非标准

276
00:14:35,007 --> 00:14:37,311
如果你以前已经用上它了

277
00:14:37,823 --> 00:14:39,615
现在你仍然可以用

278
00:14:40,383 --> 00:14:43,455
400次给你看在右边这个代码里面

279
00:14:44,479 --> 00:14:45,759
比较奇特的是

280
00:14:46,015 --> 00:14:51,135
你要引入的他的头文件可是他的头文件是放在

281
00:14:51,647 --> 00:14:52,927
Ext

282
00:14:53,183 --> 00:14:53,951
这一个

283
00:14:54,975 --> 00:14:55,999
这个资料夹里的

284
00:14:58,047 --> 00:15:00,351
Extension扩充的

285
00:15:00,863 --> 00:15:02,399
特点

286
00:15:03,679 --> 00:15:06,751
其他的用法都相同概念都相同

287
00:15:07,007 --> 00:15:09,823
前面上射的那个服务历史

288
00:15:10,079 --> 00:15:10,591
偶像

289
00:15:15,711 --> 00:15:16,991
好这是

290
00:15:17,503 --> 00:15:18,783
Assist

291
00:15:22,879 --> 00:15:24,415
下一个那个

292
00:15:24,671 --> 00:15:25,439
非常有趣

293
00:15:34,655 --> 00:15:36,959
在我们前面所看着那一张

294
00:15:37,215 --> 00:15:43,359
这个数据结构的分类

295
00:15:43,615 --> 00:15:44,383
抓出来

296
00:15:44,639 --> 00:15:45,919
在这边再放一次

297
00:15:46,431 --> 00:15:47,455
Sex

298
00:15:47,711 --> 00:15:49,247
你大叫DQ

299
00:15:49,503 --> 00:15:51,807
这是一个双向开口

300
00:15:52,063 --> 00:15:54,111
可进可出的一个容器

301
00:15:55,391 --> 00:15:56,415
但是你要知道

302
00:15:56,671 --> 00:15:59,487
一个容器占用多少内存

303
00:16:00,255 --> 00:16:02,047
它占用内存之后

304
00:16:02,815 --> 00:16:04,095
不能够在过去

305
00:16:04,607 --> 00:16:07,679
在扩充就看到别人可能已经被用掉的内存了

306
00:16:08,191 --> 00:16:13,823
所以向factor他扩充的时候他是在别的地方找到一块然后把这个

307
00:16:14,079 --> 00:16:15,359
原来的搬过去

308
00:16:15,871 --> 00:16:17,919
找到那块必须是表妹吧

309
00:16:18,943 --> 00:16:19,967
The spectre

310
00:16:20,479 --> 00:16:25,087
那这可能它也可以过重而且他两边都可以扩充

311
00:16:25,855 --> 00:16:27,391
那是怎么做呢

312
00:16:28,671 --> 00:16:31,231
所以你从这一张图你看不出它的结构

313
00:16:31,999 --> 00:16:33,279
你是干什么的功能

314
00:16:33,535 --> 00:16:34,815
左右扩充

315
00:16:35,327 --> 00:16:37,375
它的结构其实是下面这样

316
00:16:39,679 --> 00:16:40,959
这个我换主这个这个

317
00:16:41,471 --> 00:16:43,263
清楚多了不是喝咖啡的

318
00:16:45,567 --> 00:16:46,847
M

319
00:16:50,687 --> 00:16:52,479
它的结构是这样

320
00:16:52,735 --> 00:16:54,527
各位看到了这里有

321
00:16:54,783 --> 00:16:55,551
F1

322
00:16:55,807 --> 00:16:58,111
23000段氏段段

323
00:16:59,391 --> 00:17:02,207
在术语上把这个一段叫做一个buffer

324
00:17:02,975 --> 00:17:05,535
一个buffer可以放很多个元素

325
00:17:05,791 --> 00:17:07,583
可以放多少个元素呢

326
00:17:07,839 --> 00:17:11,935
这个后面再深入源代码的时候上来说

327
00:17:12,191 --> 00:17:16,799
你这个图上来看的话八个元素一个段落放八个元素

328
00:17:17,823 --> 00:17:21,407
最大可这种东西其实就是有这样

329
00:17:21,663 --> 00:17:22,943
OneNote

330
00:17:26,015 --> 00:17:29,343
我们在数据上把它叫做分段连续

331
00:17:30,367 --> 00:17:33,695
在每一段每个buffer上面它当然是连续

332
00:17:34,975 --> 00:17:37,535
但是段跟半时间怎么办呢

333
00:17:39,071 --> 00:17:40,351
这个号称

334
00:17:41,119 --> 00:17:42,143
他是连续

335
00:17:42,655 --> 00:17:45,983
那是假象可是他必须做出这种假象

336
00:17:47,007 --> 00:17:53,151
那怎么做啊这个就是一个蛮大的学问也是一样的放到第2讲第3讲的

337
00:17:53,407 --> 00:17:53,919
说他

338
00:17:54,175 --> 00:17:59,551
但是他要让使用者感觉说他们自己去的也就是说

339
00:18:00,319 --> 00:18:00,831
请看这里

340
00:18:01,599 --> 00:18:06,463
如果我有一个以成为的比如说更好的变现在应该指向这个地方

341
00:18:06,975 --> 00:18:08,767
你把家家就到这里来

342
00:18:09,023 --> 00:18:11,839
在家家就到这里在家家就到这里

343
00:18:12,351 --> 00:18:17,983
到这里的时候这是什么这么有意义因为他的下一个其实在这个地方

344
00:18:19,775 --> 00:18:25,919
所以当成一只为从这里加加到这里的时候应该要能够判断

345
00:18:26,175 --> 00:18:28,735
已经走到了悬崖边了

346
00:18:29,247 --> 00:18:30,271
走到尽头了

347
00:18:30,527 --> 00:18:32,319
他应该自动跑到下面这里来

348
00:18:33,599 --> 00:18:37,951
这个不自动是谁做的你就是家家这个动作要去做

349
00:18:39,487 --> 00:18:40,511
操作符重载

350
00:18:41,279 --> 00:18:43,071
这个叫好后面再提

351
00:18:43,327 --> 00:18:45,887
总之从这样子大约可以理解

352
00:18:46,399 --> 00:18:47,679
根据这个做法

353
00:18:47,935 --> 00:18:54,079
最大可能是分段连续但是让使用者感觉

354
00:18:54,335 --> 00:18:55,871
它是整个顺序

355
00:18:58,943 --> 00:19:00,479
这五个buffer

356
00:19:01,759 --> 00:19:03,295
这里有五根指针

357
00:19:04,063 --> 00:19:06,111
北京一个地方指出来

358
00:19:07,135 --> 00:19:09,951
所以整个这个最有刺激性啊

359
00:19:10,719 --> 00:19:15,327
这五个指针指向一个buffer每个buffer

360
00:19:15,583 --> 00:19:17,119
在元素都有刺激性

361
00:19:20,191 --> 00:19:23,519
好那么所谓的两端开口是怎么回事

362
00:19:24,543 --> 00:19:26,335
这五个吧分如果

363
00:19:26,591 --> 00:19:28,639
不够用所以人数都填满了

364
00:19:29,407 --> 00:19:29,919
那么

365
00:19:30,943 --> 00:19:32,735
这可是一个容器

366
00:19:33,759 --> 00:19:37,855
帮你继续放元素进去你必须继续不懈可的时候

367
00:19:38,367 --> 00:19:41,439
他就会再分配另外一个版本

368
00:19:43,743 --> 00:19:47,583
并且有这一格的指针指着他

369
00:19:48,863 --> 00:19:51,423
这样就是在尾巴在右手边

370
00:19:52,191 --> 00:19:58,335
这张图的右手边就扩充了那如果使用者是不往前不许

371
00:19:59,103 --> 00:20:00,895
把这个buffer用完了

372
00:20:01,407 --> 00:20:02,175
怎么办呢

373
00:20:02,431 --> 00:20:03,967
这个这个

374
00:20:04,223 --> 00:20:04,735
就会

375
00:20:04,991 --> 00:20:06,783
再分配一个buffer

376
00:20:07,295 --> 00:20:11,647
有这一个左手边这个这个指针似的

377
00:20:12,927 --> 00:20:16,767
成都飞到处都可以构成为刺客中一个

378
00:20:17,023 --> 00:20:17,535
Buffer

379
00:20:20,607 --> 00:20:24,703
每次扩充多少这个概念要一样

380
00:20:24,959 --> 00:20:28,031
这关系到我们可以去想象他的效率

381
00:20:28,799 --> 00:20:30,079
它的内存的用量

382
00:20:31,359 --> 00:20:35,199
最前面讲过的那个瑞他是根本不能扩充

383
00:20:35,455 --> 00:20:40,319
后来讲的master article中是两倍增长

384
00:20:40,575 --> 00:20:43,135
说到后来每次过重会变很大

385
00:20:44,671 --> 00:20:46,463
很大就表示

386
00:20:46,975 --> 00:20:49,535
可能会有不少的浪费用

387
00:20:51,071 --> 00:20:52,095
比如说

388
00:20:52,351 --> 00:20:54,143
我们回到前面看看刚刚那个例子

389
00:20:58,239 --> 00:20:59,263
这是back

390
00:21:01,055 --> 00:21:04,895
这个执行此刻那它的大小是100万

391
00:21:05,663 --> 00:21:10,783
可是它的容量可pasties 1048576

392
00:21:12,063 --> 00:21:17,696
所以在这一刻我用150弄掉100万个元素

393
00:21:17,952 --> 00:21:24,096
还多出48576块空元素空间我没有去用它

394
00:21:24,352 --> 00:21:27,424
如果我后面也都不去用它这就是浪费

395
00:21:31,776 --> 00:21:37,152
后来我们又谈到了Beast他每次扩充就是一个节点

396
00:21:37,664 --> 00:21:39,456
节点通常都很小

397
00:21:39,712 --> 00:21:45,600
所以这是在效率上最高的空间利用率上最好的一种

398
00:21:46,624 --> 00:21:48,160
他是找起来吗

399
00:21:51,232 --> 00:21:54,816
下一个人单向链表也是

400
00:21:55,072 --> 00:21:56,608
一个节点一个9点的闹钟

401
00:21:58,144 --> 00:22:04,288
现在这里是在下列表在下面现在想这个带给他的每次过中是一个

402
00:22:05,824 --> 00:22:08,896
Buffer是多大

403
00:22:09,408 --> 00:22:12,224
有的数字12345一二个

404
00:22:12,736 --> 00:22:18,880
自己还是无意的什么这个我得到了后面的第2讲第3讲的时候再去

405
00:22:19,392 --> 00:22:20,416
再去看一次

406
00:22:21,696 --> 00:22:22,976
好

407
00:22:23,232 --> 00:22:29,376
所以这张图影片告诉大家这个图看不出结构只能看出功能下面这个

408
00:22:29,632 --> 00:22:31,168
这个才是他真正的结构

409
00:22:34,240 --> 00:22:37,312
好现在我们写个测试程序去看看

410
00:22:38,336 --> 00:22:38,848
Sex

411
00:22:39,104 --> 00:22:45,248
做法都一样跟前面都一样首先我要长出一个大哥出来

412
00:22:45,504 --> 00:22:47,040
字符串

413
00:22:49,088 --> 00:22:53,184
然后Forest 271号和loop 100万次

414
00:22:53,440 --> 00:22:57,536
做什么事情275毫的不行

415
00:22:58,304 --> 00:23:04,192
我放在每一个随机数都有转成字符串然后再放进去

416
00:23:05,984 --> 00:23:10,080
放完之后发酵多少时间呢这100万次后要多少时间

417
00:23:11,616 --> 00:23:13,664
2704个名次

418
00:23:14,688 --> 00:23:16,992
玩具之后我就

419
00:23:51,296 --> 00:23:57,440
先前有前后看一下这些各种容器它是最大的它的maximum size最大的

420
00:23:58,720 --> 00:24:01,536
好接下来呢我要说我要查找

421
00:24:02,048 --> 00:24:08,192
我就输入一个词说我要找3 23456我总是要找23456号

422
00:24:08,448 --> 00:24:11,776
不想改了我就关闭我就这样走

423
00:24:12,032 --> 00:24:14,080
找的方式有哪几种啊

424
00:24:14,336 --> 00:24:16,896
使用的是290号的

425
00:24:17,152 --> 00:24:17,664
换

426
00:24:18,432 --> 00:24:21,248
也就是标准库提供的那个全局的

427
00:24:21,504 --> 00:24:22,784
Socks5

428
00:24:24,832 --> 00:24:25,600
找到了吗

429
00:24:26,112 --> 00:24:31,232
我刚提过找不到了几率非常低总是都能找得到

430
00:24:31,488 --> 00:24:34,816
那找到花了多少时间呢这边都有一个

431
00:24:35,072 --> 00:24:38,400
上下每次动作上下一起啊就知道时间

432
00:24:39,168 --> 00:24:45,312
列出来花掉了15个名字是个然后我再试一下

433
00:24:45,568 --> 00:24:48,896
我要把它排序200

434
00:24:49,408 --> 00:24:52,736
24行299我呼叫的士

435
00:24:52,992 --> 00:24:54,272
全局锁

436
00:24:54,528 --> 00:24:59,904
我再提醒大家一次刚刚的那个list for words

437
00:25:35,232 --> 00:25:36,256
你就

438
00:25:36,512 --> 00:25:42,656
开始慢慢有个概念呢我在什么情况是下我选用哪一个容器对我的数据的

439
00:25:42,912 --> 00:25:48,544
据的分布是最理想就开始会有些懒

440
00:25:53,920 --> 00:26:00,064
问你在这目前呢这个之前就是所谓的

441
00:26:00,320 --> 00:26:06,464
情绪性勇气不管他自己不管你是

442
00:26:06,720 --> 00:26:11,328
怎么找到一个元素啊你是用binary search

443
00:26:11,584 --> 00:26:14,656
二分查找那之前要先排序

444
00:26:15,168 --> 00:26:19,264
或者你用6P宿舍继续查找

445
00:26:19,520 --> 00:26:25,664
那就看运气不管怎么样查找好像都要花掉一些时间了

446
00:26:25,920 --> 00:26:28,224
早知有的是什么只是个

447
00:26:28,480 --> 00:26:34,624
毫秒有的是几百个毫秒这个之下

448
00:26:34,880 --> 00:26:41,024
贾要讲的容器叫做SAT1点是勇气踏查早就非常

449
00:26:41,280 --> 00:26:46,912
展会几乎都是0好表

450
00:26:47,168 --> 00:26:52,032
那可能是多少跟你说那个那个那个那一秒

451
00:26:52,544 --> 00:26:58,688
所以我错过只能知道我我的城市只去吃

452
00:26:58,944 --> 00:27:00,480
测到毫秒

453
00:27:00,736 --> 00:27:04,576
就不知道他讲话叫了几个代表

454
00:27:05,088 --> 00:27:11,232
我要表达的意思就是说只要是观点是种气他的查找都是非常快

455
00:27:11,488 --> 00:27:14,048
我们马上就要看到这种气

456
00:27:14,560 --> 00:27:16,096
好这个step

457
00:27:16,352 --> 00:27:22,496
下一页两页呢我这个是大家很熟悉

458
00:27:22,752 --> 00:27:28,896
在大学里面一个是对一个是占非根

459
00:29:33,056 --> 00:29:39,200
就是不许多全世界公认的优势不许pop所以

460
00:29:39,456 --> 00:29:45,600
不许玩了100万次不喜欢之后后面我就试着去调用一些函数871好就怕

461
00:29:45,856 --> 00:29:52,000
这个执行结果在左下角那个叫做先进后

462
00:29:52,256 --> 00:29:58,400
突出先进去的后出来自己去体会这一个

463
00:29:58,656 --> 00:30:04,800
左手边这个画面你就可以看出来了

464
00:30:05,056 --> 00:30:11,200
好只是时间的是Q1需要讲

465
00:30:11,456 --> 00:30:17,600
就是890号这样子来定义

466
00:30:17,856 --> 00:30:24,000
声明一个一个东西它的动作也是教父许可怕

467
00:30:24,256 --> 00:30:29,376
所以在898号不许后面呢

468
00:30:29,632 --> 00:30:32,704
909 pop

469
00:30:33,216 --> 00:30:39,360
不过他的不起爸爸跟商业不需要那个

470
00:30:39,872 --> 00:30:46,016
动作不太一样方向不太一样

471
00:30:46,272 --> 00:30:52,416
由于这两种容器里头其实没有自己的数据

472
00:30:52,672 --> 00:30:58,816
结构他的家用电所以很多人从技术上不把这

473
00:30:59,072 --> 00:31:00,608
这两个容器叫做容器

474
00:31:00,864 --> 00:31:07,008
把它叫做容器的

475
00:31:07,264 --> 00:31:13,408
我们回到最前面的对面一看开始

476
00:31:13,664 --> 00:31:19,808
我在想这六大部件的关系的时候这个

477
00:31:20,064 --> 00:31:21,088
这个是容器

478
00:31:22,112 --> 00:31:28,256
另外有一些容器的所以从技术上来讲那个

479
00:31:28,512 --> 00:31:34,656
在技术上把它叫做

480
00:31:34,912 --> 00:31:41,056
他们表现上他竟然可以放很多元素吗也是有人不明就里就把它叫做容器

481
00:31:41,312 --> 00:31:42,592
都可以了

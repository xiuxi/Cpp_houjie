1
00:00:05,376 --> 00:00:08,704
啊对现在我们进行内存管理的第2讲

2
00:00:09,472 --> 00:00:12,288
在第1讲之中的我们已经

3
00:00:12,544 --> 00:00:16,128
彻底的了解了视觉加给我们的各式各样的

4
00:00:17,152 --> 00:00:17,920
工具

5
00:00:18,176 --> 00:00:20,736
我们叫语言的构建contract

6
00:00:20,992 --> 00:00:27,136
而且你有了我不会丢垃圾调

7
00:00:27,392 --> 00:00:28,672
Arduino nano怎么走

8
00:00:29,696 --> 00:00:32,000
那么从现在开始

9
00:00:32,256 --> 00:00:33,280
我们要来

10
00:00:33,536 --> 00:00:34,560
建立一个

11
00:00:35,328 --> 00:00:39,168
内存管理的管理器或者我们这个分配器

12
00:00:40,960 --> 00:00:44,288
自己来摸你自己来想象来开发

13
00:00:44,544 --> 00:00:46,592
中间经过很多的过程

14
00:00:47,104 --> 00:00:47,872
倒不如

15
00:00:48,640 --> 00:00:50,944
我们就拿一个很棒的东西来学习

16
00:00:52,480 --> 00:00:57,856
所以在在第2枪里头我要拿标准库的allocator

17
00:00:58,368 --> 00:00:59,648
看看他是怎么做的

18
00:01:01,440 --> 00:01:04,256
在这个地儿家里头不但我们

19
00:01:04,512 --> 00:01:05,792
我要带大家去看看

20
00:01:06,560 --> 00:01:08,096
这一套东西

21
00:01:08,608 --> 00:01:13,216
的运作方式我还会带大家来看看他的语言代码

22
00:01:13,472 --> 00:01:15,520
非常宝贵的部分

23
00:01:16,032 --> 00:01:21,408
被我惊险了所以整个范围整个这个份量也不是太重

24
00:01:21,664 --> 00:01:23,200
不到300行

25
00:01:25,504 --> 00:01:27,552
是一个很很很

26
00:01:27,808 --> 00:01:29,600
宝贵的一个分支援

27
00:01:31,392 --> 00:01:36,512
在准备这个假期讲的时候我出来想到这两句

28
00:01:36,768 --> 00:01:37,280
哇

29
00:01:38,304 --> 00:01:44,448
这个是不是19手里头的一手的开拍天西北有高楼

30
00:01:44,704 --> 00:01:50,848
上浮云骑我在想到我们现在要学习的这个东西那就是一座

31
00:01:51,104 --> 00:01:57,248
高楼标准库的分配器称得上是一座高楼吧

32
00:01:57,504 --> 00:02:03,648
是一个值得我们去学习的东西去认识的东西

33
00:02:03,904 --> 00:02:10,048
这个我想到一件有趣的事情在网络上看到的是

34
00:02:11,328 --> 00:02:14,144
西方有一位学者就问中国的学者

35
00:02:14,656 --> 00:02:16,960
手为什么孔雀东南飞

36
00:02:17,472 --> 00:02:23,616
这个学者要说啊因为西北有高楼这个北京到孔雀东南飞

37
00:02:24,896 --> 00:02:28,480
在这段对话里面的西方学者是谁

38
00:02:28,736 --> 00:02:34,880
中国学者是谁的我都忘了我对人民们这不太软记忆力比较差一些

39
00:02:35,904 --> 00:02:37,952
好我们来看看这个高楼

40
00:02:40,768 --> 00:02:43,328
先回想一下在第1讲里面

41
00:02:43,584 --> 00:02:47,680
我们其实已经自己开发的一些小型的分配器

42
00:02:48,192 --> 00:02:52,544
这些配置放在每一个Class的头像

43
00:02:52,800 --> 00:02:54,848
当时在画面上的标题

44
00:02:55,104 --> 00:02:55,872
我还有出现

45
00:02:56,128 --> 00:02:56,640
Per

46
00:02:56,896 --> 00:02:57,664
Class

47
00:02:57,920 --> 00:02:58,944
Allocate

48
00:03:00,224 --> 00:03:01,760
这里面的设计其实已经

49
00:03:02,016 --> 00:03:04,576
达到了很不错的水准

50
00:03:05,088 --> 00:03:06,880
记得吗我们有版本1

51
00:03:07,392 --> 00:03:08,160
有版本2

52
00:03:08,416 --> 00:03:12,512
那个版本2奶里面用到了intended荤菜的概念

53
00:03:13,024 --> 00:03:13,792
做法

54
00:03:14,304 --> 00:03:18,656
嵌入式指针最绝对没有浪费任何一个字节

55
00:03:19,424 --> 00:03:20,704
家用

56
00:03:21,472 --> 00:03:22,752
发器本身

57
00:03:23,008 --> 00:03:26,848
前面四个字节拿来帮助指针这个做法

58
00:03:27,872 --> 00:03:29,152
说到了版本儿

59
00:03:30,688 --> 00:03:32,736
版本3是那个micro

60
00:03:32,992 --> 00:03:34,016
转成micro

61
00:03:35,296 --> 00:03:38,112
所以这个版本我们就谈谈了2

62
00:03:38,880 --> 00:03:39,392
Siri

63
00:03:39,904 --> 00:03:44,512
在这个过程里头那在这个设计里头了其实已经是

64
00:03:44,768 --> 00:03:46,816
达到了内存管理的

65
00:03:47,328 --> 00:03:48,352
要求了

66
00:03:49,120 --> 00:03:52,704
也就是尽量减少对malloc的

67
00:03:52,960 --> 00:03:53,728
调用

68
00:03:53,984 --> 00:03:56,288
因为据说没落格很慢

69
00:03:57,824 --> 00:04:03,968
不过到了第3讲像是第2讲到的第3讲我们会看到70那那个不慢

70
00:04:04,224 --> 00:04:06,528
这个大家对他是一个误解

71
00:04:07,296 --> 00:04:12,672
好现在间打回来据说没落格很慢所以我们想要强的那已经达到这个要求了

72
00:04:13,184 --> 00:04:16,768
因为每条链表一次哇一大会自己去切小块

73
00:04:17,791 --> 00:04:21,375
但害怕先打倒了他还有一件事情还没有达到

74
00:04:22,655 --> 00:04:23,423
就是

75
00:04:24,191 --> 00:04:26,239
Malloc得到的区块

76
00:04:26,495 --> 00:04:28,031
其实是带着空气

77
00:04:30,591 --> 00:04:32,127
这个哭泣的

78
00:04:33,151 --> 00:04:35,967
我们校区包含一个额外的开销

79
00:04:36,479 --> 00:04:39,039
这个开销我们去直关注的是他的

80
00:04:40,063 --> 00:04:43,647
这个好用率占用的比率

81
00:04:44,671 --> 00:04:47,999
如果你的区块本身很大非常棒

82
00:04:48,255 --> 00:04:51,583
也不要说很大非常大的就是比如说100

83
00:04:52,351 --> 00:04:53,119
那么

84
00:04:53,375 --> 00:04:59,519
Tokina cookie我们知道是一定是占用八个字节我们现在引力一来

85
00:05:01,311 --> 00:05:07,455
所以这个比例算下来一8%这个就他的让算是浪费率必要的浪费

86
00:05:08,223 --> 00:05:14,367
如果你的区块比较小的浪费比较高因为cookie是一定占用八个字

87
00:05:14,623 --> 00:05:15,135
自己

88
00:05:16,415 --> 00:05:16,927
所以

89
00:05:19,231 --> 00:05:21,023
所以在现在

90
00:05:21,279 --> 00:05:26,655
一般见识运用之中的其实对象本身都不会太大

91
00:05:26,911 --> 00:05:33,055
在我们现实在工业等级的我们在做通常都不会太大但是那样很多我们叫做海

92
00:05:33,311 --> 00:05:34,079
海量的

93
00:05:34,335 --> 00:05:35,359
小区块

94
00:05:36,127 --> 00:05:40,479
这种情况之下的cookie的浪费就让我们觉得不太能忍受

95
00:05:41,759 --> 00:05:43,807
特别尤其是我们

96
00:05:44,319 --> 00:05:47,647
在工业级的东西海量的小区块

97
00:05:47,903 --> 00:05:50,975
为什么会儿这些内存块又是一样的大小

98
00:05:52,255 --> 00:05:54,815
后期主要是记录区块的多大

99
00:05:55,071 --> 00:06:01,215
但你现在的所有的空气是一样的大小或者只是某几种300万个里面只是跟

100
00:06:01,471 --> 00:06:03,007
中为两三种大小而已

101
00:06:04,031 --> 00:06:07,871
这似乎没有必要去取需要这个工具

102
00:06:09,919 --> 00:06:10,687
所以

103
00:06:10,943 --> 00:06:12,479
有没有办法把

104
00:06:12,991 --> 00:06:14,527
第1讲的那个

105
00:06:15,039 --> 00:06:16,575
那个那个设计

106
00:06:16,831 --> 00:06:18,879
把它做的更好一些

107
00:06:19,135 --> 00:06:20,671
然后去除这个估计

108
00:06:21,695 --> 00:06:23,999
这就是我们要奋斗的目标

109
00:06:24,511 --> 00:06:28,863
内存管理一个就是效率要提高一个就是空间率要

110
00:06:29,119 --> 00:06:29,887
精简

111
00:06:30,143 --> 00:06:33,983
我们现在希望能够公司达到整片的诉求

112
00:06:35,263 --> 00:06:41,407
这一页再一讲那也曾经出现过在某一个范围

113
00:06:41,663 --> 00:06:43,455
给张浦影片头出现过

114
00:06:44,991 --> 00:06:51,135
当时我说后头还会越讲越清楚他的第3讲那那个就是非常清楚的讨论之一

115
00:06:51,391 --> 00:06:51,903
这款

116
00:06:52,159 --> 00:06:57,023
现在这边呢还是让大家在理解一次cookie的计算方式

117
00:06:58,047 --> 00:06:59,583
这个是你要的大小

118
00:07:00,095 --> 00:07:01,375
我们有按照比例化

119
00:07:01,887 --> 00:07:03,423
没有按照比例

120
00:07:03,935 --> 00:07:06,495
这个现在是11我是16进位的c

121
00:07:06,751 --> 00:07:09,311
新的就是12老师敬畏的词儿

122
00:07:10,079 --> 00:07:10,591
好

123
00:07:11,359 --> 00:07:17,503
当你要12个字节怎么大的时候没有那个我给你的是多少呢这是vc6里下棋

124
00:07:17,759 --> 00:07:23,903
其实是上面带着一包浅色的下面还有一个也是浅色的我们现在都不要去分析它做什么

125
00:07:24,159 --> 00:07:26,207
用总是他就会这样给你

126
00:07:27,487 --> 00:07:29,279
然后呢上下铺

127
00:07:30,303 --> 00:07:33,887
然后再加上看看加起来以后是不是16的倍数

128
00:07:34,399 --> 00:07:38,751
不是的话把他调到10的倍数所以就没有个填补

129
00:07:39,263 --> 00:07:41,055
钱不多少这个不一定

130
00:07:41,311 --> 00:07:43,615
现在我们这个例子来说什么看

131
00:07:43,871 --> 00:07:44,895
这个是C

132
00:07:46,431 --> 00:07:52,575
加上上面是32我再一个字四个字节1234567

133
00:07:52,831 --> 00:07:53,343
78

134
00:07:53,855 --> 00:07:55,135
8433

135
00:07:56,415 --> 00:07:57,439
下面还有一个

136
00:07:57,695 --> 00:07:58,719
再加四

137
00:07:59,743 --> 00:08:02,047
加完之后上下空气

138
00:08:02,559 --> 00:08:03,583
四川12

139
00:08:04,863 --> 00:08:05,887
夹起来吃

140
00:08:07,679 --> 00:08:08,959
我这个是16进位

141
00:08:09,471 --> 00:08:11,775
我是各进位加法还蛮快的

142
00:08:12,287 --> 00:08:13,567
反正你自己家看

143
00:08:14,847 --> 00:08:16,127
加起来是38

144
00:08:17,663 --> 00:08:20,735
38要调到16的边界的

145
00:08:20,991 --> 00:08:22,527
这边必须是有备注

146
00:08:23,039 --> 00:08:24,319
所以只是咧

147
00:08:26,879 --> 00:08:30,207
因此这个从38到40要填

148
00:08:30,719 --> 00:08:34,047
八个字节就是这个浅绿色的部分

149
00:08:35,327 --> 00:08:39,679
这样子算出来之后当你没了的钥匙

150
00:08:39,935 --> 00:08:43,519
12个字节的时候其实你要是这一大关

151
00:08:44,031 --> 00:08:47,871
给你的是这么一大块儿你得到的指针指向最

152
00:08:50,175 --> 00:08:52,223
你会往下写写东西

153
00:08:54,783 --> 00:09:00,159
好这么一大会消耗掉这么一大会是多少呢40x

154
00:09:01,183 --> 00:09:05,791
这被登记在这个cookie头这里整包就给你了你就拿到了这个自尊了

155
00:09:08,351 --> 00:09:10,911
当你不需要的时候你还要用free

156
00:09:11,423 --> 00:09:13,727
Malloc对应的字符E3

157
00:09:13,983 --> 00:09:16,031
就你这房子一根指针

158
00:09:16,543 --> 00:09:20,127
然后你这个函数那他有一些机制他自然会调整

159
00:09:20,383 --> 00:09:26,015
去看到这个工具就知道他要回收的是这一整块400

160
00:09:28,063 --> 00:09:34,207
这个就是vc6底下没有Lock的一个营销号的东西不是我们现在

161
00:09:34,463 --> 00:09:35,743
希望去除

162
00:09:36,767 --> 00:09:38,047
我们看看怎么做

1
00:00:05,376 --> 00:00:08,704
现在我们进行内存管理的第3讲

2
00:00:08,960 --> 00:00:10,752
我要谈的是malloc和free

3
00:00:11,776 --> 00:00:15,872
这两个函数大家并不陌生它是参与人

4
00:00:16,384 --> 00:00:17,920
层次的东西

5
00:00:18,176 --> 00:00:19,712
为什么谈这个呢

6
00:00:20,736 --> 00:00:23,552
我们在第2讲的时候谈到了一个

7
00:00:24,064 --> 00:00:26,624
标准库的分配器的设计

8
00:00:27,648 --> 00:00:33,792
甚至在第1讲的我也都谈到了就是其实所有的动作在cplusplus在实现在要

9
00:00:34,048 --> 00:00:37,632
要是建构在此之上的动作最后都跑到美了出来

10
00:00:37,888 --> 00:00:41,472
所以如果我们不能够了解这个最根源的

11
00:00:41,728 --> 00:00:43,776
他的效率如何的话

12
00:00:44,288 --> 00:00:48,640
总是觉得拼图找了一块很重要的一块

13
00:00:48,896 --> 00:00:51,456
所以第3讲下来弹没了主意

14
00:00:51,968 --> 00:00:52,992
那么我们一般

15
00:00:54,016 --> 00:00:55,808
可能会有一个误解

16
00:00:56,064 --> 00:00:57,856
不觉得malloc挺慢的

17
00:00:58,112 --> 00:01:01,440
所以我们也尽量少去要用它

18
00:01:01,696 --> 00:01:07,328
也因此才在他这个上头那做了很多的内存管理

19
00:01:07,584 --> 00:01:11,424
在第3讲里面可以让大家可以非常清楚的了解到

20
00:01:11,680 --> 00:01:13,984
奥比他慢不慢他会不会

21
00:01:15,264 --> 00:01:17,312
除了快慢之外

22
00:01:17,568 --> 00:01:20,128
他还有什么事情是我们要了解的

23
00:01:20,384 --> 00:01:21,664
三讲的

24
00:01:22,688 --> 00:01:23,200
内容

25
00:01:24,224 --> 00:01:26,272
我非常喜欢这句话

26
00:01:26,528 --> 00:01:28,832
胸中自有求和

27
00:01:29,088 --> 00:01:30,112
我也很希望

28
00:01:30,624 --> 00:01:36,512
在这一讲里面带领大家去理解这个整个背后的机制的动作

29
00:01:37,280 --> 00:01:42,144
从此以后大家胸中自有求和你非常清楚

30
00:01:42,400 --> 00:01:44,192
整个内存系统里面的

31
00:01:44,448 --> 00:01:46,240
到底是怎么一回事

32
00:01:47,776 --> 00:01:51,872
而不是谈到这个没落的我会带大家去看

33
00:01:52,384 --> 00:01:58,528
源代码的动作就不会再像上一讲的样子看一个完整的源代码那个态

34
00:01:58,784 --> 00:02:00,064
太吓人了

35
00:02:00,320 --> 00:02:02,624
Block里头的设计太吓人了

36
00:02:02,880 --> 00:02:04,416
太复杂了

37
00:02:05,696 --> 00:02:11,840
所以我只会讲他的从源代码里面之后理解出来的它的运作模式化

38
00:02:12,096 --> 00:02:16,192
百度地图来大引领他一些很关键的

39
00:02:16,448 --> 00:02:19,776
原在哪个动作非常关键的少量的我还是黑

40
00:02:20,032 --> 00:02:21,056
好显示出来

41
00:02:22,080 --> 00:02:23,872
那么这既然谈到

42
00:02:24,384 --> 00:02:30,016
这些动作他是根源于某一个源代码我们就要谈谈源代码的版本了

43
00:02:31,040 --> 00:02:37,184
我带你去看的是利用widget cplusplus of VC vc6

44
00:02:37,440 --> 00:02:38,208
6.0

45
00:02:38,720 --> 00:02:40,768
我这里源代码以及他的动作

46
00:02:41,280 --> 00:02:43,584
6.0这个时间很早了呀

47
00:02:44,096 --> 00:02:44,864
好

48
00:02:45,888 --> 00:02:50,496
发给我会解释其实到了现在那个里头的动作都是差不多的

49
00:02:53,056 --> 00:02:57,920
那我们选择一个版本的其他的版本怎么办呢在微信里下他是这样的

50
00:02:58,432 --> 00:03:02,016
行为在各路基底下载波轮的笔下

51
00:03:02,528 --> 00:03:07,136
怎么办呢我们没有经历我们也没有必要一个一个去看他

52
00:03:08,160 --> 00:03:08,928
所以

53
00:03:09,440 --> 00:03:11,488
这个又是我很喜欢的一句话

54
00:03:13,024 --> 00:03:14,304
触类旁通

55
00:03:14,560 --> 00:03:19,168
我们已经懂了一个几字之后而且我告诉你我其实看过的其他的版本

56
00:03:19,424 --> 00:03:21,728
但我们没有办法一个一个细节

57
00:03:21,984 --> 00:03:26,848
直到一个之后的就能够触类旁通去知道其他

58
00:03:27,104 --> 00:03:28,128
行为模式

59
00:03:29,408 --> 00:03:31,456
大概也差不太多了

60
00:03:33,248 --> 00:03:36,832
好我们现在就是技术基础的部分

61
00:03:38,880 --> 00:03:39,904
在

62
00:03:40,416 --> 00:03:45,024
我真想你的时候准备的很多的画面呢由于太复杂

63
00:03:45,280 --> 00:03:48,096
所以常常会把这个整个画面

64
00:03:48,352 --> 00:03:48,864
战马

65
00:03:49,632 --> 00:03:51,936
这个标题我就能够到右手边来了

66
00:03:55,264 --> 00:03:57,568
首先我要带你去看

67
00:03:57,824 --> 00:03:59,104
Vc6

68
00:04:00,384 --> 00:04:03,200
它的没落的这个行为模式

69
00:04:03,712 --> 00:04:05,760
马上就会看到危机时

70
00:04:07,040 --> 00:04:10,368
VC实已经很接近我们现在的版本了

71
00:04:10,624 --> 00:04:16,768
他没意识到底是visual studio 2005 200032 408还是一点还是一个

72
00:04:17,024 --> 00:04:19,071
我也已经不知道了

73
00:04:19,839 --> 00:04:21,887
这个都已经无所谓了

74
00:04:22,911 --> 00:04:24,959
反正他是一个比较新的版本

75
00:04:25,727 --> 00:04:27,519
现在我们来看vc6

76
00:04:28,031 --> 00:04:32,895
现在左手边这一张图这个大后头也会一再的出现

77
00:04:33,663 --> 00:04:34,943
这个是

78
00:04:35,711 --> 00:04:38,527
你的cplusplus程序进入

79
00:04:39,295 --> 00:04:41,087
之前跟之后的行为

80
00:04:41,343 --> 00:04:42,623
这是一个非常

81
00:04:42,879 --> 00:04:44,927
一般人都不知道的事情

82
00:04:45,439 --> 00:04:46,463
关于这一个人

83
00:04:46,975 --> 00:04:48,255
我有另外一门课

84
00:04:48,511 --> 00:04:54,655
Cplusplus的成套利投机之类的屏幕到时候推出来

85
00:04:54,911 --> 00:04:56,447
你看就知道了

86
00:04:56,703 --> 00:05:00,287
会很深入了

87
00:05:01,311 --> 00:05:03,103
在这些动作里头

88
00:05:03,871 --> 00:05:06,943
我们是一家家的进入点是这个

89
00:05:07,711 --> 00:05:08,991
你写的程序在这里

90
00:05:10,015 --> 00:05:14,111
如果是在Windows程序里下载就是Win10不过定位跟这个相当了

91
00:05:16,415 --> 00:05:18,207
在这个之前做了这么多事情

92
00:05:19,231 --> 00:05:21,023
这个之后做了这么多事情

93
00:05:22,047 --> 00:05:24,863
到底是谁来调用你的你写的面呢

94
00:05:26,143 --> 00:05:30,239
这张图像和stack调用的次序

95
00:05:30,751 --> 00:05:32,031
调用的

96
00:05:33,055 --> 00:05:34,591
Sex

97
00:05:35,103 --> 00:05:36,639
这个从下往上看

98
00:05:36,895 --> 00:05:37,919
箭头

99
00:05:39,455 --> 00:05:40,735
这个是操作系统

100
00:05:42,271 --> 00:05:43,551
内核的部分

101
00:05:44,319 --> 00:05:47,647
它会调用这个函数叫面crt Star

102
00:05:48,415 --> 00:05:51,231
Men's part1 part2

103
00:05:52,255 --> 00:05:55,327
这个就是在vc6底下

104
00:05:55,583 --> 00:05:57,631
所谓crt

105
00:05:57,887 --> 00:05:59,167
所提供的函数

106
00:05:59,423 --> 00:06:01,727
Cyp2c19

107
00:06:03,007 --> 00:06:05,311
你是不是等于10 C的标准库

108
00:06:05,823 --> 00:06:08,127
提供了一个函数名称是这样

109
00:06:09,151 --> 00:06:11,967
在各路西底下也有只是名称不太

110
00:06:12,223 --> 00:06:12,991
相同

111
00:06:13,247 --> 00:06:14,015
我想同

112
00:06:14,527 --> 00:06:20,671
这个进去之后他做了这么多事情最后他才终于准备好了没准备好

113
00:06:20,927 --> 00:06:24,511
Crt准备好自己准备好

114
00:06:25,023 --> 00:06:28,863
然后才调用你的面终于进入你的程序的结果

115
00:06:53,951 --> 00:06:55,487
你要求的大小

116
00:06:55,999 --> 00:06:58,303
小鱼这是一个常量

117
00:06:58,815 --> 00:07:04,959
它定义的常量小于它的华小于等于它的话那么就做这个东西

118
00:07:07,775 --> 00:07:08,799
不是的话

119
00:07:09,823 --> 00:07:11,103
就到下面了

120
00:07:12,639 --> 00:07:13,919
做这个动作

121
00:07:14,687 --> 00:07:15,455
这个是

122
00:07:16,223 --> 00:07:22,367
Windows底下Windows操作系统本身给你的函数匹配就从这里

123
00:07:22,623 --> 00:07:23,391
魅族

124
00:07:24,927 --> 00:07:26,463
这里的判断的

125
00:07:26,975 --> 00:07:28,767
这个大小是多少

126
00:07:29,791 --> 00:07:32,607
3f吧也就是1016

127
00:07:33,887 --> 00:07:35,935
这个threshold这个门槛

128
00:07:36,959 --> 00:07:39,263
英文字眼这个就是门槛的意思

129
00:07:39,519 --> 00:07:45,663
所以如果你要求的大小比这个门槛小的话它就从这里

130
00:07:45,919 --> 00:07:46,943
你是哪所

131
00:07:47,967 --> 00:07:52,831
如果比他爸他说抱歉那我不为你服务了有这里来服务

132
00:07:53,855 --> 00:07:56,159
所以从这个地方我们可以感觉

133
00:07:56,671 --> 00:07:58,463
他也是在为

134
00:07:58,975 --> 00:08:00,511
小区会服务

135
00:08:01,791 --> 00:08:05,375
我们前面在讲分配器的时候第2讲创造分配器也是在为

136
00:08:05,631 --> 00:08:06,911
小区会服务

137
00:08:07,423 --> 00:08:09,983
而这里所谓的小是多少呢

138
00:08:10,495 --> 00:08:11,263
1016

139
00:08:13,311 --> 00:08:15,103
这个数字很奇怪

140
00:08:15,359 --> 00:08:19,967
1016已经接近1024了1024才是我们觉得是一个好像是一个

141
00:08:20,735 --> 00:08:22,783
一个一个重新指向的

142
00:08:23,295 --> 00:08:28,159
事实上的确是1024这边有个变化的后头再来说他

143
00:08:29,439 --> 00:08:29,951
所以

144
00:08:30,975 --> 00:08:32,255
所以我们可以理解了

145
00:08:32,767 --> 00:08:35,071
在vc6里下

146
00:08:35,583 --> 00:08:39,935
在一个复杂的内存管理是应付小区块的

147
00:08:40,191 --> 00:08:41,215
在这个位置上

148
00:08:42,239 --> 00:08:46,591
这个函数解s c h l y

149
00:08:47,103 --> 00:08:49,663
Sph是他的命令

150
00:08:50,431 --> 00:08:51,199
就是

151
00:08:51,455 --> 00:08:54,271
Small black sheep

152
00:08:55,807 --> 00:08:56,831
我们就是要去

153
00:08:57,343 --> 00:08:59,391
追踪这一个设计

154
00:09:00,159 --> 00:09:02,463
什么叫做sdh

155
00:09:02,719 --> 00:09:04,255
我们就去看它的设计

156
00:09:05,535 --> 00:09:06,303
这里面

157
00:09:07,071 --> 00:09:11,167
这设计由于我们已经对第2讲的分配器有概念了

158
00:09:11,679 --> 00:09:16,287
所以再过来当然就要轻松很多因为很多的内存管理的

159
00:09:16,799 --> 00:09:18,079
概念是相通的

160
00:09:20,639 --> 00:09:22,175
好这个是你是16

161
00:09:23,455 --> 00:09:24,223
下一页

162
00:09:24,991 --> 00:09:26,783
这是微晶石

163
00:09:27,551 --> 00:09:28,575
一个新的版本了

164
00:09:31,391 --> 00:09:33,183
这一个callback

165
00:09:34,207 --> 00:09:39,071
我仍然沿用vc6的那个次序但是我把中间

166
00:09:39,583 --> 00:09:42,143
现在新版本VC时

167
00:09:42,911 --> 00:09:45,471
不存在了多打一个插把它化掉

168
00:09:47,775 --> 00:09:48,543
其中

169
00:09:48,799 --> 00:09:52,127
刚刚在上一页让你看的这个函数

170
00:09:52,895 --> 00:09:53,663
现在

171
00:09:54,431 --> 00:09:55,967
仍然存在

172
00:09:57,503 --> 00:10:00,575
这个函数里头的设计是这样源代码在这里

173
00:10:02,879 --> 00:10:05,439
Arm这个函数是这样子

174
00:10:06,975 --> 00:10:07,999
这个名字呢

175
00:10:08,255 --> 00:10:09,535
我不一样啊

176
00:10:10,559 --> 00:10:14,143
为什么为什么左边能够调用到右边呢

177
00:10:14,911 --> 00:10:16,959
因为上面有一个方案

178
00:10:18,239 --> 00:10:19,263
Define

179
00:10:20,287 --> 00:10:23,103
所以体会一下由于这个地方

180
00:10:23,615 --> 00:10:25,151
所以其是左边

181
00:10:25,407 --> 00:10:27,199
北京到右边这个出来

182
00:10:29,247 --> 00:10:30,783
这个函数里头

183
00:10:31,039 --> 00:10:36,159
就不再做这个threshold门槛的

184
00:10:36,927 --> 00:10:37,695
检测

185
00:10:39,231 --> 00:10:41,535
里头这些动作都不是我们关心的

186
00:10:42,303 --> 00:10:44,607
我们只关心最后这个动作

187
00:10:45,887 --> 00:10:48,703
他无论是什么样的大小

188
00:10:49,727 --> 00:10:50,751
他都调用

189
00:10:51,007 --> 00:10:54,079
操作系统的clk的来提供服务

190
00:10:56,127 --> 00:10:57,151
也就是说

191
00:10:57,407 --> 00:11:03,551
到了比较新的版本你都能不再有所谓的s d h这个东西

192
00:11:05,087 --> 00:11:09,695
他不在特别为小块内存来做管理

193
00:11:09,951 --> 00:11:11,999
卡通通交给操作系统做

194
00:11:14,559 --> 00:11:20,703
这样的话我待会要带你去看危机六的那个精巧的设计哪有什么意义呢

195
00:11:20,959 --> 00:11:22,751
那么新版本已经不见了

196
00:11:24,543 --> 00:11:25,311
有意义

197
00:11:26,079 --> 00:11:30,175
那些动作其实都被包装到这里头去了

198
00:11:30,943 --> 00:11:34,271
操作系统也在做类似的动作

199
00:11:36,063 --> 00:11:39,391
我能够空口说白话我能够有证据吗

200
00:11:40,415 --> 00:11:40,927
有

201
00:11:41,439 --> 00:11:43,487
蛋就不含的这个课程里头

202
00:11:44,255 --> 00:11:45,535
有另外一门课程

203
00:11:45,791 --> 00:11:51,935
在谈win Windows pip管理那个时候已经升到操作系统层面了

204
00:11:52,447 --> 00:11:54,239
我这个挖出一些证据

205
00:11:54,751 --> 00:11:55,519
账务处理

206
00:11:57,055 --> 00:12:01,407
现在你所学的这些内存管理的都被搬到操作系统去了

207
00:12:03,711 --> 00:12:04,735
所以

208
00:12:05,503 --> 00:12:11,135
在接下来的这个部影片里面我所谈的全部都是VC 60座

209
00:12:13,951 --> 00:12:14,719
但他

210
00:12:14,975 --> 00:12:15,743
仍然

211
00:12:16,255 --> 00:12:17,023
存在

212
00:12:17,791 --> 00:12:19,583
看到操作系统怎么样

213
00:12:21,887 --> 00:12:24,447
好的是我们这两张投影片

214
00:12:27,775 --> 00:12:29,311
在刚刚的这个

215
00:12:29,823 --> 00:12:32,895
Call stack一个一个的调用次序

216
00:12:33,407 --> 00:12:34,943
请注意这边

217
00:12:35,455 --> 00:12:39,295
这是vc6是这样啊他的危机使这些不见了

218
00:12:39,551 --> 00:12:41,343
这次三个不见了

219
00:12:41,599 --> 00:12:45,183
三个鱼的名字叫什么叫s d h开头

220
00:12:45,951 --> 00:12:49,023
这也可以让你感觉sbh

221
00:12:49,279 --> 00:12:51,071
到了新版本不见了

222
00:12:54,143 --> 00:12:55,423
好

223
00:12:55,935 --> 00:12:57,471
在这个地方

224
00:12:59,007 --> 00:13:00,287
看看是不是这里

225
00:13:00,543 --> 00:13:01,311
还不是

226
00:13:01,567 --> 00:13:02,847
所以我们往下看

227
00:13:03,103 --> 00:13:06,943
我这边这个看过了vc6的这个是Win10的

228
00:13:07,455 --> 00:13:08,735
再往下看

229
00:13:12,063 --> 00:13:15,135
我们现在来探讨sdh

230
00:13:15,391 --> 00:13:19,999
我们想了解没落克里头的精巧的设计

231
00:13:21,791 --> 00:13:24,351
这个刚刚在调用的时候

232
00:13:25,375 --> 00:13:31,519
这里头的定一个最重要的动作我在进入面之前的第1个动作就是引来

233
00:13:32,799 --> 00:13:35,871
从民生来看也知道他跟内存有关

234
00:13:36,895 --> 00:13:40,991
所以我现在带你去看看Insurance工作

235
00:13:42,527 --> 00:13:44,319
他做什么初始化呢

236
00:13:45,599 --> 00:13:46,879
这里头

237
00:13:49,439 --> 00:13:51,231
这个动作

238
00:13:52,767 --> 00:13:57,631
我要先把这些就调用到win32 Windows

239
00:13:58,143 --> 00:14:01,983
提供的API的函数所以我要先把Windows

240
00:14:02,495 --> 00:14:05,567
对内存的管理的一些概念先跟大家提一下

241
00:14:08,383 --> 00:14:11,199
Windows本身维护了海量的内存

242
00:14:12,735 --> 00:14:14,527
你可以

243
00:14:14,783 --> 00:14:18,879
跟他要求说我帮我创建一个信

244
00:14:19,135 --> 00:14:20,671
就是一块空间了

245
00:14:20,927 --> 00:14:22,719
一块独特的空间

246
00:14:23,231 --> 00:14:24,511
我要给他命名

247
00:14:25,023 --> 00:14:29,375
然后呢今后我做的某些动作都是从这一块来取

248
00:14:29,887 --> 00:14:36,031
我还可以跟他要求要另一块换那个名字我的其他的另外一些动作都是从那一个

249
00:14:36,287 --> 00:14:36,799
快来取

250
00:14:37,567 --> 00:14:40,127
说这是一个逻辑上的把它分类

251
00:14:41,407 --> 00:14:42,175
现在

252
00:14:42,943 --> 00:14:44,223
在这个动作里头

253
00:14:45,503 --> 00:14:49,087
马上就跟操作系统说你给我一个系统

254
00:14:50,367 --> 00:14:51,135
多大了

255
00:14:51,647 --> 00:14:54,975
这些数字我已经查过了然后打出来给你看

256
00:14:55,487 --> 00:14:56,767
4096怎么大

257
00:14:58,559 --> 00:15:02,655
得到了这一块我要给他命一个名称叫做crt

258
00:15:04,191 --> 00:15:05,727
这是一个全局变量

259
00:15:07,263 --> 00:15:09,823
你可以想象和就是一个指针

260
00:15:10,335 --> 00:15:16,479
指向这一块最会做什么用的那位名叫crt-t想的就是家

261
00:15:16,735 --> 00:15:19,807
将来后人要给crt用的

262
00:15:20,063 --> 00:15:22,111
Silicon labs

263
00:15:23,135 --> 00:15:24,415
刚刚迷所看的

264
00:15:24,671 --> 00:15:26,719
这些都是crt的动作

265
00:15:26,975 --> 00:15:30,559
在这里所要求的内存都将要

266
00:15:31,071 --> 00:15:32,607
从这一块来的

267
00:15:33,631 --> 00:15:35,679
最快多大4096

268
00:15:36,447 --> 00:15:38,495
这里觉得不大呀

269
00:15:38,751 --> 00:15:44,895
没关系当你系需要的时候操作系统自然会把增长所以这个数值

270
00:15:45,151 --> 00:15:46,431
不是太有意义

271
00:15:48,479 --> 00:15:50,015
把这个拿到之后

272
00:15:51,551 --> 00:15:52,831
接下来做这个动作

273
00:15:54,879 --> 00:15:56,927
这个动作在右手边

274
00:15:58,463 --> 00:15:59,743
他所做的事情

275
00:16:01,279 --> 00:16:02,815
OK

276
00:16:04,095 --> 00:16:05,631
从此行那边拿呢

277
00:16:06,399 --> 00:16:07,167
这个

278
00:16:08,191 --> 00:16:10,751
这个是谁这个是就是这个

279
00:16:12,287 --> 00:16:14,591
你刚刚说刚刚在左手边说

280
00:16:14,847 --> 00:16:20,223
请你给我4096这样一块我要用crt的需求

281
00:16:21,247 --> 00:16:25,599
然后接下去到这个地方就做好了现在我就从这一块里面

282
00:16:26,367 --> 00:16:27,391
去拿

283
00:16:27,647 --> 00:16:28,415
拿多少

284
00:16:28,671 --> 00:16:30,207
16个

285
00:16:30,463 --> 00:16:31,231
Header

286
00:16:31,743 --> 00:16:32,511
怎么办

287
00:16:34,559 --> 00:16:35,583
黑的是什么

288
00:16:36,095 --> 00:16:37,119
等下就会介绍

289
00:16:38,143 --> 00:16:39,935
现在要16个黑的

290
00:16:40,959 --> 00:16:42,751
我用画出来

291
00:16:43,263 --> 00:16:44,031
这个

292
00:16:44,287 --> 00:16:46,847
Locate拿到的

293
00:16:47,871 --> 00:16:49,407
结果

294
00:16:50,175 --> 00:16:55,807
正是这就是一根指针这个指针就指向16个黑人同

295
00:16:58,111 --> 00:16:59,135
准备好了在这里

296
00:16:59,647 --> 00:17:01,183
这整个动作是什么

297
00:17:01,439 --> 00:17:03,743
叫做

298
00:17:04,767 --> 00:17:07,839
所以他的初始化就是把16个adas

299
00:17:08,095 --> 00:17:08,863
准备好

300
00:17:10,655 --> 00:17:11,935
这里有的16

301
00:17:13,215 --> 00:17:16,543
至于这些变量的目前都不必须提他

302
00:17:19,615 --> 00:17:21,151
所以回到前面来

303
00:17:22,175 --> 00:17:24,223
无论是新版的

304
00:17:24,991 --> 00:17:26,783
但是跟前面旧版的

305
00:17:28,063 --> 00:17:30,367
都会进入这个TPS

306
00:17:31,135 --> 00:17:32,671
而里头做的事就是

307
00:17:33,695 --> 00:17:35,487
分配了16个黑的

308
00:17:38,047 --> 00:17:40,095
我很快就会去看看header

309
00:17:40,351 --> 00:17:41,375
长什么样子

310
00:17:43,423 --> 00:17:44,959
这个就是黑的结构

311
00:17:45,727 --> 00:17:48,031
刚才没上普我是这么画的

312
00:17:48,799 --> 00:17:50,079
其中的一个

313
00:17:51,615 --> 00:17:53,919
所以图形来表现这样

314
00:17:54,943 --> 00:17:56,479
怎么能勾画出这张图呢

315
00:17:56,735 --> 00:17:57,503
好的是

316
00:17:57,759 --> 00:17:59,295
数据结构在这里

317
00:18:00,575 --> 00:18:01,599
我来看看

318
00:18:02,623 --> 00:18:03,903
这里头

319
00:18:04,159 --> 00:18:04,671
有

320
00:18:06,207 --> 00:18:06,975
有

321
00:18:08,767 --> 00:18:10,303
为什么这三个

322
00:18:11,839 --> 00:18:14,143
这三个都是Master

323
00:18:15,167 --> 00:18:16,447
Vector

324
00:18:17,215 --> 00:18:19,007
就是一个unsigned integer

325
00:18:19,775 --> 00:18:22,335
所以就是32个bit

326
00:18:23,359 --> 00:18:24,383
32位

327
00:18:25,407 --> 00:18:31,039
那么三个32位其实呢它是把它其中两部分组合起来

328
00:18:31,551 --> 00:18:34,111
这个命名叫Hi这个叫喽

329
00:18:35,135 --> 00:18:39,999
Hi跟露组合起来其实是64个笔者在这里发生比较长了

330
00:18:40,511 --> 00:18:44,351
20不能全部划出来应该是他太多了一点点

331
00:18:45,631 --> 00:18:47,167
这是64个bit

332
00:18:48,191 --> 00:18:51,519
另外还有一个32bit

333
00:18:51,775 --> 00:18:56,383
确实是真心的句子的话

334
00:18:57,151 --> 00:18:59,967
这些做什么用我们现在暂时不讨论

335
00:19:01,247 --> 00:19:02,271
好

336
00:19:02,527 --> 00:19:06,367
最上面的图就是这个下面这三个栏目

337
00:19:07,391 --> 00:19:09,183
另外还有两根指针

338
00:19:10,463 --> 00:19:13,279
这两个只是现在这个图上我没有画出来

339
00:19:13,535 --> 00:19:16,351
后头在出现这个图的时候就会画出来了

340
00:19:19,423 --> 00:19:22,239
所以其实如果你在你的讲义上面的

341
00:19:23,007 --> 00:19:25,823
把这两天就把这个地方画两根指针

342
00:19:26,079 --> 00:19:27,871
能够更形象的表达

343
00:19:31,199 --> 00:19:31,967
这就是bat

344
00:19:34,527 --> 00:19:35,551
我其实

345
00:19:36,319 --> 00:19:42,463
最终是要一步一步的引导你去看我们要跳好几月先去看一下最后的结果是什

346
00:19:43,487 --> 00:19:46,047
我现在跳跳跳跳跳

347
00:19:48,863 --> 00:19:49,375
最后

348
00:19:50,143 --> 00:19:51,167
你会看到

349
00:19:51,935 --> 00:19:53,727
整个sdh

350
00:19:53,983 --> 00:19:55,007
长这个样子

351
00:19:58,079 --> 00:20:00,639
这个就是刚刚在看的黑的

352
00:20:01,919 --> 00:20:02,943
有16个

353
00:20:03,711 --> 00:20:09,343
这边点点点我只画了两个一开始只用到一个其他的15个备用

354
00:20:10,367 --> 00:20:10,879
这

355
00:20:11,391 --> 00:20:13,439
头有两根指针现在就画出来了

356
00:20:15,487 --> 00:20:15,999
好

357
00:20:16,255 --> 00:20:21,375
后面的动作就是要一步一步的引导你去看他怎么长出这个东西

358
00:20:22,143 --> 00:20:28,287
而长出这个东西做什么用呢他要用这个数据结构去玩里

359
00:20:28,543 --> 00:20:29,567
一块内存

360
00:20:30,847 --> 00:20:36,991
我现在可以先告诉你他要管理因为该用什么复杂的结构去管那个

361
00:20:37,247 --> 00:20:38,271
勒索

362
00:20:40,063 --> 00:20:46,207
管理需要做什么用就是为了将来给出去回收都能够很快也能够消除这

363
00:20:46,463 --> 00:20:47,999
这个碎片要做

364
00:20:48,767 --> 00:20:50,815
这意味着这个目的

365
00:20:52,607 --> 00:20:54,143
我们现在的概念

366
00:20:54,655 --> 00:21:00,799
他为了做这些管理真正要给出去的是因为他是为了要做这个管理的他消耗了

367
00:21:01,055 --> 00:21:03,615
好了这么多我们后面可以把这些

368
00:21:04,127 --> 00:21:07,711
这些算是开销covid

369
00:21:07,967 --> 00:21:09,759
为了那一枚打40

370
00:21:10,271 --> 00:21:13,343
消耗了这么多这些通通都可以算出来

371
00:21:13,855 --> 00:21:15,903
把它的成本是多少

372
00:21:17,184 --> 00:21:18,464
前面

373
00:21:22,304 --> 00:21:26,400
我刚想说所以我现在要一步一步的大阴蒂

374
00:21:26,912 --> 00:21:30,496
从这个黑的开始变化

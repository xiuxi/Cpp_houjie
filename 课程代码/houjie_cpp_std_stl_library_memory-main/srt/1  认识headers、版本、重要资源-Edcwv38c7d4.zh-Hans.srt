1
00:02:59,200 --> 00:03:02,016
这句话没有什么好要解释的因为

2
00:03:02,784 --> 00:03:04,064
自粘上太清楚了

3
00:03:05,088 --> 00:03:08,416
但并不是放在放之四海皆准

4
00:03:08,672 --> 00:03:12,256
比如说我们现在每天看电视我们需要知道电视道理吗

5
00:03:12,768 --> 00:03:14,048
不一定需要

6
00:03:16,608 --> 00:03:19,680
我们现在开车我们需要知道车子的原理吗

7
00:03:20,192 --> 00:03:21,216
可能需要

8
00:03:21,728 --> 00:03:24,800
这样的话如果你车子发生故障

9
00:03:25,312 --> 00:03:27,104
你就知道怎么处理

10
00:03:28,128 --> 00:03:34,272
所以反正我们现在成为一个这么一个程序员我们就会很

11
00:03:34,528 --> 00:03:35,040
很清楚

12
00:03:35,808 --> 00:03:38,112
这句话所代表的含义

13
00:03:41,696 --> 00:03:46,560
上这门课我们这个第1讲你需要具备什么样的基础的

14
00:03:46,816 --> 00:03:50,400
你只要有cplusplus基本语法的基础就可以了

15
00:03:50,656 --> 00:03:53,728
因为在这第1讲里面我要写

16
00:03:54,240 --> 00:03:56,544
一个范例程式

17
00:03:57,056 --> 00:04:03,200
会发音你来看看如何使用cplusplus标准库最重要的六大

18
00:04:03,456 --> 00:04:06,272
大部件competent六大组件部件

19
00:04:07,040 --> 00:04:10,368
所以你只要具备是一家基本语法你就可以

20
00:04:10,624 --> 00:04:11,392
开始

21
00:04:11,904 --> 00:04:16,768
这个基本语法的包括如何正确的使用模板

22
00:04:17,024 --> 00:04:19,839
这里为什么谈到这样的因为是一家标准

23
00:04:20,095 --> 00:04:20,607
酷

24
00:04:21,631 --> 00:04:27,775
主要是用Gmail programming也就是把这个工具写出来的他没有

25
00:04:28,031 --> 00:04:29,055
有太多的

26
00:04:29,567 --> 00:04:34,175
面向对象的成分观念技巧在你有没有

27
00:04:34,687 --> 00:04:38,783
也就是说他没有太多的在早期没有太多的继承

28
00:04:39,551 --> 00:04:42,367
现在是比较多的记者应该反不同了

29
00:04:42,623 --> 00:04:43,647
版本的眼镜

30
00:04:43,903 --> 00:04:47,231
有比较多的继承但是也没有那些是很烦人的

31
00:04:47,487 --> 00:04:49,023
虚函数非洲方式

32
00:04:50,559 --> 00:04:52,351
OK所以

33
00:04:52,607 --> 00:04:55,167
主要他是用模板做出来的

34
00:04:55,423 --> 00:04:59,007
所以我们必须知道怎么样去正确的使用模板

35
00:04:59,263 --> 00:05:03,615
这个这个字非常简单就算你现在没有基础的话待会你看成是吗

36
00:05:03,871 --> 00:05:07,455
我写的测试真是一看就懂非常非常简单

37
00:05:10,015 --> 00:05:11,551
我们的目标是什么呢

38
00:05:12,063 --> 00:05:18,207
这一章主要是针对整个课程整个课程就包括第1讲第2讲第3讲的

39
00:05:18,463 --> 00:05:18,975
等等等

40
00:05:19,999 --> 00:05:24,351
那整个课程里面我把这个目标分为label 0123

41
00:05:24,863 --> 00:05:25,887
我们今天

42
00:05:26,399 --> 00:05:26,911
9

43
00:05:27,167 --> 00:05:27,679
Focus

44
00:05:29,215 --> 00:05:32,799
焦点放在level 0就是使用cplusplus标准

45
00:05:33,823 --> 00:05:35,871
使用CSS的标准库呢

46
00:05:36,383 --> 00:05:40,223
也不是一个困难是不难说容易也容易

47
00:05:40,735 --> 00:05:41,503
因为

48
00:05:41,759 --> 00:05:45,087
你上网等下我会介绍几个很重要的

49
00:05:45,343 --> 00:05:46,111
页

50
00:05:46,367 --> 00:05:47,391
你上去了

51
00:05:48,671 --> 00:05:50,975
可以找到各式各样的粒子

52
00:05:51,231 --> 00:05:52,767
所以也不太难

53
00:05:54,047 --> 00:06:00,191
困难的地方是在于说你心里头其实要对于这一些你所用的东西的结构有一个啥

54
00:06:00,447 --> 00:06:03,519
相当的了解你才能够知其然也

55
00:06:03,775 --> 00:06:04,799
知行合一

56
00:06:05,823 --> 00:06:06,335
至少

57
00:06:06,591 --> 00:06:07,871
一个程度的

58
00:06:08,127 --> 00:06:09,151
词曲赋予了

59
00:06:10,175 --> 00:06:13,759
这个是level 0我们要使用cplusplus标准

60
00:06:14,527 --> 00:06:15,551
那么到后面的

61
00:06:15,807 --> 00:06:17,343
其他的角色里头了

62
00:06:17,599 --> 00:06:22,463
Label1要认识深入的认识新佳佳标准库

63
00:06:22,719 --> 00:06:27,839
目标是什么呢我很喜欢的一句话就胸中自有丘和

64
00:06:28,351 --> 00:06:32,703
就是说你在使用这些部件的时候你非常清楚

65
00:06:33,215 --> 00:06:33,727
他在

66
00:06:34,239 --> 00:06:35,263
内存里面

67
00:06:35,519 --> 00:06:36,287
长什么样子

68
00:06:36,543 --> 00:06:42,687
他是怎么扩展的当你放100万个元素进去的时候它是形成一个什么样子的结构

69
00:06:42,943 --> 00:06:47,807
你有了这张图胸中自有丘和有了这个图之后

70
00:06:48,063 --> 00:06:49,599
你才能够

71
00:06:49,855 --> 00:06:55,999
决定不是判断你该用哪一个部件哪一种容器哪一种算法

72
00:06:56,511 --> 00:06:58,303
能够达到最好的效率

73
00:06:58,815 --> 00:07:00,095
What

74
00:07:00,607 --> 00:07:01,631
别不出来

75
00:07:01,887 --> 00:07:04,447
就是良好的使用是一家叫标准

76
00:07:06,495 --> 00:07:12,639
帮你对CSS标准库有一个相当的认识之后你才能够很良好

77
00:07:12,895 --> 00:07:13,407
好的运用

78
00:07:13,919 --> 00:07:18,271
注意label in只是运用devtools良好的运用

79
00:07:18,783 --> 00:07:22,623
所以你必须对于这个整个体系结构有相当的了解

80
00:07:23,391 --> 00:07:27,743
扩充C加加标准库做到这一部分的

81
00:07:28,255 --> 00:07:34,399
必要性多吗不是太不好基本上你能够非常好的应用最佳的标准库

82
00:07:34,655 --> 00:07:36,959
已经是很棒很棒的有多贵吗

83
00:07:38,751 --> 00:07:39,263
好

84
00:07:40,031 --> 00:07:42,591
大致上分为四个label

85
00:07:44,383 --> 00:07:50,527
我先来谈一谈是一家叫标准库有时候那你会听到另外一个称呼叫做

86
00:07:51,807 --> 00:07:55,135
标准模板库standard template Library

87
00:07:55,391 --> 00:07:56,159
STL

88
00:07:56,415 --> 00:07:57,695
到底这两个

89
00:07:57,951 --> 00:08:02,047
是对等的东西吗是同一个东西吗或者怎么样呢

90
00:08:02,303 --> 00:08:03,583
我来解释一下

91
00:08:05,631 --> 00:08:11,775
Cplusplus标准库就是你现在能够在现在家里面了他重复给你

92
00:08:12,031 --> 00:08:15,103
付给你什么东西一个编译器他会付给你

93
00:08:15,359 --> 00:08:16,639
很多很多的

94
00:08:17,151 --> 00:08:18,175
头文件

95
00:08:18,431 --> 00:08:24,575
以这种形式给你这个标准库而不是编译好的东西所以你完全可以看到

96
00:08:24,831 --> 00:08:26,623
看到整个的说出口

97
00:08:26,879 --> 00:08:28,415
源代码都可以看到

98
00:08:29,183 --> 00:08:30,975
整个就这个睡觉家标准

99
00:08:32,511 --> 00:08:38,655
至于以前常常用的一个名称现在也大家也常常在用在STL这是一个什么东西

100
00:08:38,911 --> 00:08:39,423
锡兰

101
00:08:39,935 --> 00:08:42,239
我自己这样把他

102
00:08:42,751 --> 00:08:48,127
它大致区分好并不是所有的人都会这么说的我自己这么

103
00:08:48,895 --> 00:08:50,175
怎么去解释它

104
00:08:50,687 --> 00:08:55,807
你可以说在标准库里面可能70% 80% 85

105
00:08:56,319 --> 00:08:57,087
就是所谓的

106
00:08:57,343 --> 00:08:58,111
STL

107
00:08:58,879 --> 00:09:02,975
这个SQL分为六大部件六大考头冷

108
00:09:04,255 --> 00:09:06,047
等一下我们就要介绍

109
00:09:06,559 --> 00:09:08,095
所以我可以说

110
00:09:08,607 --> 00:09:10,655
标准库大鱼

111
00:09:11,167 --> 00:09:11,935
Str

112
00:09:13,215 --> 00:09:19,359
Mysql之外这六大部件啊怎么容器的算法来分配器在这等

113
00:09:19,615 --> 00:09:24,991
等等这六个之外还有一些零零碎碎的小东西也非常重要也很好用

114
00:09:26,271 --> 00:09:28,575
最美六大部件就是STL

115
00:09:29,087 --> 00:09:31,391
而其他的周边的这些小东西呢

116
00:09:31,647 --> 00:09:36,511
整个加上x叫做C加角标准库我们可以怎么样的理解

117
00:09:38,303 --> 00:09:39,839
你只要手上有

118
00:09:40,095 --> 00:09:40,863
编译器

119
00:09:41,119 --> 00:09:45,727
你就一定已经带着了一个标准库是在标准库刚刚我也提到了

120
00:09:46,239 --> 00:09:49,311
他是以黑defiance的形式呈现

121
00:09:49,823 --> 00:09:52,127
所以你可以看到所有的

122
00:09:52,383 --> 00:09:53,151
源代码

123
00:09:54,687 --> 00:09:56,223
我来看他这边我所写的

124
00:09:57,247 --> 00:10:00,575
Cplusplus标准库的这些头文件

125
00:10:01,855 --> 00:10:03,135
不太复杂

126
00:10:03,391 --> 00:10:05,695
叫延伸文件名称

127
00:10:06,463 --> 00:10:07,999
Expansion fireman

128
00:10:08,767 --> 00:10:12,607
一般我们对于这个头文件的都会加上点h

129
00:10:13,119 --> 00:10:16,447
但是现在新式的这一个就是要为心也是

130
00:10:16,703 --> 00:10:19,263
好多年了那十几年都有了啊

131
00:10:19,519 --> 00:10:21,567
不太复杂明B H的

132
00:10:22,079 --> 00:10:25,663
例如我们可以这么写include factor不需要点h

133
00:10:25,919 --> 00:10:32,063
早起有点17号灯现在哪可以早期这个东西是不是还存在呢这个案时

134
00:10:32,319 --> 00:10:32,831
时间而定

135
00:10:33,087 --> 00:10:34,111
看你用的版本合并

136
00:10:34,367 --> 00:10:37,183
不过从现在开始就是大家注意到

137
00:10:37,439 --> 00:10:38,207
我们就

138
00:10:38,719 --> 00:10:41,535
用的这一些都是没有点H的这一种

139
00:10:41,791 --> 00:10:42,559
File_name

140
00:10:42,815 --> 00:10:43,583
名称

141
00:10:45,631 --> 00:10:46,143
浙江

142
00:10:46,399 --> 00:10:50,495
第二点我这边说什么呢说心事的细的黑的话

143
00:10:51,007 --> 00:10:52,287
过去

144
00:10:52,543 --> 00:10:55,359
你可能在学习家之前你学的是C

145
00:10:55,871 --> 00:11:02,015
你会用到什么stdio.h stdarg.h点h

146
00:11:02,527 --> 00:11:06,111
在其他的新的形势也没有点乐趣了

147
00:11:06,623 --> 00:11:09,183
所以你可以这样子include

148
00:11:09,439 --> 00:11:09,951
C

149
00:11:10,207 --> 00:11:11,231
Stdio

150
00:11:12,511 --> 00:11:18,655
就是把过去的那些有点邪气的人他点个钱拿掉前面再加上一个C要是他是

151
00:11:18,911 --> 00:11:21,215
它是C语言这一部分的

152
00:11:21,727 --> 00:11:24,799
这是一个命名的新的法则

153
00:11:26,847 --> 00:11:32,991
好的3点说就是的cdc25a就是带着这一切仍然

154
00:11:33,247 --> 00:11:34,015
然可以用

155
00:11:34,527 --> 00:11:38,623
所以你还是可以像以前那样写include stdio.h

156
00:11:39,135 --> 00:11:40,159
还是可以的

157
00:11:40,671 --> 00:11:42,207
我当然我今天大家族

158
00:11:42,463 --> 00:11:44,767
如果你开始写一个新的程序呢

159
00:11:45,023 --> 00:11:46,303
等着用心的

160
00:11:46,559 --> 00:11:47,839
法则比较好

161
00:11:49,119 --> 00:11:54,751
另外要介绍一件事情就是有所谓的namespace命名空间

162
00:11:57,823 --> 00:12:00,127
命名空间主要是让

163
00:12:01,151 --> 00:12:02,431
你可以把你的

164
00:12:02,687 --> 00:12:08,831
恭喜你所写的城市啊你的函数啦你的Lake啦死啦你的无

165
00:12:09,087 --> 00:12:13,951
模仿的灯灯等在封装起来包成另外一个名称这样就

166
00:12:14,463 --> 00:12:17,023
跟别人不会产生冲突

167
00:12:17,791 --> 00:12:19,583
那标准库这个

168
00:12:19,839 --> 00:12:21,631
这个开发团队了

169
00:12:22,655 --> 00:12:24,703
在标准规格书里头就说了

170
00:12:25,215 --> 00:12:29,823
这些开发团队都必须把他所写的所有标准化的东西

171
00:12:30,335 --> 00:12:36,479
放到一个namespace里头儿子的namespace必须叫做sp1

172
00:12:37,247 --> 00:12:38,527
青岛的意思

173
00:12:39,295 --> 00:12:40,063
所以这边说

174
00:12:40,831 --> 00:12:43,135
所有的这些新式的头文件

175
00:12:43,391 --> 00:12:44,159
所有的

176
00:12:44,415 --> 00:12:49,023
不见所有的组件都被封装在St的这个namespace里面

177
00:12:50,815 --> 00:12:52,095
所以他就变成说

178
00:12:52,351 --> 00:12:57,215
比如说我们等一下马上就要用到一些容器比如说我用factor好了

179
00:12:57,727 --> 00:12:59,007
他的名字叫fact

180
00:12:59,775 --> 00:13:01,567
但其实它的全名叫

181
00:13:01,823 --> 00:13:02,591
Std

182
00:13:02,847 --> 00:13:06,175
拨号报号全名是这样

183
00:13:07,455 --> 00:13:13,599
其实我们是写程式是绝对脱离不了标准库的我们到处都在用一下家标准不是我们当

184
00:13:13,855 --> 00:13:17,183
到处都要写那个ftp报号码好像是在太

185
00:13:17,439 --> 00:13:19,231
太琐碎太烦人了

186
00:13:19,999 --> 00:13:21,791
所以有这样的一个写法

187
00:13:22,303 --> 00:13:23,839
你可以写上这一句

188
00:13:24,095 --> 00:13:25,119
蓝色的这一句

189
00:13:25,631 --> 00:13:28,191
Using namespace std

190
00:13:28,703 --> 00:13:32,543
像这样的意思呢我用一个比较形象的说法就是

191
00:13:32,799 --> 00:13:38,175
就好像你把std这一个命名空间大牌全部打开的意思

192
00:13:39,455 --> 00:13:40,735
帮我用这样的形容

193
00:13:41,247 --> 00:13:43,551
这样子全部开的时候了

194
00:13:43,807 --> 00:13:48,415
后面你再用所有标准库的所有的东西就不需要再加上前面那个

195
00:13:48,671 --> 00:13:50,207
St的帽号码号

196
00:13:53,279 --> 00:13:54,815
最方便的方法

197
00:13:55,583 --> 00:13:57,119
或者是

198
00:13:57,375 --> 00:14:02,751
你在这个城市里面我觉得我只会用到10个和20个标准桂林的东西

199
00:14:03,263 --> 00:14:05,311
那我也不想把它全部打开

200
00:14:06,335 --> 00:14:08,639
我们可以一个一个这样写

201
00:14:08,895 --> 00:14:09,663
UC

202
00:14:09,919 --> 00:14:12,479
Std冒号冒号COS

203
00:14:12,735 --> 00:14:14,783
你写的这一行之后呢

204
00:14:15,039 --> 00:14:16,575
以后你只要写字

205
00:14:16,831 --> 00:14:17,343
Out

206
00:14:17,599 --> 00:14:20,927
就可以了他就是代表St的帽号蛮好笑的

207
00:14:22,975 --> 00:14:27,327
不过像这样的话你你这么写的话呢你的程序用10个你就

208
00:14:27,583 --> 00:14:28,863
而且把这是一个

209
00:14:29,119 --> 00:14:29,887
都写出来

210
00:14:31,679 --> 00:14:32,959
叫我个人的话

211
00:14:33,471 --> 00:14:34,239
我当然

212
00:14:34,495 --> 00:14:37,567
很方便的很习惯的很喜欢使用的一种

213
00:14:38,079 --> 00:14:40,383
也不会带来太大的困扰

214
00:14:41,919 --> 00:14:42,431
好

215
00:14:44,223 --> 00:14:45,759
还要请注意这个最具话

216
00:14:46,015 --> 00:14:47,807
就是的头文件

217
00:14:48,063 --> 00:14:49,343
我们刚在前面提到

218
00:14:49,599 --> 00:14:52,415
有所为就是的头文件有点H的哪一种

219
00:14:52,671 --> 00:14:55,743
就是个头文件里面的这些零组件的

220
00:14:55,999 --> 00:14:59,583
是并没有背部这边有一个强调了

221
00:15:00,095 --> 00:15:02,399
不被封装在SD

222
00:15:05,983 --> 00:15:07,775
请注意看看这一个例子

223
00:15:09,567 --> 00:15:13,663
我在我的城市里头引入的这些这些这些这些这些

224
00:15:15,455 --> 00:15:20,063
我的习惯那就在下面马上加一行using namespace std

225
00:15:20,831 --> 00:15:22,879
因为这些都是ascii的里面的东西

226
00:15:24,671 --> 00:15:30,303
然后我在接下来我要使用这些那我就不用加上那个繁琐的

227
00:15:30,815 --> 00:15:32,607
S t p冒号报号

228
00:15:33,631 --> 00:15:34,655
这个

229
00:15:35,167 --> 00:15:35,679
这个写法

230
00:15:39,007 --> 00:15:40,287
好感谢

231
00:15:43,615 --> 00:15:48,223
版本有没有关系版本中的重要版本会不会影响那些人是不会

232
00:15:48,735 --> 00:15:50,527
因为这个叫标准库

233
00:15:51,551 --> 00:15:54,879
所以你用v9c家家你用你用各式各样的啊

234
00:15:55,391 --> 00:15:56,159
下午

235
00:15:56,415 --> 00:16:02,559
我这张画面上左手边就是b2c家家这个比较早期版本的6.0现在已经到20

236
00:16:02,815 --> 00:16:04,351
13 2015都有了

237
00:16:04,607 --> 00:16:05,631
这个画面

238
00:16:06,143 --> 00:16:12,287
右手边的这个是11的大家应该怎么念那不知道他原来表示什么意思可能是

239
00:16:13,311 --> 00:16:14,847
你会什么

240
00:16:15,103 --> 00:16:16,895
OK这是

241
00:16:17,151 --> 00:16:20,479
这个的画面不管你用哪一个

242
00:16:22,271 --> 00:16:24,063
哪一个开发平台

243
00:16:24,575 --> 00:16:30,719
他所带的是哪一套编译器反正他们都会带着一套标准库而这些标准库的用法

244
00:16:31,999 --> 00:16:34,047
100%次样

245
00:16:36,607 --> 00:16:38,143
100%

246
00:16:38,399 --> 00:16:39,935
会不会太

247
00:16:40,959 --> 00:16:41,727
硬了一点

248
00:16:42,751 --> 00:16:44,799
那加90% 9.99号了

249
00:16:45,055 --> 00:16:47,359
因为确实在过去的不同的

250
00:16:47,871 --> 00:16:48,895
不同的

251
00:16:49,407 --> 00:16:55,551
编译器所带的标准库上面的确是他们彼此的用法会有那么

252
00:16:55,807 --> 00:16:57,087
很少很少的一点点

253
00:16:57,599 --> 00:17:00,927
用法是不一样的这当然造成困扰

254
00:17:01,695 --> 00:17:04,511
那我们讲90% 9.99好了

255
00:17:07,839 --> 00:17:13,983
好所以不管你用什么样的开发工具是那编译器在我后面所讲的这个例子呢

256
00:17:14,239 --> 00:17:15,775
写法是完全一样

257
00:17:19,871 --> 00:17:21,407
接下来商业

258
00:17:21,663 --> 00:17:22,943
我要介绍

259
00:17:23,455 --> 00:17:24,735
是重要的

260
00:17:25,247 --> 00:17:27,039
网站中网页

261
00:17:27,295 --> 00:17:30,623
没有这些东西我没有办法写程序写程序

262
00:17:31,135 --> 00:17:31,903
为什么呢

263
00:17:32,671 --> 00:17:35,487
当手上有本书也可以呀

264
00:17:35,743 --> 00:17:40,351
主要是因为这些东西那么的博世家标准库是太丰富了

265
00:17:40,863 --> 00:17:44,447
那你要写一个程序的时候你需要查你要用到它

266
00:17:44,959 --> 00:17:51,103
标准库里面的东西你他去查他的规格所以这些网站是非常有用综艺的人非常的好

267
00:17:52,127 --> 00:17:54,687
一个是cplusplus com

268
00:17:55,199 --> 00:17:56,479
画面在这个地方

269
00:17:57,247 --> 00:17:59,551
我不就不想去介绍它的内容了

270
00:18:00,831 --> 00:18:03,135
的确可以看到这没有reference

271
00:18:03,391 --> 00:18:06,207
什么药才可以教你怎么写城市

272
00:18:06,463 --> 00:18:08,255
没有reference number我们

273
00:18:08,511 --> 00:18:12,607
对我们而言此来讲的最有用的就是这个reference差了

274
00:18:13,375 --> 00:18:14,655
它可以帮助你查

275
00:18:14,911 --> 00:18:16,447
背个很快的可以查到

276
00:18:17,727 --> 00:18:23,359
好下一个网站是cas cppreference.com

277
00:18:23,871 --> 00:18:25,919
他得以进去的画面是这样

278
00:18:26,175 --> 00:18:27,455
这里有分门别类

279
00:18:27,711 --> 00:18:30,527
我们刚不是集过吗是一家标准库由

280
00:18:30,783 --> 00:18:32,575
内含子STL

281
00:18:33,087 --> 00:18:34,111
STL

282
00:18:34,879 --> 00:18:36,671
最好的六大部件

283
00:18:36,927 --> 00:18:39,487
这边就有了这个就是容器

284
00:18:41,279 --> 00:18:44,607
这个就是我现在一下子也看不到啊

285
00:18:44,863 --> 00:18:46,655
等等等等等

286
00:18:47,167 --> 00:18:49,727
都有分类所以都很容易找

287
00:18:51,775 --> 00:18:52,799
下一个市

288
00:18:53,055 --> 00:18:54,847
任务是一家家的官网

289
00:18:55,103 --> 00:18:59,199
Gcc afternoon.org

290
00:19:02,271 --> 00:19:06,623
他们之间没有什么隐忧和列都一样的好

291
00:19:07,135 --> 00:19:09,439
所以还会有其他的一些

292
00:19:09,695 --> 00:19:13,023
很有帮助的我站我这边只列了三个自己

293
00:19:13,279 --> 00:19:14,047
尝尝看

294
00:19:17,375 --> 00:19:18,143
舒淇的

295
00:19:18,655 --> 00:19:19,167
车

296
00:19:19,423 --> 00:19:20,447
走了

297
00:19:21,727 --> 00:19:23,519
我将自己太多了

298
00:19:24,799 --> 00:19:26,847
我自己很喜欢这样本书

299
00:19:27,359 --> 00:19:31,967
左手边是一本家6Plus分的library 128GB

300
00:19:32,223 --> 00:19:35,551
负面上注意他有一个大大的cplusplus

301
00:19:35,807 --> 00:19:36,575
Eleven

302
00:19:37,343 --> 00:19:41,951
涵盖了6Plus 2011年的新标准的内容

303
00:19:42,975 --> 00:19:44,511
我喜欢的一本书

304
00:19:44,767 --> 00:19:47,071
右边这一本的作者就是我

305
00:19:47,327 --> 00:19:51,423
写的是STL源码剖析这是年代

306
00:19:51,679 --> 00:19:52,959
有一点年代了啊

307
00:19:53,215 --> 00:19:55,775
用的也是比较旧的版本

308
00:19:56,799 --> 00:20:00,127
我们在这个日期处在日新月异的这一种

309
00:20:00,383 --> 00:20:04,735
电脑技术的计算机技术领头的好像就东西都不好了

310
00:20:05,503 --> 00:20:08,831
70家有一老如有一宝这个话到底在

311
00:20:09,087 --> 00:20:10,623
电脑解成不成立呢

312
00:20:10,879 --> 00:20:12,415
有时候是成立的

313
00:20:12,927 --> 00:20:14,463
讲这个书呢用的是

314
00:20:14,719 --> 00:20:15,999
162点

315
00:20:16,255 --> 00:20:21,375
91版的Cisco这边竟然将源码剖析了其源代码

316
00:20:21,887 --> 00:20:25,471
如果你现在就看现在的牧师一下

317
00:20:26,239 --> 00:20:27,263
最新版本

318
00:20:27,519 --> 00:20:28,543
4.9

319
00:20:28,799 --> 00:20:31,871
还是5.5点零5点100的那些受够了

320
00:20:33,407 --> 00:20:34,175
比起你

321
00:20:34,687 --> 00:20:38,015
以前看下我自己就有这样性也比起以前看

322
00:20:38,271 --> 00:20:39,295
2.9 100

323
00:20:39,551 --> 00:20:45,695
那个实在是复杂的太多太多了但是最后你如果归纳出来呢做的事情一样

324
00:20:46,719 --> 00:20:51,071
所以当我们要去了解这个标准库这么复杂的庞大的东西

325
00:20:51,583 --> 00:20:53,119
它里面的做法的时候

326
00:20:53,375 --> 00:20:55,935
如果你是从新的版本是看的

327
00:20:56,191 --> 00:20:58,751
一头雾水困难度太高

328
00:20:59,007 --> 00:21:01,567
反而用旧的东西去看是一个

329
00:21:04,127 --> 00:21:05,151
这是我的一个

330
00:21:05,407 --> 00:21:07,711
有趣的小小的体会

331
00:21:08,735 --> 00:21:09,759
我们再往下

332
00:21:10,271 --> 00:21:13,087
那在这个第1讲里面我会给你一个城市

333
00:21:14,367 --> 00:21:17,952
把文件名称叫做cast-steel点cpp

334
00:21:18,464 --> 00:21:21,280
里面就有对C加加标准库的字

335
00:21:21,536 --> 00:21:24,864
测试就是引导你怎么去使用它了

336
00:21:26,144 --> 00:21:29,728
这个这个城市你就是接下来的第1讲一遍我要

337
00:21:30,240 --> 00:21:31,264
后面的

338
00:21:31,520 --> 00:21:34,592
叶带出来的东西你可以拿到这个

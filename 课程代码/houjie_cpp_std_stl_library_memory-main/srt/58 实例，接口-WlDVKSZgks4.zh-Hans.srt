1
00:00:06,144 --> 00:00:07,168
再往下

2
00:00:13,312 --> 00:00:15,616
现在我写一个

3
00:00:16,384 --> 00:00:18,176
相对完整的程序

4
00:00:19,712 --> 00:00:20,480
富

5
00:00:22,016 --> 00:00:23,808
里面有一些数据

6
00:00:24,832 --> 00:00:27,136
然后写的这四个函数

7
00:00:28,672 --> 00:00:30,464
刚刚讲过了这四个函数

8
00:00:31,488 --> 00:00:33,536
这四个数的写法

9
00:00:34,048 --> 00:00:36,608
写出来是这样在右手边

10
00:00:37,888 --> 00:00:40,704
为了维护这个程序能够进行

11
00:00:40,960 --> 00:00:44,288
会不会Crash为放掉崩溃掉

12
00:00:44,544 --> 00:00:45,824
右手边

13
00:00:46,336 --> 00:00:50,176
我还是真正去分配和释放内存

14
00:00:50,688 --> 00:00:52,992
我用的就是malloc和free

15
00:00:58,368 --> 00:01:03,744
所以我这个程序示范正是这四个函数完整的示范一次

16
00:01:04,000 --> 00:01:05,536
啊的写法

17
00:01:07,328 --> 00:01:09,632
你这里头该做什么事

18
00:01:10,400 --> 00:01:11,680
有你去设计的

19
00:01:14,752 --> 00:01:18,336
当设计好这样之后

20
00:01:19,872 --> 00:01:22,688
如果使用者是这么用这两个

21
00:01:23,968 --> 00:01:26,016
我是设计者和设计class

22
00:01:26,272 --> 00:01:27,808
使用者这么用

23
00:01:28,064 --> 00:01:34,208
这两行刚刚不是给过了吗他会被分解其中的动作就会跑到

24
00:01:34,464 --> 00:01:36,768
我所设计的这些函数来

25
00:01:39,584 --> 00:01:44,192
我真要另外再多介绍的一个东西就是下面这样

26
00:01:47,520 --> 00:01:51,360
如果使用者想刻意绕过你的设计

27
00:01:51,616 --> 00:01:53,152
我不知道有什么必要性

28
00:01:53,920 --> 00:01:54,688
或者

29
00:01:54,944 --> 00:01:59,296
他怎么知道你做了这个设计呢他想要让我过你他怎么知道

30
00:01:59,808 --> 00:02:05,952
兰州南到大家在勾心斗角吗也不是

31
00:02:06,208 --> 00:02:07,488
这个我们不管了

32
00:02:08,768 --> 00:02:14,400
总之就是语法上提供使用者如果这么用的话

33
00:02:15,168 --> 00:02:18,496
这有什么差别上下什么差别这边加了这个

34
00:02:18,752 --> 00:02:21,568
全局的这个作用域我号

35
00:02:22,336 --> 00:02:24,640
如果他这么写

36
00:02:25,408 --> 00:02:30,784
那么调用的就是全局的这两个函数而不再是

37
00:02:31,296 --> 00:02:34,368
你打算接管的这些函数

38
00:02:36,160 --> 00:02:42,304
啊所以注意这里啊若无成员函数就调用全局的函数

39
00:02:43,328 --> 00:02:44,352
这是上面这两个

40
00:02:45,632 --> 00:02:51,264
而下面这两个格一定强制采用全局的函数

41
00:02:57,664 --> 00:03:03,808
其实不要说蝶对迭来说使用者和设计者之间啊我想

42
00:03:04,064 --> 00:03:08,416
作为使用者的大多数人根本从来不知道可以这样用
